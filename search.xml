<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机基础知识</title>
      <link href="posts/6bcf31ad.html"/>
      <url>posts/6bcf31ad.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一章、计算机硬件设备"><a href="#第一章、计算机硬件设备" class="headerlink" title="第一章、计算机硬件设备"></a>第一章、计算机硬件设备</h1><h3 id="一、计算机发展史"><a href="#一、计算机发展史" class="headerlink" title="一、计算机发展史"></a>一、计算机发展史</h3><p>1、计算机发展历程</p><p>2、计算机的分类</p><pre class="line-numbers language-none"><code class="language-none">超算、巨型计算机、台式机、笔记本、平板、手机<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、计算机硬件组成"><a href="#二、计算机硬件组成" class="headerlink" title="二、计算机硬件组成"></a>二、计算机硬件组成</h3><p>1、计算机的基本组成:</p><pre class="line-numbers language-none"><code class="language-none">运算器，控制器，存储器（内存：RAM,ROM；外存：硬盘），输入设备（鼠标，键盘），输出设备（显示器，音箱）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、计算机系统：<br>硬件系统：</p><p>​    主机：</p><pre class="line-numbers language-none"><code class="language-none">CPU(运算器，控制器)，内存条：(RAM可读写存储器，ROM只读存储器，Cache高速缓存)；主板，硬盘，光驱，软驱，显卡，声卡，网卡，电源，数据线，总线(UBS)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    外设：</p><pre class="line-numbers language-none"><code class="language-none">存储器（外存：硬盘，U盘，软盘，光盘，磁带），输入设备（鼠标，键盘，扫描仪），输出设备（显示器，音箱，打印机）。RAM与硬盘的区别：RAM容量小，存储速度快，RAM是暂时性存储器，数据保存在电路上，断电丢失。硬盘容量大，数据保存在磁性介质上，会存储长久。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    软件系统：</p><pre class="line-numbers language-none"><code class="language-none">系统软件（操作系统，语言处理程序，系统管理于服务软件），应用软件（办公软件，娱乐软件）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、计算机硬件系统：</p><p>CPU</p><pre class="line-numbers language-none"><code class="language-none">核心和线程数量：主频：外频：缓存：是继承在CPU中的高速缓存器，用于临时存储数据（L1、L2、L3）。前端总线频率<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主板：</p><pre class="line-numbers language-none"><code class="language-none">各个部件的物理通道，也是各个部件数据传输的逻辑通道1）主要参数南北桥芯片CPU接口内存条槽主板架构：ATX、MicroATX2）设备接口硬盘接口显卡插槽扩展插槽扩展接口：USB接口、音频接口、网线接口、VGA接口(接显示器的)3）集成功能声卡、网卡、显卡<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内存：</p><pre class="line-numbers language-none"><code class="language-none">DDR、DDR2、DDR3、DDR4容量：4G、8G、16G工作频率：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>硬盘</p><pre class="line-numbers language-none"><code class="language-none">硬盘与主板的接口：数据接口、电源接口参数：类型：机械硬盘，固态硬盘容量：转速：10000rpm、7200rpm、5900rpm盘体尺寸：2.5寸、3.5寸接口标准：SATA3.0、SATA2.5缓存容量：64M、32M、16M、8M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显卡</p><pre class="line-numbers language-none"><code class="language-none">为显示器显示信号类型：集成显卡、独立显卡参数：显示器接口：VGA接口、DVI接口、HDMI接口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显示器</p><pre class="line-numbers language-none"><code class="language-none">类型：CRT显像管显示器、LCD液晶显示器参数：尺寸：14寸、15寸、16寸接口类型：VGA DVI HDMI USB亮度对比度分辨率：是能标识显示器所能显示的像素色域<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>声卡、网卡</p><pre class="line-numbers language-none"><code class="language-none">声卡：实现声波和数字信号转换的网卡：实现计算机与外界局域网的连接，并实现数据传输<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>光驱</p><pre class="line-numbers language-none"><code class="language-none">电脑读写光盘内容的设备光盘类型：CD、DVD、BD光驱读取数据：光驱通过激光头发射光束照射盘片，盘片反射回激光，光头在根据激光的强弱判断获取数据光驱接口：SATA接口、USB接口（外置光驱）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>机箱电源</p><pre class="line-numbers language-none"><code class="language-none">电源、电源线<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、台式机的的装机步骤</p><pre class="line-numbers language-none"><code class="language-none">将CPU和散热器安装到主板上将内存条安装到主板上将主板固定在机箱上将显卡、声卡、网卡安装到主机上将硬盘和光驱连接到主板上安装电源和连接各个电源线连接机箱线盖上机箱，插上鼠标、键盘和音箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、计算机硬件故障检测与维护</p><p>6、BIOS设置（cmos设置）</p><pre class="line-numbers language-none"><code class="language-none">BIOS是“基本输入输出系统”，它保存着计算机的基本输入输出设备，系统设置信息，开机后自检程序和系统自启程序，为计算机提供最底层的、最直接的硬件设置和控制。1）Standard CMOS Setup设置系统日期、时间、IDE设备、显示系统的类型、错误处理方法2）Boot Sequence：选择机器启动引导系统时的启动顺序3）Onboard控制打开关闭主板内置声卡、网卡，选择Auto打开，选择Disable关闭4）Supervisor Password And User Password Setup：管理员和普通用户密码设置UserPassword功能设定开机密码Supervisor Password是为了他人擅自修改CMOS的内容而设置5）强制恢复BIOS程序的默认设置BIOS程序：存储计算机最基本的程序（启动、检测、控制设备）CMOS芯片：存储BOIS程序的参数（系统时间、开机密码）电池：给COMS芯片供电，以保存COMS中的参数（一旦电池没电参数会丢失）根据该原理将电池取出在放回去，就会丢失用户自己的设置，恢复默认设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、计算机的工作原理"><a href="#三、计算机的工作原理" class="headerlink" title="三、计算机的工作原理"></a>三、计算机的工作原理</h3><p>1、计算机内部应采用二进制表示指令和数据。每条指令一般具有一个操作码和一个地址码，操作码表示运算性质，地址码定义操作数在存储器中的地址。</p><p>将编写好的程序和原始数据存入内存器中，然后启动计算机工作，计算机在不需操作人员干预的情况下，自动逐条取出指令和执行任务。</p><p>2、工作原理：</p><pre class="line-numbers language-none"><code class="language-none">用户运行程序的指令 &gt; 计算机将程序和数据输入内存 &gt; CPU根据程序指令运算 &gt; 计算机将结果输出 &gt; 计算机取出下一条指令的地址，并待命。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="第二章、计算机软件应用"><a href="#第二章、计算机软件应用" class="headerlink" title="第二章、计算机软件应用"></a>第二章、计算机软件应用</h1><h3 id="一、计算机操作系统"><a href="#一、计算机操作系统" class="headerlink" title="一、计算机操作系统"></a>一、计算机操作系统</h3><p>1、操作系统的作用</p><p>操作系统介于硬件和软件之间，协调计算机硬件的运作，用户通过操作系统控制硬件和软件</p><p>2、操作系统的功能</p><p>1）对CPU和进程管理</p><pre class="line-numbers language-none"><code class="language-none">对CPU管理处理器管理负责管理，调度和分派计算机资源，并控制程序的执行。就是对进程的管理。4核6线程，对进程之间互相干扰的管理对进程的管理进程的组成：程序块，进程控制块，数据块进程的状态：执行，就绪，等待<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）存储器管理</p><pre class="line-numbers language-none"><code class="language-none">1） 管理的对象是内存，存储器管理的主要功能是：分配和回收内存空间，提高内存利用率，扩充内存，对内存信息实现有效的保护。2）虚拟内存：欺骗程序，让它以为现在使用的内存是连续的。当内存(RAM)不够时候，把外存(硬盘)的空间虚拟成内存。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3）设备管理</p><pre class="line-numbers language-none"><code class="language-none">设备管理是指计算机系统中除了CPU和内存以外的所有输入，输出设备的管理。按资源分配分类：独占设备(打印机)，共享设备()，虚拟设备()主要技术：中断技术，通道技术，缓冲技术，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）文件管理</p><pre class="line-numbers language-none"><code class="language-none">就是对文件的一个统一组织管理。实质是“按名存取”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5）作业管理</p><pre class="line-numbers language-none"><code class="language-none">作业：就是计算机完成一个独立任务的程序以及所需的数据，就是一次作业。作业管理就是对用户提交的诸多作业进行管理，包括作业的组织，控制和调度等，尽可能的高效的利用整个系统资源。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、常见的操作系统</p><pre class="line-numbers language-none"><code class="language-none">Dos系统UinuxLinuxWindowsMac os系统<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、计算机中的信息表示"><a href="#二、计算机中的信息表示" class="headerlink" title="二、计算机中的信息表示"></a>二、计算机中的信息表示</h3><p>信息的数字化：信息在计算机内部的表现形式是数据，数据在计算机内部的表现形式是二进制，用二进制0和1来表示的信息被称为信息的数字化。</p><p>1、进位计数制</p><pre class="line-numbers language-none"><code class="language-none">二进制，八进制，十进制，十六进制1TB=1024GB、1GB=1024MB、1MB=1024KB、1KB=1024B、1B=8b,1=0或1进制数之间的转化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、数值数据的编码表示</p><pre class="line-numbers language-none"><code class="language-none">原码，反码，补码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、非数值数据的表示</p><pre class="line-numbers language-none"><code class="language-none">ASCII码，国标码，区位码，GBK，UTF-8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="三、安装操作系统"><a href="#三、安装操作系统" class="headerlink" title="三、安装操作系统"></a>三、安装操作系统</h3><p>1、光盘安装操作系统</p><pre class="line-numbers language-none"><code class="language-none">1）准备一张Windows操作系统的安装光盘2）将光驱设置为计算机的第一启动设备在开机的时候按del键或F2键，进入BOIS程序，选择Boot，选择CD-ROM，在按F10确定选择。3）进入安装程序，选择现在安装Windows同意安装4）进行磁盘分区（可选）对分区进行格式化选择文件系统：FAT32文件系统、NTFS文件系统5）输入Windows的密钥输入用户名和计算机名，一直下一步。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、U盘安装操作系统</p><pre class="line-numbers language-none"><code class="language-none">1）制作启动盘下载装机软件，将U盘插入，制作启动盘。2）下载Windows10的镜像文件到U盘Windows-x86-64.ios3）设置计算机从U盘启动开机按del键，进入BOIS程序，选择Boot，选择Boot Device Priority，将第一启动设备设置成U盘，按F10保存退出4）选择启动Windows PE维护系统Windows PE预安装环境，是一个为Windows安装准备的最小容量操作系统5）进行磁盘分区（可选）创建分区，选择文件系统，划分容量，并进行格式化对已用的磁盘进行分区，先删除逻辑分区，在删除扩展分区，最后删除主分区，在进行重新划分。6）重启计算机，在使用虚拟光驱加载Windows镜像文件7）使用桌面的Windows装机工具，进行装机8）拔出U盘，重启计算机，在开机时按del键，进入BOIS程序，选择Boot，选择Boot Device Priority，将第一启动设备设置成硬盘，按F10保存退出9）输入Windows的密钥输入用户名和计算机名，一直下一步。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、驱动程序"><a href="#四、驱动程序" class="headerlink" title="四、驱动程序"></a>四、驱动程序</h3><p>驱动程序是直接工作在各种硬件上的软件，能使各个硬件稳定的发挥性能、配和工作。</p><p>1、手动安装驱动程序</p><p>在Windows系统附带了大量的通用驱动程序，但有时候通用驱动程序和硬件不匹配，就需要要手动安装了。</p><pre class="line-numbers language-none"><code class="language-none">查看电脑版本号，在网上搜索版本对应的驱动程序，下载、解压、安装。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="五、系统管理"><a href="#五、系统管理" class="headerlink" title="五、系统管理"></a>五、系统管理</h3><p>1、磁盘管理</p><pre class="line-numbers language-none"><code class="language-none">1）查看磁盘分区右键Windows属性，选择磁盘管理2）更改盘符选择盘符，右键选择驱动器号和路径3）磁盘清理、碎片整理选择盘符，右键属性，点击工具<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、账号管理</p><pre class="line-numbers language-none"><code class="language-none">创建管理员用户，创建本地标准用户删除用户账号切换用户账号（注销在登录）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫</title>
      <link href="posts/dbb714e3.html"/>
      <url>posts/dbb714e3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一章、爬虫简介"><a href="#第一章、爬虫简介" class="headerlink" title="第一章、爬虫简介"></a>第一章、爬虫简介</h1><p>1、网络爬虫（web crawler：也叫网页蜘蛛，网络机器人，是一种用来自动浏览万维网的程序或者脚本。爬虫可以验证超链接和HTML代码，用于网络抓取（Web scraping）。网络搜索引擎等站点通过爬虫软件更新自身的网站内容（Web content）或其对其他网站的索引。</p><p>2、爬虫分类：通用网络爬虫（General Purpose Web Crawler）、聚焦网络爬虫（Focused Web Crawler）、增量式网络爬虫（Incremental Web Crawler）、深层网络爬虫（Deep Web Crawler）。</p><p>3、url(统一资源定位符)：<a href="http://host[:post][path]">http://host[:post][path]</a><br>http: 超文本传输协议<br>host: IP地址/域名<br>post: 端口号，默认为80<br>path: 请求资源的路径</p><p>4、Robots协议</p><p>(1)、爬虫的限制：<br>    来源的审查：判断User Agent等进行限制<br>    发布公告：Robots协议</p><p>(2)、Robots协议：网络爬虫排除标准<br>形式：网站下的robots.txt文件<br>基本语法：* 代表所有，/代表根目录<br>user-agent: *<br>pisallow: /</p><h1 id="第二章、网络请求-requests"><a href="#第二章、网络请求-requests" class="headerlink" title="第二章、网络请求 requests"></a>第二章、网络请求 requests</h1><p>环境安装：pip install requests</p><h3 id="一、requests库的方法"><a href="#一、requests库的方法" class="headerlink" title="一、requests库的方法"></a>一、requests库的方法</h3><p>1、requests库的七个方法</p><pre class="line-numbers language-none"><code class="language-none">requests.request(): 构造一个请求requests.get(): 发起get请求，返回response对象requests.post(): 向网页发起post请求，并向服务器传递参数requests.head(): 获取html网页头部信息requests.put(): 发起put请求requests.pach(): 向网页发起局部修改请求requests.delete(): 向网页发起删除请求<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、requests库的get-方法"><a href="#二、requests库的get-方法" class="headerlink" title="二、requests库的get()方法"></a>二、requests库的get()方法</h3><p>3、 requests库的两个重要参数</p><pre class="line-numbers language-none"><code class="language-none">request对象：向服务器请求资源response对象：爬虫返回的内容（响应数据）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>1、requests库的get()方法</p><pre class="line-numbers language-none"><code class="language-none">格式：对URL发起网络请求，并返回response对象(响应数据)。response = request.get(url) 参数：request.get(url, params, kwargs)--url: 网页地址--params: url额外参数，字典或字节流格式--kwargs: 12个控制访问的参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、requests库的post-方法"><a href="#三、requests库的post-方法" class="headerlink" title="三、requests库的post()方法"></a>三、requests库的post()方法</h3><pre class="line-numbers language-none"><code class="language-none">格式：对URL发起网络请求，并返回response对象(响应数据)。response = request.post(url) 参数：request.get(url, data, kwargs)--url: 网页地址--data: url额外参数，字典或字节流格式--kwargs: 12个控制访问的参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、response对象的属性："><a href="#四、response对象的属性：" class="headerlink" title="四、response对象的属性："></a>四、response对象的属性：</h3><pre class="line-numbers language-none"><code class="language-none">response.text: http响应数据的字符串形式，即url页面的内容response.content: http响应数据的二进制形式response.status_code：http请求返回的状态，200表示成功。response.encoding：从http的头部猜测响应数据的编码形式response.apparent_encoding: 从内容中分析响应数据的编码形式response.cookies：获取RequestsCookieJar对象&lt;RequestsCookieJar[&lt;Cookie bid=uk68MyRriZ8 for .douban.com/&gt;]&gt;response.headers：获取头部数据response.reason：返回状态信息response.url：返回请求的URLresponse.raw：获取原始数据&lt;urllib3.response.HTTPResponse object at 0x00000234271FC820&gt;response.json：序列化为JSON格式数据&lt;bound method Response.json of &lt;Response [200]&gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、处理Requests重定向"><a href="#六、处理Requests重定向" class="headerlink" title="六、处理Requests重定向"></a>六、处理Requests重定向</h3><pre class="line-numbers language-none"><code class="language-none">在网络请求时添加：禁止重定向allow_redirects=False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="七、Requests-SSL证书验证"><a href="#七、Requests-SSL证书验证" class="headerlink" title="七、Requests SSL证书验证"></a>七、Requests SSL证书验证</h3><pre class="line-numbers language-none"><code class="language-none">1、忽视证书import requestsfrom requests.packages import urllib3urllib3.disable_warnings()resp = requests.get("https://12306.cn", verify=False)print(resp.status_code)2、设置本地证书import requestsfrom requests.packages import urllib3urllib3.disable_warnings()resp = requests.get("https://12306.cn", cert=("**.crt", "**key"))print(resp.status_code)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="八、网络请求的编码流程："><a href="#八、网络请求的编码流程：" class="headerlink" title="八、网络请求的编码流程："></a>八、网络请求的编码流程：</h3><pre class="line-numbers language-none"><code class="language-none">1. 指定url(网址)url = "http://baidu.com"2. UA伪装，将爬虫的身份标识，伪装成浏览器的请求头(headers)的请求载体的身份标识，可以躲过UA检测。headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)";}3. 处理get/post请求的参数(params/data)params = {    "bs": "爬虫";}4. 发起get/post请求，并返回一response对象response = request.get(url) 5. 获取响应数据，会返回text(字符串)/json(对象)/content(二进制)格式的数据data = response.text6. 存储数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第三章、数据解析"><a href="#第三章、数据解析" class="headerlink" title="第三章、数据解析"></a>第三章、数据解析</h1><h3 id="一、数据解析简介"><a href="#一、数据解析简介" class="headerlink" title="一、数据解析简介"></a>一、数据解析简介</h3><p>一）解析模块</p><pre class="line-numbers language-none"><code class="language-none">1、BeautifulSoup2、re3、Xpath<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>二）数据解析原理：<br>    1、解析的局部的文本内容都会在标签之间或标签属性之中<br>    2、进行指定标签的定位<br>    3、对标签或标签属性之间的数据进行提取(解析)</p><p>三）数据解析的编码流程：</p><pre class="line-numbers language-none"><code class="language-none">1. 指定url(网址)2. UA伪装，将爬虫的身份标识，伪装成浏览器的请求头(headers)的请求载体的身份标识，可以躲过UA检测。3. 处理get/post请求的参数(params/data)4. 发起get/post请求，并返回一response对象5. 获取响应数据，会返回text/json格式的数据6. 数据解析(BeautifulSoup/re/xpath),提取局部所需数据7. 存储数据(txt/csv/jpg/json)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、re-正则表达式"><a href="#二、re-正则表达式" class="headerlink" title="二、re(正则表达式)"></a>二、re(正则表达式)</h3><pre class="line-numbers language-none"><code class="language-none">import re(.*?)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="三、BeautifulSoup"><a href="#三、BeautifulSoup" class="headerlink" title="三、BeautifulSoup"></a>三、BeautifulSoup</h3><p>1、BeautifulSoup进行数据解析原理：</p><pre class="line-numbers language-none"><code class="language-none">1）实例化一个BeautifulSoup对象，并将网页源码数据加载到该对象中soup = BeautifulSoup(html, 'lxml')2）通过调用BeautifulSoup对象中的方法(属性)，进行标签定位和数据提取title = soup.find_all('span', class_='title')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、BeautifulSoup对象的实例化：</p><pre class="line-numbers language-none"><code class="language-none">1). 将本地的html文档中数据加载到该对象中with open('./哔哩哔哩.html','r',encoding='utf-8') as fp:soup = BeautifulSoup(fp,'lxml')    2). 将互联网上的网页源码加载到该对象中response_text = response.textsoup = BeautifulSoup(response,'lxml')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、提供的用于数据解析的方法和属性：</p><pre class="line-numbers language-none"><code class="language-none">(1)标签定位：soup.标签名# 返回soup对象中第一次出现的标签名对应的标签soup.find:# 返回soup对象中第一次出现的标签名对应的标签soup.find('标签名')(2)属性定位：# 返回soup对象中第一次出现的标签名和属性名所对应的标签soup.find('标签'，'属性名')# 返回soup对象中所有出现过的标签名和属性名所对应的标签，是列表类型soup.findall('标签名'，'属性名')(3)select(选择器)：soup.select(''标签名(div，)' / '.类名(class，)' / '#id名(#id)'，....选择器)')# select()返回的是一个列表,(.表示的类选择器)组合查找：soup.select('div  .类名')# 通过标签和class组合查找，使用空格连接不同方式soup.select('div  #id名')# 通过标签和id组合查找，使用空格连接不同方式soup.select('a[属性="属性名"]') # 通过标签的属性查找，标签和属性必须在同一个节点内。层级选择器：soup.select('. &gt; ul &gt; li &gt; a')# .可以是标签/类/id，&gt;表示的是一个层级soup.selsct('. &gt; ul a')# ul标签和a标签之间有空格，空格表示的是多个层级(4)获取标签之间的文本数据：soup.标签名.text/.string/.get_text()区别：text和.get_text()，可以获取一个标签中所有的文本内容.string，只可以获取该标签下面直系的文本内容(5)获取标签中的属性值：soup.标签名['属性名']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、xpath"><a href="#四、xpath" class="headerlink" title="四、xpath"></a>四、xpath</h3><p>1、xpath解析原理;</p><pre class="line-numbers language-none"><code class="language-none">（1）.实例化一个etree的对象，且将需要解析的网页源码加载到该对象中（2）.调用etree对象中的xpath方法，并结合xpath表达式，实现标签的定位和内容的提取<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、etree对象的实例化：from lxml import etree</p><pre class="line-numbers language-none"><code class="language-none">(1). 将本地的html文档中的源码加载到etree对象中etree.parse(file_path)(2). 将互联网上的网页源码加载到etree对象中etr = etree.HTML('response_text')data = etr.xpath('xpsth表达式')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、xpath表达式：(可以直接copy xpath)</p><pre class="line-numbers language-none"><code class="language-none">1）/表示一个层级，最左边的/表示的是从根节点开始定位  ./表示当前标签2）//表示多个层级，最左边的//表示的是从任意位置开始定位3）属性定位：//标签名[@属性名='属性值']例如：，返回的是一个列表//div[@class='class_value']4）索引定位：//标签名[@属性名='属性值']/标签名[1]例如：索引从1开始，//div[@class='class_value']/p[1]5）提取文本：提取直系的文本内容：/text()例如：//div[@class='class_value']/p[1]/text()提取非直系的文本内容(所有的文本内容)：//text()例如：//div[@class='class_value']/p[1]//text()6）提取属性：/@属性名例如：提取a标签的href属性//div[@class='class_value']/a/@href<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第四章、模拟登录"><a href="#第四章、模拟登录" class="headerlink" title="第四章、模拟登录"></a>第四章、模拟登录</h1><h3 id="一、模拟登录简介"><a href="#一、模拟登录简介" class="headerlink" title="一、模拟登录简介"></a>一、模拟登录简介</h3><p>1、验证码识别：识别验证码图片中的数据，用于模拟登录操作<br>    （1）识别验证码的操作：人工识别/第三方自动识别<br>    （2）验证码：每次请求都会发生变化<br>2、模拟登录：<br>    爬取基于某些用户的用户信息<br>    登录流程：获取验证码 &gt; 点击登录后，会发起post请求 &gt; post请求中会携带登录信息<br>    (1). 编码流程：获取验证码 &gt; 发起post请求(处理相关参数)  &gt; 数据存储</p><h3 id="二、模拟登录的编码流程："><a href="#二、模拟登录的编码流程：" class="headerlink" title="二、模拟登录的编码流程："></a>二、模拟登录的编码流程：</h3><p>1、</p><p>需求：对人人网进行模拟登录</p><pre class="line-numbers language-none"><code class="language-none">1.获取验证码(1). 指定url(网址)(2). UA伪装，将爬虫的身份标识，伪装成浏览器的请求头(headers)的请求载体的身份标识，可以躲过UA检测。(4). 发起get请求，并返回response对象(5). 获取响应数据，会返回text格式的数据(6). 数据解析(BeautifulSoup/re/xpath),提取验证码图片(7). 使用打码平台，识别验证码图片，并返回验证码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、模拟登录的编码流程：<br>需求：爬取登录后的个人主页中显示的用户信息</p><pre class="line-numbers language-none"><code class="language-none">1.获取验证码指定url(网址)UA伪装，将爬虫的身份标识，伪装成浏览器的请求头(headers)的请求载体的身份标识，可以躲过UA检测。发起get请求，并返回一response对象获取响应数据，会返回text格式的数据数据解析(BeautifulSoup/re/xpath),提取验证码图片使用打码平台，识别验证码图片，并返回验证码2.模拟登录创建session对象使用session携带cookie进行发送post请求<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、cookie和session"><a href="#三、cookie和session" class="headerlink" title="三、cookie和session"></a>三、cookie和session</h3><p>1、http/https协议的特性：无状态<br>没有请求到对应页面的原因：<br>发起的第二次基于个人主页页面请求的时候，服务器不知道该请求是登录状态下的请求。</p><p>2、cookie： 用来让服务器端记录客户端的相关状态</p><pre class="line-numbers language-none"><code class="language-none">cookie操作：1）手动处理：通过抓包工具获取cookie值，并将该值封装进headers中。2）自动处理：session3）cookie值的来源：模拟登录post请求后，由服务器端创建。session会话对象：1）session对象的作用：--可以进行请求的发送。--如果请求过程中产生了cookie，则该cookie值会被自动储存在session对象中。2）创建一个session对象：session = requests.Session( )3）使用session对象进行模拟登录post请求的发送（cookie值就会被存储在session中）4）session对象对个人主页对应的get请求进行发送（携带了cookie）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第五章、代理IP"><a href="#第五章、代理IP" class="headerlink" title="第五章、代理IP"></a>第五章、代理IP</h1><h3 id="一、代理IP简介"><a href="#一、代理IP简介" class="headerlink" title="一、代理IP简介"></a>一、代理IP简介</h3><p>1、代理服务器:  网络信息中的一个中转站。</p><p>2、代理服务器的作用：<br>    –突破自身IP的访问限制<br>    –隐藏自身的IP，免受攻击</p><p>3、代理IP的类型:<br>    –http: 只能应用到http协议对应的url中<br>    –https: 只能应用到https协议对应的url中</p><p>4、代理IP的匿名度：<br>    –透明：服务器知道该次请求使用了代理，也知道请求对应的真实的IP<br>    –匿名：服务器知道使用了代理，不知道真实的IP<br>    –高匿：服务器不知道使用了代理，更不知到真实的IP</p><p>5、IP代理的相关网站<br>    –快代理<br>    –西祠代理<br>    –<a href="http://www.goubanjia.com/">www.goubanjia.com</a></p><h3 id="二、反爬机制：IP封禁"><a href="#二、反爬机制：IP封禁" class="headerlink" title="二、反爬机制：IP封禁"></a>二、反爬机制：IP封禁</h3><pre class="line-numbers language-none"><code class="language-none">proxies = {    'https': '49.70.32.63:9999'}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="第六章、协程-amp-ayncio-异步非阻塞"><a href="#第六章、协程-amp-ayncio-异步非阻塞" class="headerlink" title="第六章、协程&amp;ayncio(异步非阻塞)"></a>第六章、协程&amp;ayncio(异步非阻塞)</h1><h3 id="一、协程简介"><a href="#一、协程简介" class="headerlink" title="一、协程简介"></a>一、协程简介</h3><p>1、协程: 微线程，通过一个线程让代码之间相互切换的执行。<br>2、实现协程的方式：</p><pre class="line-numbers language-none"><code class="language-none">greenlet (早期模块)yield关键字asyncio装饰器async -await关键字（主流）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、协程的意义：<br>如果一个线程中遇到IO阻塞，线程会利用等待时间，去执行其他任务。类似于时间统筹规划。</p><h3 id="二、基于协程的异步编程"><a href="#二、基于协程的异步编程" class="headerlink" title="二、基于协程的异步编程"></a>二、基于协程的异步编程</h3><p>1、 事件循环(死循环)</p><pre><code>例: 任务列表 = [任务1，任务2.......]while True:    可执行的任务列表，已完成的任务列表 = 去任务列表中检查所有任务，将'可执行'和'已完成'的任务返回for 就绪任务 in 已准备就绪的任务列表：    执行已就绪的任务for 已完成的任务 in 已完成的任务列表：    在任务列表中移除已完成的任务如果任务列表中的任务全部完成，则终止循环</code></pre><p>2、 协程函数，定义函数时&gt;&gt;&gt; async def 函数名</p><pre class="line-numbers language-none"><code class="language-none">async def fun():    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、await<br>await + 可等待对象(协程对象，Task对象，Future &gt;&gt;&gt; IO等待)<br>await就是等待对象的值，得到值以后才会往下走。</p><p>4、协程对象，执行协程函数()，得到的协程对象,但函数内部的代码不会执行</p><pre class="line-numbers language-none"><code class="language-none">result = fun()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5、运行协程函数: 需要将协程对象交给事件循环处理</p><pre class="line-numbers language-none"><code class="language-none">asyncio.run(result)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6、task对象<br>task用于并发的调度协程，帮助我们将多个任务添加到事件循环中。</p><pre class="line-numbers language-none"><code class="language-none">tasks对象的创建：asyncio.create_task(协程对象)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7、Future对象<br>task继承Future，task对象内部await结果的处理基于Future对象来的。<br>是基于协程实现异步操作时用到的对象。</p><p>扩展：concurrent.futures.Future对象<br>是基于线程池/进程池实现异步操作时用到的对象</p><p>8、asyncio异步迭代器</p><p>9、 异步上下文管理器</p><p>10、 uvioop<br>uvioop是asyncio的事件循环的替代方案</p><pre class="line-numbers language-none"><code class="language-none">import asyncio, uvioopasyncio.set_event_loop_policy(uvloop.Eventlooppolicy())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第七章、异步爬虫"><a href="#第七章、异步爬虫" class="headerlink" title="第七章、异步爬虫"></a>第七章、异步爬虫</h1><p>一、</p><p>异步爬虫：爬虫并行的访问url，实现高效的数据爬取<br>1、异步爬虫的方式:</p><pre class="line-numbers language-none"><code class="language-none">--多线程，多进程：优点：可以为相关阻塞的操作，单独开启线程或进程，阻塞操作就可以异步执行。缺点：无法无限制的开启多线程或者多进程。--线程池，进程池：优点：可以降低系统对线程/进程创建和销毁的频率，从而降低系统的开销。缺点：池中的线程/进程的数量有上限。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、单线程 + 异步协程</p><pre class="line-numbers language-none"><code class="language-none">event_oop:事件循环，相当于一个无限循环， 我们可以把一些函数注册 到这个事件循环上，当满足某些条件的时候，函数就会被循环执行。coroutine:协程对象，我们可以将协程对象注册到事件循环中，它会被事件循环调用。我们可以使用async 关键字来定义一个方法，这个方法在调用时不会立即被执行，而是返回一个协程对象。task: 任务，它是对协程对象的进一步封装，包含了任务的各个状态。future: 代表将来执行或还没有执行的任务，实际上和task 没有本质区别。async: 定义一个协程。await: 用来挂起阻塞方法的执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、 多任务协程</p><p>使用aiohttp模块中基于ClientSession类的Session对象,进行网络请求的发送</p><p>1.创建协程函数</p><p>2.创建session对象</p><p>3.进行网络请求，并获取响应数据</p><pre><code>发起网络请求：get()/post()封装参数:headers,params/data,proxy='http//ip:port'使用await，对asyncio中的阻塞操作进行手动挂起    text()返回的是字符串形式的响应数据    read()返回的是二进制形式的响应数据    json()返回的是json对象    注意：获取响应数据之前一定要使用await进行手动挂起    在异步网页请求中，只要遇到要等待的代码就需要手动挂起</code></pre><p>4.创建任务列表</p><p>5.调用协程函数()，并返回一个的协程对象,但函数内部的代码不会执行</p><p>6.创建一个future对象</p><p>7.将任务对象添加到任务列表中</p><p>8.创建一个事件循环对象</p><p>9.将存放多个任务对象的任务列表封装到wait中，并注册到loop中，并启动loop</p><h1 id="第八章、selsnium模块"><a href="#第八章、selsnium模块" class="headerlink" title="第八章、selsnium模块"></a>第八章、selsnium模块</h1><h3 id="一、selenium简介"><a href="#一、selenium简介" class="headerlink" title="一、selenium简介"></a>一、selenium简介</h3><p>1、selenium模块的概念：<br>基于浏览器自动化的一个模块</p><p>2、selenium模块的作用：<br>能更便捷的获取网站中动态加载的数据，能更便捷的实现模拟登录</p><p>3、selenium模块的使用流程：</p><pre class="line-numbers language-none"><code class="language-none">实例化一浏览器对象编写基于浏览器自动化的操作代码发起请求：get(url)标签定位：find系列的方法标签交互：send_keys('xxx')执行js程序：excute_script('jsCode')前进：forward()后退：back()点击：click()关闭浏览器：close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、selenium基本操作"><a href="#二、selenium基本操作" class="headerlink" title="二、selenium基本操作"></a>二、selenium基本操作</h3><p>1、使用webdriver调用浏览器驱动器</p><pre class="line-numbers language-none"><code class="language-none">from selenium import webdriverdriver = webdriver.Firefox(executable_path=r'D:\pycharm\pythongeckodriver\geckodriver.exe')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、获取请求网页</p><pre class="line-numbers language-none"><code class="language-none">driver.get(url)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、返回网页加载出来的html</p><pre class="line-numbers language-none"><code class="language-none">html = driver.page_source<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、关闭浏览器</p><pre class="line-numbers language-none"><code class="language-none">driver.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5、设置隐式窗口</p><pre class="line-numbers language-none"><code class="language-none">from selenium import webdriverfrom selenium.webdriver.firefox.options import Options隐藏窗口Options = Options()Options.add_argument('--headless')使用webdriver调用浏览器，driver =webdriver.Firefox(options=Options, executable_path=r'D:\geckodriver.exe')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、selenium常用函数"><a href="#三、selenium常用函数" class="headerlink" title="三、selenium常用函数"></a>三、selenium常用函数</h3><p>1、定位元素</p><pre class="line-numbers language-none"><code class="language-none">1）根据class定位element = driver.find_element_by_class_name('要定位的标签')根据css定位element = driver.find_element_by_css_selector('要定位的标签')根据id定位element = driver.find_element_by_id('要定位的标签')根据链接的文本定位element = driver.find_element_by_link_text('要定位的标签')根据节点名定位element = driver.find_element_by_name('要定位的标签')根据根据链接的文本定位element = driver.find_element_by_partial_link_text('要定位的标签')根据tag定位element = driver.find_element_by_tag_name('要定位的标签')根据xpath定位element = driver.find_element_by_xpath('要定位的节点')2）将element改为elements会定位所有符合条件的元素，返回一个列表。例如: eb会返回一个WebElement对象element = driver.find_elements_by_class_name('要定位的标签')3）提取WebElement对象的信息获取属性：element.get_attribute()获取文本：element.text获取标签名：element.tag_name获取节点id：element.id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、鼠标动作</p><pre class="line-numbers language-none"><code class="language-none">from selenium.webdriver import ActionChains# 实例化一个动作链对象action = ActionChains(driver=driver)# 单击某个节点action.click(on_element=element1)# 单击某个节点，并按住不放action.click_and_hold(on_element=element1)# 右键单击某个节点action.context_click(on_element=element1)# 双击某个节点action.double_click(on_element=element1)# 将某个节点拖拽到另一个节点上action.drag_and_drop(source=element1, target=element2)# 按住某个节点，沿着X轴和Y轴方向拖拽特定距离action.drag_and_drop_by_offset(source=element1, xoffset=10, yoffset=20)# 按下特殊键：Ctrl、Alt、Shiftaction.key_down(value="Ctrl", element=element1)# 释放特殊键action.key_up()# 鼠标从当前位置移动到某个坐标action.move_by_offset(xoffset=10, yoffset=10)# 鼠标移动到某个元素action.move_to_element(to_element=element1)# 移动到距某个元素（左上角坐标）多少距离的位置action.move_to_element_with_offset(to_element=element1, xoffset=10, yoffset=10)# 执行链中的所有动作action.perform()# 在某个元素位置松开鼠标左键action.release(on_element=None)# 发送某个键到当前焦点的元素action.send_keys(keys_to_send=)# 发送某个键到指定元素action.send_keys_to_element(element=element1, keys_to_send=)# 重置操作action.reset_actions()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、弹窗</p><pre class="line-numbers language-none"><code class="language-none">实例化弹窗对象alert = driver.switch_to_alert()确定alert.accept()关闭对话框alert.dismiss()传入值alert.send_keys()获得对话框alert.text()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、页面的前进、后退、切换</p><pre class="line-numbers language-none"><code class="language-none">打开页面driver.get('https://www.baidu.com')# 页面回退driver.back()# 页面前进driver.forward()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、页面截图</p><pre class="line-numbers language-none"><code class="language-none">driver.save_screenshot("截图.png")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6、页面等待</p><pre class="line-numbers language-none"><code class="language-none">from selenium import webdriverfrom selenium.webdriver.support.ui import WebDriverWaitdriver=webdriver.Firefox(executable_path=r'D:\pycharm\pythongeckodriver\geckodriver.exe')element = WebDriverWait(driver,10)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、执行JS语句</p><pre class="line-numbers language-none"><code class="language-none">driver.execute_script(js语句)1）滚动到底部js = document.body.scrollTop=10000driver.execute_script(js)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8、Cookies操作</p><pre class="line-numbers language-none"><code class="language-none">获取Cookicesdriver.get_cookies()增加Cookicesdriver.add_cookice({"Cookie": "sid=***"})删除Cookicesdriver.delete_cookie()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9、selenium处理iframe + 动作链<br>1）如果定位的标签在iframe中，需要先切换浏览器的作用域：driver.switch_to.frame(‘iframe标签，id’)<br>2）动作链（拖动）：</p><pre class="line-numbers language-none"><code class="language-none">导入模块：from selenium.webdriver import ActionChains实例化一个动作链对象：action = ActionChains(driver)点击且长按指定的标签：action.click_and_hold('div')拖动标签：x是水平方向，y是竖直方向.move_by_offset(x,y)立即执行动作链：perform()释放动作链：action.release()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三、selenium的静态浏览器和规避检测</p><pre class="line-numbers language-none"><code class="language-none">2、实现隐藏窗口,(静态浏览器，无可视化界面)导入Options库from selenium.webdriver.firefox.options import Options实现规避检测from selenium.webdriver import ChromeOptions实例化Options,实现隐藏窗口,(静态浏览器，无可视化界面)firefox_options = Options()firefox_options.add_argument('--headless')firefox_options.add_argument('--disable-gpu')实例化ChromeOptions,实现规避检测option = ChromeOptions()option.add_experimental_option('excludeSwitches',['enable-automation'])实例化一个浏览器对象，用webdriver调用浏览器，并导入驱动程序路径,实现隐藏窗口,实现规避检测.driver = webdriver.Firefox(executable_path=r'D:\pycharm\python_geckodriver\geckodriver.exe',options=option,firefox_options=firefox_options)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第九章、抓包"><a href="#第九章、抓包" class="headerlink" title="第九章、抓包"></a>第九章、抓包</h1><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>1、抓包：通过浏览器抓取动态页面返回的数据包。</p><p>2、流程：</p><p>打开浏览器搜索信息，单击右键，选择检查，点击网络，在网络中找到传输到动态页面的数据包，复制URL、请求头数据、响应数据。对着URL进行网络请求，并将请求头数据添加到headers中，将响应数据添加到params/data中。</p><h3 id="二、获取简书动态页面的标题"><a href="#二、获取简书动态页面的标题" class="headerlink" title="二、获取简书动态页面的标题"></a>二、获取简书动态页面的标题</h3><p>第一步：先获取json数据包的URL，请求头数据，响应数据</p><p>第二步：导入库</p><pre class="line-numbers language-none"><code class="language-none">import requestsimport jsonimport re<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：URL、请求头、携带参数</p><p>url = “<a href="https://www.jianshu.com/c/V2CqjW?order_by=added_at&amp;page=1&quot;">https://www.jianshu.com/c/V2CqjW?order_by=added_at&amp;page=1"</a></p><pre class="line-numbers language-none"><code class="language-none">请求头：headers = {"Accept": "text/html, */*; q=0.01",    "Accept-Encoding": "gzip, deflate, br",    "Accept-Language": "zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6",    "Connection": "keep-alive",    "Cookie": "_ga=GA1.2.1967223958.1615384892; __yadk_uid=xzfkyB9xewiiKaJbp24ZqzC3VhN6UUhJ; efault_font=font2;Hm_lvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1622858975,1623502154,1624174201,1624620785; Hm_lpvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1624620797",    "Host": "www.jianshu.com",    "Referer": webpath1,    "sec-ch-ua": '" Not;A Brand";v="99", "Microsoft Edge";v="91", "Chromium";v="91"',    "sec-ch-ua-mobile": "?0",    "Sec-Fetch-Dest": "empty",    "Sec-Fetch-Mode": "cors",    "Sec-Fetch-Site": "same-origin",    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) 4.59",    "X-CSRF-Token": "LuQ/84M8/68ZYCRrUYU84GzDWMqk8YCgvq0w/9Res1iIbzFO8ObDQw==",    "X-INFINITESCROLL": "true",    "X-Requested-With": "XMLHttpRequest",}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">携带参数：params = {    "order_by": "added_at",    "page": 1,}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第四步、向URL发起网络请求，获取页面数据，将其转换成二进制形式，并忽略乱码。</p><pre class="line-numbers language-none"><code class="language-none">response = requests.get(url=url, headers=headers,params=json.dumps(params),).content.decode('utf-8','ignore')参数：将字典类型的参数转换成json格式：json.dumps(params)将响应数据转换成二进制形式：.content忽视二进制乱码：.decode('utf-8','ignore')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五步：使用正则，提取response对象中的标题</p><pre class="line-numbers language-none"><code class="language-none">title = re.findall('&lt;div class="content"&gt;[\s\S]+?&lt;a class="title" target="_blank" href=".*?"&gt;(.*?)&lt;/a&gt;[\s\S]+?&lt;p class="abstract"&gt;', response, re.S)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第六步：将数据存储</p><pre class="line-numbers language-none"><code class="language-none">with open(file_path, "a", encoding="utf8") as fp:fp.write(title + "/n")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python程序设计</title>
      <link href="posts/dd5b5f9c.html"/>
      <url>posts/dd5b5f9c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python学习"><a href="#Python学习" class="headerlink" title="Python学习"></a>Python学习</h1><p>​                                                –python编程从入门到实践笔记</p><h2 id="第一章、变量和基本数据类型"><a href="#第一章、变量和基本数据类型" class="headerlink" title="第一章、变量和基本数据类型"></a>第一章、变量和基本数据类型</h2><p>一、变量：变量是一种可以赋给值的标签。值在内存有一个存放空间，将变量贴在空间上，就能使变量指向那个值。</p><pre class="line-numbers language-none"><code class="language-none">整型变量：mes = 1浮点型变量：mes = 1.5字符串变量：mes = "你好，python"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、变量名的命名规则<br>变量名只能由字母，数字和下划线组成，且数字不能在首位。关键字不能作为变量名。</p><p>二、基本数据类型</p><pre class="line-numbers language-none"><code class="language-none">1）数值类型整型： int 1浮点型：float 1.5复数型：complex 布尔型：boolTrue/False2）序列类型字符串：string "你好，python"列表：list [1,2,3]元组：tuple (1,2,3)字典：dict {a:1}集合：set {1,2,3,4}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三、常量<br>常量名大写，常量的值始终不变</p><pre class="line-numbers language-none"><code class="language-none">MAX = 5000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>四、运算符<br>算数运算符：+  -  *  /  %  **  //<br>比较运算符：&lt;  &gt;  &lt;=  &gt;=  ==  !=<br>逻辑运算符：and  or  not<br>赋值运算符：=  +=  -=  *=  /=  %=  **=  //=<br>成员运算符：in  not in<br>身份运算符：is  not is</p><p>五、关键字</p><pre class="line-numbers language-none"><code class="language-none">False假None无True 真and 与or或not非as取别名assertbreak退出当前循环class创建类continue退出本次循环def创建函数del删除if如果elif在如果else否则while当循环for循环in判断一个变量是否在另一个变量里面is比较两个变量的内存地址tryexceptfinallypass占位符return将值返回raisefrom来自import导入模块global全局的，定义全局变量nonlocallambda匿名函数withyield将迭代的值返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、注释：<br>单行注释：//<br>多行注释：’’’ ‘’’ 或 “”” “”” 或 </p><p>8、强制类型转换<br>能强制类型转换  int和float   list,tuple和set  bool和int<br>int()</p><p>8、<br>python通过缩进和”:”冒号，区分代码之间的层级</p><h2 id="第二章、数据类型及其操作"><a href="#第二章、数据类型及其操作" class="headerlink" title="第二章、数据类型及其操作"></a>第二章、数据类型及其操作</h2><h3 id="一、字符串类型及其操作"><a href="#一、字符串类型及其操作" class="headerlink" title="一、字符串类型及其操作"></a>一、字符串类型及其操作</h3><p>1.字符串定义：字符串是字符组成的序列，由单引号/双引号/三引号括起来的。<br>2.转义字符”"，r让转义字符不生效<br>3.字符串的索引和切片,字符串通过下标索引和切片，下标从0开始，到序列的前一位。<br>4.索引</p><pre class="line-numbers language-none"><code class="language-none">正向索引"hello"[1]"e"逆向索引，可以使用-1索引最后一位元素"hello"[-1]"o"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.切片<br>第一种，切片</p><pre class="line-numbers language-none"><code class="language-none">// 截取下标0-2的字符串"hello"[0:2]结果："hel"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二种：步长切片</p><pre class="line-numbers language-none"><code class="language-none">// 截取下标0-5的字符串，每次个两位下标截取。"hello"[0:5:2]结果："hl"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6、字符串的格式化format()</p><pre class="line-numbers language-none"><code class="language-none">name=jka = f"hello {name}"b = "hello {}".format(0="tom")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7.字符串函数<br>修改字符串大小写<br>首字母大写：string.title()<br>全部字母大写：string.upper()<br>全部字母小写：string.lower()</p><p>删除字符串空白<br>删除开头空白：string.rstrip()<br>删除末尾空白：string.lstrip()<br>删除两端空白:string.strip()</p><p>8、join()<br>“”.join(序列)    将序列以” “连接，用于合并序列的元素。</p><p>9、split()<br>“”.split(“/“)    将序列以”"分割，用于将字符串拆分为序列。</p><p>center()：通过在两边添加填充字符（默认为空格）让字符串居中<br>good = “hello”<br>print(good.center(10, “*”))</p><p>find()<br>在字符串中查找子串。如果找到，就返回子串的第一个字符的索引，否则返回-1。<br>good = “hello world”<br>print(good.find(“hello”))</p><p>replace()<br>将指定子串都替换为另一个字符串，并返回替换后的结果</p><pre class="line-numbers language-none"><code class="language-none">good = "hello world".replace("hello", "***")print(good)*** world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二、数值类型及其操作"><a href="#二、数值类型及其操作" class="headerlink" title="二、数值类型及其操作"></a>二、数值类型及其操作</h3><p>整型和浮点型：加，减，乘，除，乘方</p><h3 id="三、列表类型及其操作"><a href="#三、列表类型及其操作" class="headerlink" title="三、列表类型及其操作"></a>三、列表类型及其操作</h3><p>1.列表的索引，列表通过下标索引</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]print(color[0])red<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>列表的切片</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]print(color[1:3])["blued", "green"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>遍历切片<br>data = [1,2,3,4,5,6,7,8,9]<br>for i in data[:7]:<br>    print(i)</p><p>复制列表<br>同时省略起始索引和终止索引：[ : ]</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]a_color = color[ : ]print(a_color)["red", "blued", "green", "black"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.列表的修改、添加、删除<br>(1).修改列表元素<br>直接索引，然后直接重新赋值</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]color[0] = "yellow"print(color)["yellow", "blued", "green", "black"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(2).添加列表元素<br>使用append()，在列表末尾添加元素：list.append(“volue”)</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]color.append("yellow")print(color)['red', 'blued', 'green', 'black', 'yellow']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用insert()，在列表中插入元素，需要指定新元素的索引和值：list.insert(0, “value”)</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]color.insert(0, "yellow")print(color)['yellow', 'red', 'blued', 'green', 'black']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(3).删除列表元素<br>使用del删除元素：del color[0]</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]del color[0]print(color)["blued", "green", "black"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用clear()清空列表</p><pre class="line-numbers language-none"><code class="language-none">color.clear()[]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用pop()删除元素<br>pop()可以弹出任何位置的元素，只需在圆括号中指定元素的索引</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]color = color.pop(0) print(color)"red"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用remove()，根据值删除删除元素</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]color.remvoe("red")print(color)["blued", "green", "black"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3.组织列表<br>(1).使用sort()对列表永久排序<br>按照字母永久顺序排序</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]color.sort()print(color)['black', 'blued', 'green', 'red']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用sort()对列表永久逆序排序</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]color.sort(reverse=True)print(color)['red', 'green', 'blued', 'black']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(2).使用sorted()函数对列表临时排序</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]print(sorted(color))['black', 'blued', 'green', 'red']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用sorted()函数对列表临时逆序排序</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]print(sorted(color,reverse=True))['red', 'green', 'blued', 'black']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(3).使用reverse()方法，反转列表元素的顺序</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]color.reverse()print(color)['black', 'green', 'blued', 'red']<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.使用len()函数，返回序列的长度</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]print(len(color))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4</p><p>5.使用for遍历列表</p><pre class="line-numbers language-none"><code class="language-none">color = ["red", "blued", "green", "black"]for i in color:print(i)redbluedgreenblack<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.使用range()函数，创建数集<br>(1).range()函数的基本使用<br>函数range()的三种使用方法，range(5)设定范围，range(1,5)设定区间，range(1,5,2)设定区间和步长</p><pre class="line-numbers language-none"><code class="language-none">for i in range(5):print(i)0 1 2 3 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2).使用range()，创建数字列表</p><pre class="line-numbers language-none"><code class="language-none">number_list = list(range(1,10))print(number_list)[1, 2, 3, 4, 5, 6, 7, 8, 9]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>7.使用列表函数，对数字列表进行统计</p><pre class="line-numbers language-none"><code class="language-none">data = [1,2,3,4,5,6,7,8,9]max_a = max(data)# 返回列表最大值min_b = min(data)# 返回列表最小值sum_c = sum(data)# 返回列表的和count_d = daat.count(1)# 返回列表元素出现的次数index_e = data.index(1)# 返回列表元素第一次出现的索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.列表解析</p><pre class="line-numbers language-none"><code class="language-none">squares = [i**2 for i in range(1,11)]print(squares)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="四、元组类型及其操作"><a href="#四、元组类型及其操作" class="headerlink" title="四、元组类型及其操作"></a>四、元组类型及其操作</h3><p>元组的值是不可修改的，但可以重新定义<br>定义元组：tuple = (1,2,3)<br>修改元组变量：<br>tuple = (1,2,3)<br>tuple = (4,5,6)</p><h3 id="五、字典类型及其操作"><a href="#五、字典类型及其操作" class="headerlink" title="五、字典类型及其操作"></a>五、字典类型及其操作</h3><p>字典由一对键值对组成，可以通过键来访问值<br>一、简单字典<br>定义字典：dict = {1:”green”, 2:”yellow”, 3:”red”}<br>访问字典的值：dict[1]<br>使用get()访问字典的值：第一个参数是键，第二个参数是当指定的键不存在时返回的值</p><p>dict = {1:”green”, 2:”yellow”, 3:”red”}<br>dict.get(“1”, “此键不存在”)</p><p>二、字典的键值对的添加、修改、删除<br>1.添加键值对，指定字典的名，键，值：dict[4] = “black”</p><p>dict = {1:”green”, 2:”yellow”, 3:”red”}<br>dict[4] = “black”<br>print(dict)<br>{1: ‘green’, 2: ‘yellow’, 3: ‘red’, 4: ‘black’}</p><p>2.修改键值对，指定字典的名，键，新值：dict[1] = “black”</p><p>dict = {1:”green”, 2:”yellow”, 3:”red”}<br>dict[1] = “black”<br>print(dict)<br>{1: ‘black’, 2: ‘yellow’, 3: ‘red’}</p><p>3.使用del，删除键值对</p><p>dict = {1:”green”, 2:”yellow”, 3:”red”}<br>del dict[1]<br>print(dict)<br>{2: ‘yellow’, 3: ‘red’}</p><p>四、遍历字典<br>(1).遍历所有的键值对</p><p>dict = {1:”green”, 2:”yellow”, 3:”red”}<br>for k, v in dict.items():<br>                 print(f”键={k} \n值={v}”)</p><p>(2).遍历字典中的所有键</p><p>dict = {1:”green”, 2:”yellow”, 3:”red”}<br>for k in dict.keys():<br>                 print(f”键={k}”)</p><p>(3).遍历字典中的所有值</p><p>dict = {1:”green”, 2:”yellow”, 3:”red”}<br>for v in dict.values():<br>              print(f”值={v}”)</p><p>五、字典的嵌套<br>1.字典列表：在列表中嵌套字典<br>list = [{1:”green”}, {2:”red”}, {3:”blue”}]</p><p>2.列表字典：在字典中嵌套列表<br>dict = {“colors”:[“red”, “green”, “blue”,], “letter”:[“a”, “b”, “c”]}</p><p>3.在字典中嵌套字典<br>dict = {“number”:{1:”one”, 2:”two”, 3:”three”}, “letter”:{“a”:”A”, “b”:”B”, “c”:”C”}}</p><h2 id="第三章、选择结构"><a href="#第三章、选择结构" class="headerlink" title="第三章、选择结构"></a>第三章、选择结构</h2><h4 id="一、条件测试"><a href="#一、条件测试" class="headerlink" title="一、条件测试"></a>一、条件测试</h4><p>if语句的核心是一个值为True或False的表达式，这种表达式称为条件测试。<br>1.使用==，测试是否相等</p><p>2.使用!=，测试是否不相等</p><p>3.使用比较运算符，进行数值的比较<br>&lt;  &gt;  &lt;=  &gt;=  ==  !=</p><p>4.使用and和or，进行检查多个条件</p><p>5.使用in，检查特定的值是否包含在列表中</p><p>6.使用not in，检查特定的值是否不包含在列表中</p><p>7.布尔表达式</p><h4 id="二、选择结构"><a href="#二、选择结构" class="headerlink" title="二、选择结构"></a>二、选择结构</h4><p>1、if语句</p><pre class="line-numbers language-none"><code class="language-none">//if语句：如果条件成立，就执行语句，条件不成立，就不执行语句age = int(input("请输入年龄："))if age &lt; 18:    print("未成年")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、if-else语句</p><pre class="line-numbers language-none"><code class="language-none">//if-else语句：如果条件成立，就执行语句1（print("未成年")），否则就执行语句（print("已成年")）age = int(input("请输入年龄："))if age &lt; 18:    print("未成年")else:    print("已成年")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、if-elif-else结构语句</p><pre class="line-numbers language-none"><code class="language-none">//if-elif-else：如果条件1成立就执行语句1，不成立就在判断条件2，成立就执行语句2，否则就执行语句3age = int(input("请输入年龄："))if age &lt; 18:    print("少年")elif age &gt;= 18 and age &lt; 65:    print("成年人")else:    print("老年人")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、循环结构"><a href="#三、循环结构" class="headerlink" title="三、循环结构"></a>三、循环结构</h4><p>1、while循环<br>一、简单while循环</p><pre class="line-numbers language-none"><code class="language-none">num = 0while num &lt; 10:print(num)结果：0,1,2,3,4,5,6,7,8,9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二、让用户选择退出</p><pre class="line-numbers language-none"><code class="language-none">//可以让程序死循环，设定一个退出值，用户输入退出值，则结束程序。age = 1while age != -1:    age = int(input("请输入年龄："))    if age &lt; 18:        print("少年")    elif age &gt;= 18 and age &lt; 65:        print("成年人")    else:        print("老年人")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三、标志<br>在要满足很多要求，才会继续运行程序时，可以设定一个变量，用于判断程序是否在运行。将所有测试条件放在变量中。</p><p>四、退出循环<br>1.退出当前循环：break<br>2.跳过本次循环：continue</p><p>五、使用while循环处理列表和字典<br>(1).删除列表里的特定元素<br>data = [“a”, “b”, “c”, “d”,”a”]<br>while “a” in data:<br>    data.remove(“a”)<br>print(data)</p><p>(2).使用用户的输入来填充字典<br>dic_data = {}<br>flog = True<br>while flog:<br>    name = input(“你的名字：”)<br>    answer = input(“你对阿富汉与叙利亚的第四次宗教与文化的战争冲突怎么看？\n”)</p><pre><code>dic_data[name] = answera = input("那你呢？(yes/no)\n")if a == "no":    flog = False</code></pre><p>for name, answer in dic_data.items():<br>    print(f”{name}: {answer}”)</p><h2 id="第四章、函数"><a href="#第四章、函数" class="headerlink" title="第四章、函数"></a>第四章、函数</h2><h4 id="一、基本函数"><a href="#一、基本函数" class="headerlink" title="一、基本函数"></a>一、基本函数</h4><p>1、简单函数</p><pre class="line-numbers language-none"><code class="language-none">// 使用关键字def定义函数，在main中进行调用。def hello():    print("你好")if __name__ == "__main__":    hello()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、设置函数的形参<br>(1)、给函数设定形参，调用函数的时候输入实参，传入参数的时候可以直接关联形参和实参。<br>(2)、在设定形参的时候可以设定必选参数和可选参数，可选参数要放在必选参数的后面。并且可以设置参数的默认值。</p><pre class="line-numbers language-none"><code class="language-none">例子：// 定义一个函数，设置形参，有必选形参和可选形参，必选形参默认值是python。def hello(name="python"，*age):    print(f"你好, {name}")if __name__ == "__main__":    hello(name="唐三")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、向函数传递列表<br>直接把列表当成值传递就行</p><pre class="line-numbers language-none"><code class="language-none">def hello(names,age=0):    for name in names:        print(f"你好, {name}")if __name__ == "__main__":    name = ["唐三", "萧炎", "林动", "冻千秋"]    hello(names=name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、传递任意数量的实参，在设定形参的时候，带上*。</p><pre class="line-numbers language-none"><code class="language-none">def hello(*names):    for name in names:        print(f"你好, {name}")if __name__ == "__main__":    hello("唐三", "萧炎", "林动", "冻千秋")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、设置函数的返回值<br>在函数里可以使用return返回一个值，可以在函数调用处使用变量接收这个值</p><pre class="line-numbers language-none"><code class="language-none">def hello(name):    good = f"你好, {name}"    print(good)，    return good<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、函数可以作为列表元素使用"><a href="#二、函数可以作为列表元素使用" class="headerlink" title="二、函数可以作为列表元素使用"></a>二、函数可以作为列表元素使用</h4><pre class="line-numbers language-none"><code class="language-none">// 定义三个函数，将函数名放入列表，列表索引加上()就能调用函数def func1():    print("盖亚！")def func2():    print("迪迦！")def func3():    print("艾斯！")list_ = [func1, func2, func3]// 函数名加上括号就是调用list_[0]()// 遍历执行函数for f in list_:    f()结果：盖亚！ 迪迦！ 艾斯！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、函数的嵌套-闭包"><a href="#三、函数的嵌套-闭包" class="headerlink" title="三、函数的嵌套(闭包)"></a>三、函数的嵌套(闭包)</h4><p>函数里面还可以创建函数，并还可以使用return将函数返回，实现了内部函数在外部的访问。闭包：保护变量不被其他变量侵害，保持一个变量常驻内存。</p><pre class="line-numbers language-none"><code class="language-none">def func():    name = "法外狂徒"    def funca():        return name    return funcar = func()print(r())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、函数可以作为参数进行传递"><a href="#四、函数可以作为参数进行传递" class="headerlink" title="四、函数可以作为参数进行传递"></a>四、函数可以作为参数进行传递</h4><pre class="line-numbers language-none"><code class="language-none">def funca():    print("灌汤包")def funcb():    print("叉烧包")def func(x,y):    x()    y()func(funca, funcb)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="五、将函数存储在模块"><a href="#五、将函数存储在模块" class="headerlink" title="五、将函数存储在模块"></a>五、将函数存储在模块</h4><p>将函数存储在独立的文件中，在使用import导入到主程序中<br>1.导入模块：import 模块名<br>2.导入特定函数(可以用逗号隔开，同时到导入多个特定函数)：from 模块名 import 函数名<br>3.使用as给函数取别名：from 模块名 import 函数名 as 新函数名<br>4.使用as给模块取别名：import 模块名 as 新模块<br>5.使用*导入模块中的所有函数：for 模块名 import *</p><h4 id="六、lambda函数：匿名函数"><a href="#六、lambda函数：匿名函数" class="headerlink" title="六、lambda函数：匿名函数"></a>六、lambda函数：匿名函数</h4><p>1、匿名函数  lambda表达式</p><pre class="line-numbers language-none"><code class="language-none">f = lambda x,y:x+yprint(f(1, 2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 2、lambda表达式的一个应用</p><pre class="line-numbers language-none"><code class="language-none"> // 三元表达式x, y = 2, 1r = x if x &gt; y else yprint(r)// 可以将三元表达式放入匿名函数中，突破匿名函数不能放代码块的限制f = lambda x,y:x if x &gt; y else yprint(f(1, 2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="七、python内置函数"><a href="#七、python内置函数" class="headerlink" title="七、python内置函数"></a>七、python内置函数</h4><p>关于基本数据类型的函数</p><pre class="line-numbers language-none"><code class="language-none">1、强制数据类型转换的函数int()将浮点数强制转换成整型float()将整型强制转换成浮点型bool()str()强制转换成字符串tuple()强制转换成元组set()强制转化成集合list()强制转换成列表 2、进制转换bin()将数据转换成二进制oct()将数据转换成八进制hex()将数据转换成十六进制3、数学运算sum()对可迭代对象求和max()返回可迭代对象最大值min(12,13)返回可迭代对象最小值pow()求次方round()四舍五入divmod()求商和余数 4、关于数据结构的函数len()返回序列长度all()查看序列中的真和假，andsorted()给序列临时排序，key:排序规则，reverse:正序/逆序filter()过滤zip()zip，它将两个序列“缝合”起来，并返回一个由元组组成的序列。返回值是一个适合迭代的对象，要查看其内容，可使用list将其转换为列表当序列的长度不同时，函数zip将在最短的序列用完后停止“缝合”。 5、序列reversed()将序列反转format()字符串格式化<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 关于迭代器和生成器的函数</p><pre class="line-numbers language-none"><code class="language-none">range()1、迭代数字的，能够生成数字序列iter()2、获取迭代器，迭代器一定可以迭代next()3、获取一个迭代内容，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 关于作用域的函数</p><pre class="line-numbers language-none"><code class="language-none">locals()1、查看当前位置的全部全局变量globals()2、字典的类型返回全部的全局变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 其他内置函数</p><pre class="line-numbers language-none"><code class="language-none"> 1、将内容打印到屏幕或文件，end:结束符，sep:分隔符，file:打印的文件地址print("hello","world", end="  ", sep="*") input()2、从键盘上输入，可以加一个提示信息eval()3、执行字符串类型的代码，并返回结果id()4、查看变量所指的内存地址dir()5、查看数据类型的操作open()6、打开文件hash()7、可以进行hash算法，返回一串数字。help()8、查看源码callable()9、查看是否可调用join()10、"".join(序列)将序列以" "连接，用于合并序列的元素。、split()11、"".split("/")将序列以"\"分割，用于将字符串拆分为序列。exit()：结束程序type()：查看变量的数据类型find()str.find("东京")检测字符串中是否包含子字符串，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果包含子字符串返回开始的索引值，否则返回-1。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五章、生成器、迭代器、装饰器"><a href="#第五章、生成器、迭代器、装饰器" class="headerlink" title="第五章、生成器、迭代器、装饰器"></a>第五章、生成器、迭代器、装饰器</h2><h4 id="第一部份、迭代器"><a href="#第一部份、迭代器" class="headerlink" title="第一部份、迭代器"></a>第一部份、迭代器</h4><p>dir()可以查看数据可以执行的操作</p><p>方法一、判断可迭代对象和迭代器</p><pre class="line-numbers language-none"><code class="language-none">print(dir(int)) 没有'__iter__'print(dir(bool)) 没有'__iter__'print(dir(str)) 有'__iter__'print(dir(list)) 有'__iter__'print(dir(dict)) 有'__iter__'print(dir(set)) 有'__iter__'print(dir(tuple)) 有'__iter__'得出，有__iter__就是可迭代对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>for进行遍历，先判断是否是迭代对象，在去拿迭代器，执行<strong>next</strong>()进行迭代。</p><p>方法二、判断可迭代对象和迭代器</p><pre class="line-numbers language-none"><code class="language-none">判断是否是可迭代的和迭代器：Iterable：可迭代类型的，Iterator：迭代器from collections.abc import Iterable,Iteratorlist_ = ["路飞","索隆","娜美",]print(isinstance(list_,Iterable)) # 判断list_是否是可迭代类型 Trueprint(isinstance(list_,Iterator)) # 判断list_是否是迭代器 False获取迭代器，迭代器一定可以迭代it = list_.__iter__()print(isinstance(it,Iterable)) # 判断list_是否是可迭代类型 Trueprint(isinstance(it,Iterator)) # 判断list_是否是迭代器 Truefor el in it:    print(el)结果："路飞" "索隆" "娜美"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二部分、生成器"><a href="#第二部分、生成器" class="headerlink" title="第二部分、生成器"></a>第二部分、生成器</h4><p>一、生成器：本质是迭代器，创建是生成器的方式：生成器函数、通过生成器表达式来获取生成器、类型转换。</p><p>函数中包含yield，此函数就是生成器函数。生成器函数运行后返回的是一个生成器，而不是运行函数。</p><pre class="line-numbers language-none"><code class="language-none">// 创建生成器函数，调用生成器函数，返回的是迭代器。def func():    print("第一步")    yield "返回1" # yield表示返回，不会终止函数    print("第二步")    yield "返回2"ret = func()print("返回值：",ret) # 返回值： &lt;generator object func at 0x0000027DEE7775F0&gt;print(ret.__next__())print(ret.__next__())print(ret.__next__())for i in ret.__next__():print(i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二、使用生成器生成数据</p><p>所有的生成器都可以直接使用for循环，所有的生成器都可以使用lis()来获取生成器内的所有数据。</p><pre class="line-numbers language-none"><code class="language-none">// 创建生成器函数，并循环使用yield返回数据，使用list()获取数据def buy():    for i in range(1000):        yield f"{i}战机"gen = buy()print(list(gen))[1战机 2战机 3战机 4战机 5战机.....]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三、生成器向下执行的两个方法：</p><p>1、<strong>next</strong>()，使生成器执行到下一个yield</p><p>2、send()给上一个yield位置传值，并使生成器向下执行</p><pre class="line-numbers language-none"><code class="language-none">def func():    print("喜羊羊")    a = yield "灰太狼"    print("a=",a)    b = yield "红太狼"    print("b=",b)    c = yield "小灰灰"    print("c=",c)gen = func()print(gen.__next__())print(gen.send("篮球"))print(gen.__next__())print(gen.send("足球"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第三部分、装饰器"><a href="#第三部分、装饰器" class="headerlink" title="第三部分、装饰器"></a>第三部分、装饰器</h4><p>一、装饰器<br>开闭原则，对功能的扩展开放、对代码的封闭修改、<br>在目标函数的前后添加代码，并且不改变原来的代码</p><pre class="line-numbers language-none"><code class="language-none">// 装饰器函数def wrapper(fn): # fn是目标函数    def inner(*args, **kwargs): # 为了目标函数的传参        print("打开外挂")        ret = fn(*args, **kwargs) # 调用目标函数，ret是目标函数的返回值        print("关闭外挂")        return ret # 八目标函数返回值返回，保证函数的正常结束    return inner// 使用装饰器函数装饰目标函数@wrapperdef play():    print("启动王者荣耀")// 调用目标函数play()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二、带参数的装饰器</p><pre class="line-numbers language-none"><code class="language-none">// 在装饰器函数上再套一层装饰器def wrapper_out(flag): # 装饰器本身的参数    def wrapper(fn): # fn是目标函数        def inner(*args, **kwargs): # 为了目标函数的传参            if flag:                print("打开百年孤独")                ret = fn(*args, **kwargs) # 调用目标函数，ret是目标函数的返回值                print("关上百年孤独")                return ret # 八目标函数返回值返回，保证函数的正常结束            else:                ret = fn(*args, **kwargs) # 调用目标函数，ret是目标函数的返回值                return ret # 八目标函数返回值返回，保证函数的正常结束        return inner    return wrapper// 使用装饰器函数装饰目标函数@wrapper_out(True)def read():    print("阅读百年孤独")read()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三、同一个函数被多个装饰器装饰</p><pre class="line-numbers language-none"><code class="language-none">装饰器会按就近原则，装饰目标函数def wrapper1(fn):    def inner(*args, **kwargs):        print("111")        ret = fn(*args, **kwargs)        print("one")        return ret    return innerdef wrapper2(fn):    def inner(*args, **kwargs):        print("222")        ret = fn(*args, **kwargs)        print("two")        return ret    return innerdef wrapper3(fn):    def inner(*args, **kwargs):        print("333")        ret = fn(*args, **kwargs)        print("three")        return ret    return inner// 装饰目标函数@wrapper3@wrapper2@wrapper1def eat():    print("干饭")eat()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第六章、面向对象"><a href="#第六章、面向对象" class="headerlink" title="第六章、面向对象"></a>第六章、面向对象</h2><h4 id="一、创建和使用类"><a href="#一、创建和使用类" class="headerlink" title="一、创建和使用类"></a>一、创建和使用类</h4><pre class="line-numbers language-none"><code class="language-none">1. 创建类、class Animal:   (1).构造方法：__init__()，初始化属性，并设置属性的默认值，当使用类来创建实例的时候，python会自动运行它。在创建实例时，通过self传递实参。    def __init__(self, name="", age=0):   (2).# 设置属性：属性是带self的变量，该变量可以在类的所有方法中使用，可以通过类的实例来访问该变量。self.name = nameself.age = age   (4).在类里定义方法    def sit(self):        print(f"{self.name}，坐下")    def roll(self):        print(f"{self.name},打滚")2.创建实例、访问属性、调用方法if __name__ == "__main__":    创建实例    my_Animal = Animal("来福", 12)    通过实例来访问属性：实例.属性    animal_name = my_Animal.name    print(dog.name)    print(my_Animal.dong)    通过实例，调用类里的方法：实例.方法    my_Animal.sit()    my_Animal.roll()    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、修改属性的值<br>(1).直接修改属性的值</p><p>通过实例访问属性，在重新赋值。</p><pre class="line-numbers language-none"><code class="language-none">例：my_dog.dong = "打滚"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>(2).通过方法修改属性的值</p><p>就是在类里面定义一个方法，调用方法，传入参数并修改属性</p><pre class="line-numbers language-none"><code class="language-none">class Dog:       --snip--       def modify(self, mil):self.dong = milif __name__ == "__main__":my_dog = Dog("来福", 12)my_dog.modify("打滚")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3).通过方法对属性的值进行递增</p><p>就是在类里面定义个方法，对属性进行修改</p><pre class="line-numbers language-none"><code class="language-none">class Dog:       --snip--       def modify(self, mil):self.age += milif __name__ == "__main__":my_dog = Dog("来福", 12)my_dog.modify(3)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、类的封装"><a href="#二、类的封装" class="headerlink" title="二、类的封装"></a>二、类的封装</h4><p>将固定的功能封装到一个代码块：对功能的封装、对属性的封装。</p><pre class="line-numbers language-none"><code class="language-none">class Animal():    # 1、对属性的封装def __init__(self,name):self.name = name    # 2、对方法和功能的封装    def run(self):        print("跑")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、类的继承"><a href="#二、类的继承" class="headerlink" title="二、类的继承"></a>二、类的继承</h4><p>继承：一个类继承另一个类的全部的属性和方法，同时还可以定义自己的属性和方法。（原有的类称为父类，新的类称为子类）</p><p>1、子类继承父类<br>子类自动继承父类的中除了私有内容外的其他所有内容，使用<strong>init</strong>()接收父类的全部参数，使用super()包含父类的全部属性。</p><pre class="line-numbers language-none"><code class="language-none"># 1）创建父类class Animal():    # 对属性的封装    def __init__(self,name):        self.name = name    # 对方法和功能的封装    def run(self):        print("跑")# 2）父类Animalclass Dog(Animal):    # 定义构造方法：继承父类的属性，并自己扩展属性    def __init__(self, name, age):        Animal.__init__(name)        self.age = age    # 扩展子类的方法    def eat(self):        print("干饭")# 3、创建对象，并调用父类的方法和自己的方法。dog = Dog()dog.run()dog.eat()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、覆盖：重写父类的方法<br>就直接在子类里在写过一遍该方法，运行时，程序会忽略父类里的方法，转而运行子类里的该方法。</p><pre class="line-numbers language-none"><code class="language-none">1、覆盖：子类中有与父类一样的方法，叫方法的覆盖class Animal():    def run(self):        print("跑")# 2、继承父类Animalclass Fish(Animal):    # 将父类的run方法重写    def run(self):        print("游泳")fish = Fish()fish.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、多继承：一个子类继承多个父类，当多个父类中有相同的方法，实行就近原则，先执行离当前类最近的父类。</p><pre class="line-numbers language-none"><code class="language-none">第一个动物类class Animal1():    def fly(self):        print("飞翔")第二个动物类class Animal2():    def run(self):        print("散步")第三个动物类class Animal3():    def run(self):        print("奔跑")创建子类继承三个动物类class Dragon(Animal1,Animal2,Animal3):    pass创建对象，并调用三个父类的方法dragon = Dragon()dragon.fly()dragon.run()dragon.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、类的多态"><a href="#四、类的多态" class="headerlink" title="四、类的多态"></a>四、类的多态</h4><p>同一个对象，有多种形态</p><p>1、将实例用作属性<br>就是将子类里多余的方法，打包成一个类，并且在子类的属性中将其实例化</p><pre class="line-numbers language-none"><code class="language-none">1、创一个父类class Dog:    # 定义一个__init__的方法，当使用类来创建实例的时候，python会自动运行它。在创建实例时，通过self传递实参。    def __init__(self, name):        # 设置属性：属性是带self的变量，该变量可以在类的所有方法中使用，可以通过类的实例来访问该变量。        self.name = name        self.dong = "蹲下"        # 定义名为sit的方法    def sit(self):        print(f"{self.name}，坐下")    def roll(self):        print(f"{self.name},打滚")2、创建类，接收子类里多余的方法class Age:    # 初始化属性    def __init__(self, age=12):        self.age = age    # 定义方法    def print_age(self):        print(f"该狗的年龄是：{self.age}")3、建立一个子类，继承父类Dog的全部属性和方法，定义子类时必须在圆括号内指定父类的名称class Dogson(Dog):使用__init__()，接受创建Dog实例所需的参数def __init__(self, name,):super()函数初始化父类属性，能在调动父类的__init__()方法时，能让子类的实例包含父类的的这个方法的所有  属性。super().__init__(name)4、将类实例化self.age = Age()def run(self):print("向前奔跑")5.创建实例if __name__ == "__main__":    # 创建实例    my_dog = Dogson("来福")    # 调用方法：    # 实例.方法    my_dog.run()    # 实例.属性.方法    my_dog.age.print_age()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="五、类的成员"><a href="#五、类的成员" class="headerlink" title="五、类的成员"></a>五、类的成员</h4><p>1、成员变量<br>实例变量    对象.属性=xxx<br>类变量      共享给该类所有的对象 类.变量</p><p>2、成员方法<br>实例方法    对象.方法</p><pre class="line-numbers language-none"><code class="language-none">def method(self):    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>类方法     类.方法</p><pre class="line-numbers language-none"><code class="language-none">@classmethoddef method(cls):    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>静态方法    类.方法</p><pre class="line-numbers language-none"><code class="language-none">@staticmethoddef method():    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、成员私有<br>以__开头的东西就是私有的，只能在自己的类里使用。</p><h4 id="六、导入类"><a href="#六、导入类" class="headerlink" title="六、导入类"></a>六、导入类</h4><p>1、导入单个类<br>from 模块名 import 类名</p><p>2、在一个文件中导入多个模块<br>from 模块名 import 类名, 类名, 类名</p><p>3、导入模块中的所有类<br>from 模块名 import *</p><p>4、在一个模块中导入另一个模块</p><h4 id="六、类与类的依赖关系"><a href="#六、类与类的依赖关系" class="headerlink" title="六、类与类的依赖关系"></a>六、类与类的依赖关系</h4><pre class="line-numbers language-none"><code class="language-none">1、创建person类class person():    def play(self,tools):        tools.run()        print("开始玩游戏")2、创建phone类class phone():    def run(self):        print("打开手机")3、实例化phone类ph = phone()4、实例化person类p = person()5、调用person中的play方法，并将ph对象传进去，这两个类就产生了关系，这种关系叫依赖关系。p.play(ph)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="七、类与类的关联关系"><a href="#七、类与类的关联关系" class="headerlink" title="七、类与类的关联关系"></a>七、类与类的关联关系</h4><p>一对一的关系<br>一对多的关系<br>多对多的关系</p><h4 id="八、self"><a href="#八、self" class="headerlink" title="八、self"></a>八、self</h4><p>self在访问方法的顺序，永远先找自己，在找父类。</p><h4 id="九、super"><a href="#九、super" class="headerlink" title="九、super"></a>九、super</h4><p>super() 函数是用于调用父类的一个方法。<br>super() 是用来解决多重继承问题的，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等种种问题。<br>MRO 就是类的方法解析顺序表, 其实也就是继承父类方法时的顺序表。</p><pre class="line-numbers language-none"><code class="language-none">父类class A:    # 定义方法：将x+1在输出    def add(self, x):        y = x + 1        print(y)子类class B(A):    # 重写方法，使用super调用父类的add()方法    def add(self, x):        super().add(x)        创建对象，并调用子类的add方法b = B()b.add(2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="十、类的特殊成员"><a href="#十、类的特殊成员" class="headerlink" title="十、类的特殊成员"></a>十、类的特殊成员</h4><h4 id="十一、区分函数与方法"><a href="#十一、区分函数与方法" class="headerlink" title="十一、区分函数与方法"></a>十一、区分函数与方法</h4><p>1、在类中<br>     类.方法    函数<br>     对象.方法   方法<br>2、类方法   都是方法<br>3、静态方法  都是函数</p><h4 id="十二、反射"><a href="#十二、反射" class="headerlink" title="十二、反射"></a>十二、反射</h4><pre class="line-numbers language-none"><code class="language-none">hasattr() 判断类中有没有这个方法getattr() 将类中的方法取出// 第一个类、bigcow模块def a():    print("大牛干饭")def b():    print("大牛喝水")def c():    print("大牛睡觉")// 第二个类import bigcowaction = input("请输入动作：")if hasattr(bigcow, action):    print("有这个动作")    xx = getattr(bigcow, action)    xx()else:    print("没有这个动作")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第七章、文件操作、异常处理、MD5"><a href="#第七章、文件操作、异常处理、MD5" class="headerlink" title="第七章、文件操作、异常处理、MD5"></a>第七章、文件操作、异常处理、MD5</h2><h4 id="一、文件操作"><a href="#一、文件操作" class="headerlink" title="一、文件操作"></a>一、文件操作</h4><p>文件打开模式：【w: writer】  【r: read】  【t: text】  【b: 字节】  【a:追加】  【+：读写】  【seek(): 】</p><p>#open()打开文件 – 并实例化 – fp:文件权柄， open:打开， ‘test.txt’:文件路径， ‘r’：read 读，readlines():读一行, write: 写</p><p>第一种文件操作</p><pre class="line-numbers language-none"><code class="language-none">#打开文件fp = open('test.txt', 'r')#write()写入文件 fp = open('test.txt', 'r')fp.write('sb,sb,sb,sb')#read()读取文件 -- read()读 读取writer中全部文件，并赋给变量contenfp = open('test.txt', 'r')conten = fp.read()#readline()读取fp中的一行文件，并赋给contenfp = open('test.txt', 'r')conten = fp.readline()#close()关闭文件fp.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种文件操作</p><pre class="line-numbers language-none"><code class="language-none">写入文件with open('test.txt', 'wb+') as fp:fp.write('aaa')fp.write(bytes('中国'.encoed('utf-8')))读取文件with open('test.txt', 'r') as fp:conten = fp.read()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、异常处理"><a href="#二、异常处理" class="headerlink" title="二、异常处理"></a>二、异常处理</h4><p>将代码放在try里，代码没错就正常运行，报错就查找与之匹配的except代码块运行</p><p>1、try-except<br>2、try-except-else<br>3、try-except-finally</p><p>1、简单错误处理</p><pre class="line-numbers language-none"><code class="language-none">try:    print(1/0)except:    print(错误)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、处理全部的错误：Exception</p><pre class="line-numbers language-none"><code class="language-none">try:    print(1/10)except Exception:    print("")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、专项错误专项处理，在加上一个所有错误兜底Exception。</p><pre class="line-numbers language-none"><code class="language-none">try:    print(1/0)except ZeroDivisionError:    print("除以0错误")except FileNotFoundError:    print("文件不存在错误")except Exception:    print("其他错误")else: # 当try中的代码没有错误，会自动执行else中的代码。    print("A")finally: # 执行收尾工作的，不管程序出没出错，都会执行finally。    print("")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、手动抛异常</p><pre class="line-numbers language-none"><code class="language-none">raise：异常类def add(a,b):    if type(a)==int and type(b)==int:        return a+b    else:        raise Exception("我没办法处理这样的运算")add(1,"a")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、自己定义异常类</p><pre class="line-numbers language-none"><code class="language-none">class culException(Exception):    passdef cul(a,b):        if type(a)==int and type(b)==int:            return a+b        else:            raise culException("我没办法处理这样的运算")cul(1,"a")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、查看堆栈错误信息</p><pre class="line-numbers language-none"><code class="language-none">查看堆栈信息的模块import tracebacktry:    print(1/0)except Exception:查看堆栈信息​    ret = traceback.format_exc()​    print(ret)​    print("错误")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、实战：除法计算器</p><pre class="line-numbers language-none"><code class="language-none">try:    print("按q，退出程序")    while True:        first_number = input("请输入除数：")        if first_number == "q":            break        second_number = input("请输入被除数：")        if second_number == "q":            break        answer = float(first_number) / float(second_number)        print(answer)except ZeroDivisionError:    print("除数不能是零")except ValueError:    print("不能输入字符")else:    print("错误")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、MD5"><a href="#三、MD5" class="headerlink" title="三、MD5"></a>三、MD5</h4><p>1、加密、不可逆</p><pre class="line-numbers language-none"><code class="language-none">import hashlib# MD5对象、并加盐obj = hashlib.md5(b"dhdh")# 将需要加密的内容进行编码，在交给md5，obj.update("闪耀的星空".encode("utf-8"))# 拿到密文 100ddd9ac065e9b205d61642e0930eeaprint(obj.hexdigest())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、md5应用</p><pre class="line-numbers language-none"><code class="language-none"># 加密函数def md5_(pwd):    # MD5对象、并加盐obj = hashlib.md5(b"dhdh")    # 将需要加密的内容进行编码，在交给md5，obj.update(pwd.en-code("utf-8"))    # 返回密文return obj.hexdigest()# ATMwhile True:    user_ = "8806"    pwd_ = "e26f4fb452c7020ec8cf82d8c4c862fe"    print("""    ——————————————————    欢迎使用ATM    ——————————————————    """)    user = input("请输入账号：")    pwd = input("请输入密码：")        if user==user_ and md5_(pwd)==pwd_:        print("登录成功")        break    else:        print("账号或密码错误")        break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="后续：python常用模块"><a href="#后续：python常用模块" class="headerlink" title="后续：python常用模块"></a>后续：python常用模块</h2><h4 id="一、random-随机数模块"><a href="#一、random-随机数模块" class="headerlink" title="一、random 随机数模块"></a>一、random 随机数模块</h4><pre class="line-numbers language-none"><code class="language-none">import random# 随机生成0-1的区间的随机小数print(random.random())# 随机生成一个整数区间的随机数print(random.randint(1,10000000))# 随机生成一个小数区间的随机数print(random.uniform(0,10))# 返回给定范围的随机数random.randrange()# 随机打乱序列的顺序_list = ["桔梗","杀生丸","犬夜叉","四魂玉"]random.shuffle(_list)print(_list)# 从列表中随机选择一个元素list_ = ["路飞","索隆","娜美","摩纳斯"]print(random.choice(list_))# 从列表中随机指定个数的元素list_ = ["灰原哀","柯南","毛利小五郎","小兰"]print(random.sample(list_,2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、time-时间模块"><a href="#二、time-时间模块" class="headerlink" title="二、time 时间模块"></a>二、time 时间模块</h4><pre class="line-numbers language-none"><code class="language-none">import time# 获取时间戳t = time.time()# 格式化时间：年月日：%Y-%m-%d 时分秒：%H:%M:%S 星期：%At = time.strftime("%Y-%m-%d %H:%M:%S %A")# 结构化时间 time.struct_time(tm_year=2021, tm_mon=7, tm_mday=6, tm_hour=15, tm_min=15, tm_sec=40, tm_wday=1, tm_yday=187, tm_isdst=0)t = time.localtime()print(t)print(t.tm_year)print(t.tm_mon)print(t.tm_mday)# 重点1：将时间戳转化成格式化时间# 先将时间戳转化成结构化时间，再将结构化时间转化成格式化时间，在指定显示格式。print(time.strftime("%Y-%m-%d %H:%M:%S",time.localtime(time.time())))# 重点2：将格式化时间转化成时间戳# 先获取格式化时间，再将格式化时间转换成，按指定格式转换成结构化时间，再将结构化时间转换成时间戳user_date = input("请输入一个时间，格式是：1970-01-01 08:00:00：")print(time.mktime(time.strptime(user_date,"%Y-%m-%d %H:%M:%S")))# 睡眠一秒time.sleep(1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、collections-统计模块"><a href="#三、collections-统计模块" class="headerlink" title="三、collections 统计模块"></a>三、collections 统计模块</h4><pre class="line-numbers language-none"><code class="language-none">import collections# 统计序列中元素出现的次数（字符串、列表、字典、元组）、字典的键是唯一的str_ = "山有木兮木有枝，心悦君兮君不知"s = collections.Counter(str_)print(s)# c = {"a":"A"}cc = collections.defaultdict(c)print(cc)# collections.OrderedDict()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、json模块"><a href="#四、json模块" class="headerlink" title="四、json模块"></a>四、json模块</h4><pre class="line-numbers language-none"><code class="language-none">import jsonjs = {"a":None,"b":True,"c":False,"d":"闪耀的星空"}# 1、将对象转换成jsonj = json.dumps(js,ensure_ascii=False)print(j)# 2、将json反序列化成对象s = json.loads(j)print(s)# 3、将对象序列化成json写入文件，一个json文件只能写入一个json，要写入多个json需要将json添加到列表中，在将列表写入文件with open("json文件.json","w", encoding="utf-8") as fp:    dict_ = {"a":None,"b":True,"c":False,"d":"闪耀的星空"}    json.dump(dict_,ensure_ascii=False,fp=fp)# 4、把文件中的json内容反序列化成对象with open("json文件.json","r", encoding="utf-8") as fp:    obj = json.load(fp=fp)    print(obj)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="五、os-系统模块"><a href="#五、os-系统模块" class="headerlink" title="五、os 系统模块"></a>五、os 系统模块</h4><pre class="line-numbers language-none"><code class="language-none"># 针对操作系统的模块import os# 创建多级文件夹os.makedirs("/一级/二级/三级")# 创建一个文件夹os.mkdir("一级")# 删除当前文件夹的所有空文件夹os.removedirs("\一级\二级\三级")# 删除指定文件夹os.rmdir("\一级")# 打印指定目录下的所有文件os.listdir("\\")# 删除一个文件，指定路径，文件名os.remove()# 重命名文件夹/文件os.rename()# 获取当文件/文件夹的信息os.stat("")# 获取当前工作目录的路径os.getcwd()# os.path 和路径相关的# 查看当前路径的绝对路径os.path.abspath("")# 查看文件或目录是否存在，存在返回True，不存在返回Falseprint(os.path.exists("D:\\soft"))# 在当前目录创建一个文件夹(CSDN)，如果当前目录有文件这个文件夹，就不创建，没有就进行创建。if not os.path.exists('CSDN'):    os.mkdir('D:\CSDN')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="六、re-正则模块"><a href="#六、re-正则模块" class="headerlink" title="六、re 正则模块"></a>六、re 正则模块</h4><pre class="line-numbers language-none"><code class="language-none">import restr_ = "sjdcfhksjhfrieuhkjdxn"r = re.findall("abc")# 字符组"[a-zA-Z0-9_]"# 元字符# .匹配任意字符# \s 匹配任意空白符# \w 匹配字母、数字、下划线# \d 匹配数字# \n 匹配一个换行符# \t 匹配一个制表符# \b 匹配一个单词结尾# ^ 匹配一个字符串的开始# &amp; 匹配一个字符串的结束# \ 转义字符# 量词# * 出现零次或任意多次# + 出现一次或任意多次# ? 出现零次或一次# {n} 出现n次# {n,} 出现n或任意多次# (n,m) 出现n到m次# 反义词# \W 匹配非字母、非数字、非下滑线# \D 匹配非数字# \S 匹配非空白符# a|b 匹配字符a或字符b# () 匹配括号内的表达式# [...] 匹配字符组中的字符# [^zzn] 匹配除了zzn以外的任意字符# 匹配手机号(13|14|15|17|18|[0-9]{9}# 匹配身份证号\d{17}[\d|x]|\d{15}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyMySQL</title>
      <link href="posts/594dd1f5.html"/>
      <url>posts/594dd1f5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="pyMySQL"><a href="#pyMySQL" class="headerlink" title="pyMySQL"></a>pyMySQL</h1><h1 id="第一章、创建数据库和表"><a href="#第一章、创建数据库和表" class="headerlink" title="第一章、创建数据库和表"></a>第一章、创建数据库和表</h1><p>1、连接数据库</p><pre class="line-numbers language-none"><code class="language-none">conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='zzn218', db='zzn', charset='utf8')# 输出&lt;pymysql.connections.Connection object at 0x000002A23020EFD0&gt;，说明连接成功。参数host主机名port端口user用户名passwd密码charset编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、创建游标，插入数据。要创建游标，通过游标对象就可对数据库进行增、删、查、改。</p><pre class="line-numbers language-none"><code class="language-none">cur = conn.cursor()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、创建数据库</p><pre class="line-numbers language-none"><code class="language-none">cur.execute("create database zzn character set utf8;") 参数：1）创建数据库，指定数据库名create database zzn2）指定编码character set utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、使用数据库</p><pre class="line-numbers language-none"><code class="language-none">cur.execute("use zzn;") <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、创建表</p><pre class="line-numbers language-none"><code class="language-none">cur.execute("create table blogs(id char(20), name char(20),) character set utf8;") 参数1）创建表create table 表名(字段名 字段类型，字段名 字段类型)create table 表名(id char(20), name char(20),)2）指定编码character set utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第二章、增加数据"><a href="#第二章、增加数据" class="headerlink" title="第二章、增加数据"></a>第二章、增加数据</h1><p>1、导入pymysql库</p><pre class="line-numbers language-none"><code class="language-none">import pymysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、创建数据库连接</p><pre class="line-numbers language-none"><code class="language-none">conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='zzn218', db='zzn', charset='utf8')print(conn)# 输出&lt;pymysql.connections.Connection object at 0x000002A23020EFD0&gt;，说明连接成功。参数host主机名port端口user用户名passwd密码db数据库名charset编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、创建游标，插入数据，要创建游标,通过游标对象就可对数据库进行增、删、查、改</p><pre class="line-numbers language-none"><code class="language-none">cur = conn.cursor()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、sql语句：对数据库进行增、删、查、改</p><pre class="line-numbers language-none"><code class="language-none">插入sql = "insert into stu(name, id) values ('张三','20209020201')"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、执行sql语句</p><pre class="line-numbers language-none"><code class="language-none">cur.execute(sql)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、向数据库中提交数据</p><pre class="line-numbers language-none"><code class="language-none">conn.commit()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、关闭数据库连接（释放资源）</p><pre class="line-numbers language-none"><code class="language-none">conn.close()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="第三章、删除数据"><a href="#第三章、删除数据" class="headerlink" title="第三章、删除数据"></a>第三章、删除数据</h1><p>1、导入pymysql库</p><pre class="line-numbers language-none"><code class="language-none">import pymysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、创建数据库连接</p><pre class="line-numbers language-none"><code class="language-none">conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='zzn218', db='zzn', charset='utf8')print(conn)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、创建游标，插入数据，要创建游标,通过游标对象就可对数据库进行增、删、查、改</p><pre class="line-numbers language-none"><code class="language-none">cur = conn.cursor()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、sql语句：对数据库进行增、删、查、改</p><pre class="line-numbers language-none"><code class="language-none">删除sql = "delete from zzn where id=202091"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5、执行sql语句</p><pre class="line-numbers language-none"><code class="language-none">cur.execute(sql)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>6、向数据库中提交数据</p><pre class="line-numbers language-none"><code class="language-none">conn.commit()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7、关闭数据库连接（释放资源）</p><pre class="line-numbers language-none"><code class="language-none">conn.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="第四章、修改数据"><a href="#第四章、修改数据" class="headerlink" title="第四章、修改数据"></a>第四章、修改数据</h1><p>1、导入pymysql库</p><pre class="line-numbers language-none"><code class="language-none">import pymysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、创建数据库连接</p><pre class="line-numbers language-none"><code class="language-none">conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='zzn218', db='zzn', charset='utf8')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、创建游标，插入数据，要创建游标,通过游标对象就可对数据库进行增、删、查、改</p><pre class="line-numbers language-none"><code class="language-none">cur = conn.cursor()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、sql语句：对数据库进行增、删、查、改</p><pre class="line-numbers language-none"><code class="language-none">修改sql = "update zzn set name="'张三'" where id=20201"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5、执行sql语句</p><pre class="line-numbers language-none"><code class="language-none">cur.execute(sql)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 6、向数据库中提交数据</p><pre class="line-numbers language-none"><code class="language-none">conn.commit()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>7、关闭数据库连接（释放资源）</p><pre class="line-numbers language-none"><code class="language-none">conn.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="第五章、查询数据"><a href="#第五章、查询数据" class="headerlink" title="第五章、查询数据"></a>第五章、查询数据</h1><p>1、导入pymysql库</p><pre class="line-numbers language-none"><code class="language-none">import pymysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>1、创建数据库连接</p><pre class="line-numbers language-none"><code class="language-none">conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='zzn218', db='zzn', charset='utf8')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、创建游标，插入数据，要创建游标,通过游标对象就可对数据库进行增、删、查、改</p><pre class="line-numbers language-none"><code class="language-none">cur = conn.cursor()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、sql语句：对数据库进行增、删、查、改</p><pre class="line-numbers language-none"><code class="language-none">查询语句# sql = 'select * from stu;'sql = "select * from stu where id='1';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、执行sql语句</p><pre class="line-numbers language-none"><code class="language-none">cur.execute(sql)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5、查询显示所有的记录</p><pre class="line-numbers language-none"><code class="language-none">data = cur.fetchall()print(data)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6、关闭数据库连接（释放资源）</p><pre class="line-numbers language-none"><code class="language-none">conn.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="第六章、例子"><a href="#第六章、例子" class="headerlink" title="第六章、例子"></a>第六章、例子</h1><pre class="line-numbers language-none"><code class="language-none">导入pymysql库import pymysql# 1、创建数据库连接conn = pymysql.connect(host='127.0.0.1', port=3306, user='root', passwd='zzn218', db='zzn', charset='utf8')# 2、创建游标，插入数据，要创建游标,通过游标对象就可对数据库进行增、删、查、改cur = conn.cursor()# 3、sql语句：对数据库进行增、删、查、改# 增加数据函数def add_data():sql = input("请输入sql语句：")    # sql = "insert into stu(name, id) values ('张三','20209020201')"    # 4、执行sql语句    cur.execute(sql)    # 5、向数据库中提交数据    conn.commit()# 查询记录，根据id查询信息def find_data():id = input("请输入查询id：")    # 查询语句    sql = "select * from stu where id='"+id+"'"    # 4、执行sql语句    cur.execute(sql)    # 5、查询显示所有的记录    data = cur.fetchall()    if(len(data)&gt;0):        print(data)    else:        print("无！")# 修改记录def revise_data():    id = input("修改记录的id")    information = input("修改的信息")    now_information = input("新信息")    sql = f"update zzn set {information}={now_information} where id={id}"    cur.execute(sql)conn.commit()# 删除记录def delete_data():    id = input("请输入id：")    sql = f"delete from zzn where id={id}"    cur.execute(sql)    conn.commit()# 6、关闭数据库连接（释放资源）    def closs_db():    conn.close()def service():    print("欢迎使用数据库管理系统 1.增加记录 2.查询记录 3.修改记录 4.删除记录 0.退出系统")    while True:        order = input("请输入服务序号：")        if order == "1":            add_data()            closs_db()        elif order == "2":            find_data()            closs_db()        elif order == "3":            revise_data()            closs_db()        elif order == "4":            delete_data()            closs_db()        elif order == "0":            exit()        else:            print("输入错误")调用service()函数service()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> pyMySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA程序设计</title>
      <link href="posts/2432baef.html"/>
      <url>posts/2432baef.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>序：java环境的配置</p><p>类是对象集合，对象是现实事物的映射<br>对象的特点是属性（变量）<br>对象的行为是方法（函数）</p><h1 id="第一章、java基础知识"><a href="#第一章、java基础知识" class="headerlink" title="第一章、java基础知识"></a>第一章、java基础知识</h1><h3 id="一、Java主类结构"><a href="#一、Java主类结构" class="headerlink" title="一、Java主类结构"></a>一、Java主类结构</h3><pre class="line-numbers language-none"><code class="language-none">public class Hello {    public static void main(String[] args){        System.out.println("Hello Java");    }}第一行，创建一个hello的类，其访问权限为public，public：权限修饰符，允许访问所有的类和包第二行，创建一个主方法，public：权限修饰符，static：静态修饰符，修饰成员方法和成员变量。void：返回值修饰符，main()：主方法，String[] args：是一个字符串类型的数组，主方法里的参数。第三行，输出Hello Java，输出方法：System.out.println("");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h3><p>1、数值类型：<br>    整数类型：bety(字节型)、short(短整型)、int(整型)、long(长整型)<br>    浮点类型：float(单精度浮点型)、double(双精度浮点型)</p><p>2、字符型：char</p><p>3、布尔型：ture(真)，flase(假)</p><p>4、字符串型：String</p><p>5、类：class</p><p>6、数组：</p><p>7、接口：interface</p><p>8、枚举：enum</p><p>——————————————————————————————————————————————————</p><h3 id="三、标识符与关键字"><a href="#三、标识符与关键字" class="headerlink" title="三、标识符与关键字"></a>三、标识符与关键字</h3><p>1、转义字符：\n(换行)</p><p>2、标识符<br>标识符就是一个名字，可以用来标识类名、变量名、方法名、数组名、文件名<br>标识符的定义规则：只能由字母、数字、下划线_、美元符号$组成，且数字不能在首位。字母区分大小写。关键字不能做标识符。</p><p>3、关键字</p><pre class="line-numbers language-none"><code class="language-none">import表明要访问指定的类或包package包class类public一种访问控制方式：共用模式private一种访问控制方式：私用模式protected一种访问控制方式：保护模式static表明具有静态属性void声明当前成员方法没有返回值new用来创建新实例对象byte基本数据类型之一，字节类型short基本数据类型之一,短整数类型int基本数据类型之一，整数类型long基本数据类型之一，长整数类型float基本数据类型之一，单精度浮点数类型double基本数据类型之一，双精度浮点数类型char基本数据类型之一，字符类型boolean基本数据类型之一，布尔类型null 零true真false假final用来定义常量和说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变const保留关键字，没有具体含义if条件语句的引导词else用在条件语句中，表明当条件不成立时的分支switch分支语句结构的引导词case用在switch语句之中，表示其中的一个分支default默认，例如，用在switch语句中，表明一个默认的分支do用在do-while循环结构中while用在循环结构中 for一种循环结构的引导词break提前跳出一个块continue回到一个块的开始处goto保留关键字，没有具体含义return从成员方法中返回数据abstract表明类或者成员方法具有抽象属性extends表明一个类型是另一个类型的子类型，这里常见的类型有类和接口implements表明一个类实现了给定的接口interface接口native用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的strictfp用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范synchronized表明一段代码需要同步执行transient声明不用序列化的成员域volatile表明两个或者多个变量必须同步地发生变化instanceof用来测试一个对象是否是指定类型的实例对象super表明当前对象的父类型的引用或者父类型的构造方法this指向当前实例对象的引用try尝试一个可能抛出异常的程序块catch用在异常处理中，用来捕捉异常throw抛出一个异常throws声明在当前定义的成员方法中所有需要抛出的异常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>————————————————————————————————————————————————</p><h3 id="四、常量与变量"><a href="#四、常量与变量" class="headerlink" title="四、常量与变量"></a>四、常量与变量</h3><p>1、变量<br>变量名是是标识符，每次声明变量编译器会根据数据类型给变量分配内存。</p><p>变量的声明与初始化，就是定义并第一次给变量赋值<br>语法：</p><pre class="line-numbers language-none"><code class="language-none">数据类型 变量名 = 值;例：float a = 10f;# 浮点型数据赋值，一般值后面要带f或d。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、常量：不能被改变量，常量名一般大写</p><p>常量的声明与初始化<br>语法：</p><pre class="line-numbers language-none"><code class="language-none">final 数据类型 常量名 = 值;例：final double PI = 3.1415926;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、变量的作用域<br>变量的作用域是指变量的生存周期，出了该区域变量将不存在。</p><p>(1)、成员变量<br>成员变量在整个类中有效，成员变量分为静态变量和实例变量<br>例:</p><pre class="line-numbers language-none"><code class="language-none">class var{int x = 10;static int y = 20;}# x是实例变量，y是类变量(静态变量)，静态变量的有效范围可以跨类，在其他类里可以通过"类名.静态变量"调用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)、局部变量<br>定义在{}块里的变量，只在块里有效。</p><p>当成员变量与局部变量重名，则成员变量将被隐藏。<br>————————————————————————————————————————————————</p><h3 id="五、运算符"><a href="#五、运算符" class="headerlink" title="五、运算符"></a>五、运算符</h3><p>自增自减运算符：++  –</p><p>算术运算符：+  -  *  /  % </p><p>关系运算符：==  !=  &gt;  &gt;=  &lt;  &lt;=</p><p>逻辑运算符：&amp;&amp;  ||  ! </p><p>位运算符：&amp;  |  ~  ^  &gt;&gt;  &lt;&lt;  &gt;&gt;&gt;</p><p>赋值运算符：=  +=  -=  *=  /=  %=  </p><p>条件运算符：？：</p><p>逗号运算符：，</p><p>()：定义函数时容纳参数，在控制语句或强制类型转换的表达式中表示执行或计算的优先权。</p><p> []：用来进行数组声明</p><p> {}：定义块、类、方法及局部范围，也可以用来初始化数组的值。<br>————————————————————————————————————————————————</p><h3 id="六、数据类型转换"><a href="#六、数据类型转换" class="headerlink" title="六、数据类型转换"></a>六、数据类型转换</h3><p>1、隐式类型转换<br>低级类型会自动向高级类型转换<br>bety &gt; short &gt;int &gt;long &gt;float &gt; double</p><p>2、强制类型转换<br>高级类型向低级类型转换，会出现数据丢失。<br>语法：(数据类型)值;<br>————————————————————————————————————————</p><h3 id="七、编码规范"><a href="#七、编码规范" class="headerlink" title="七、编码规范"></a>七、编码规范</h3><p>1、代码注释<br>单行注释：//<br>多行注释：/* */<br>文本注释：/** */</p><p>2、每条语句要独占一行，一条语句结束要以分号结尾。</p><p>3、区分大小写，符号是英文的，类名首字母大写，方法名首字母写，其余大写。</p><p>4、代码中的空格与换行，对运行没有影响。</p><h1 id="第二章、流程控制"><a href="#第二章、流程控制" class="headerlink" title="第二章、流程控制"></a>第二章、流程控制</h1><h3 id="一、选择结构语句"><a href="#一、选择结构语句" class="headerlink" title="一、选择结构语句"></a>一、选择结构语句</h3><p>1、if语句<br>使用if语句，当if的条件成立，则执行其后语句；不成立，则不执行。条件一定是布尔表达式，表达式的结果一定是true或false。</p><pre class="line-numbers language-none"><code class="language-none">语法：if(条件){语句；}例子：int a=10,b=20;if(a&lt;b){System.out.println("Hello Java");}结果：Hello Java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、if-else语句<br>使用if-else语句，当if的条件成立，则执行其后语句；不成立，则执行else的语句。条件一定是布尔表达式，表达式的结果一定是true或false</p><pre class="line-numbers language-none"><code class="language-none">语法：if(条件){语句1; }else{语句2; }例子;int a=10,b=20;if(a&lt;b){System.out.println("a&lt;b");}else{System.out.println("a&gt;b");} 结果：a&lt;b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、if-else if-else语句<br>使用if-else if-else语句，当if的条件成立，则执行其后语句；不成立，则在判断else if的条件，成立就执行语句，不成立就执行else的语句。条件一定是布尔表达式，表达式的结果一定是true或false</p><pre class="line-numbers language-none"><code class="language-none">语法：if(条件){语句1; }else if{语句2; }else{语句3; }例子;int a=10;if(a==0){System.out.println("a是零");}else if(a&gt;0){System.out.println("a大于零");}else{System.out.println("a小于零");}结果：a大于零<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、条件运算符：？：<br>当条件为真把语句1赋给变量，条件为假把语句2赋给变量。</p><pre class="line-numbers language-none"><code class="language-none">语法：变量 = 条件？语句1：语句2；例子int a, b=10, c=20;a = 10&lt;20?b:c;结果：a等于10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、switch-case-default多分支语句<br>switch语句中的表达式的值必须为整数型、字符型、字符串型。switch语句会判断表达式的值是否与case后面的值相同，相同则执行case后面的语句，直到遇到break或花括号}，全部不相同则执行default语句。</p><pre class="line-numbers language-none"><code class="language-none">语法：switch(表达式){  case 1: {语句1; } break;  case 2: {语句2; } break;  case 3: {语句3; } break;  case 4: {语句4; } break;  case 5: {语句5; } break;  default: {语句; }}例子：int a=1;switch (a){case 1: {System.out.println("A");} break;case 2: {System.out.println("B");} break;case 3: {System.out.println("C");} break;case 4: {System.out.println("E");} break;case 5: {System.out.println("F");} break;default: {System.out.println("输入错误");}}结果：A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、循环结构语句"><a href="#二、循环结构语句" class="headerlink" title="二、循环结构语句"></a>二、循环结构语句</h3><p>1、while循环语句<br>使用while语句，当条件成立，语句开始循环，直到条件不成立，结束语句循环。</p><pre class="line-numbers language-none"><code class="language-none">语法：while(条件表达式){语句;}例子：int a=0;while (a&lt;10){System.out.println(a);a++;}结果：0，1，2，3，4，5，6，7，8，9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、do-while语句<br>使用do-while语句，会先执行一遍语句，在判断条件是否成立，成立，则继续执行，不成立，则结束循环。</p><pre class="line-numbers language-none"><code class="language-none">语法：do{    语句;}while(条件表达式);例子;int a=0;do{System.out.println(a);a++;}while(a&lt;10);结果：0 1 2 3 4 5 6 7 8 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、for语句<br>使用for语句，当循环条件成立，语句开始循环，直到条件不成立，结束语句循环。<br>表达式1是负责变量的初始化，表达式2是循环条件，表达式3是循环控制条件。</p><pre class="line-numbers language-none"><code class="language-none">语法：for(表达式1；表达式2；表达式3){语句；}例子：int a;for(a=0;a&lt;10;a++){System.out.println(a);}结果：0 1 2 3 4 5 6 7 8 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、for-each语句<br>主要用来遍历数组</p><pre class="line-numbers language-none"><code class="language-none">语法：for(元素变量：遍历对象){     引用元素变量的语句;}例子：定义一个数组，在for语句里定义一个元素变量和放入一个数组，然后就遍历输入数组里的元素。int rank[] = {0,1,2,3,4,5,6,7,8,9};for(int a: rank){System.out.println(a);}结果：0，1，2，3，4，5，6，7，8，9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、跳转语句<br>（1）break：跳出当前循环体。</p><pre class="line-numbers language-none"><code class="language-none">int a=0;while (a&lt;10){System.out.println(a);if (a==5) {break;}a++;}结果：0 1 2 3 4 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）continue：跳过当前循环</p><pre class="line-numbers language-none"><code class="language-none">int a=0;while (a&lt;10){a++;if (a==5) continue;System.out.println(a);}结果：0 1 2 3 4 6 7 8 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第二章、数组"><a href="#第二章、数组" class="headerlink" title="第二章、数组"></a>第二章、数组</h1><h3 id="一、一维数组"><a href="#一、一维数组" class="headerlink" title="一、一维数组"></a>一、一维数组</h3><p>1、数组的静态定义，定义一个长度为5的整型数组，并初始化</p><pre class="line-numbers language-none"><code class="language-none">1）创建数组并初始化int[] number = {1,2,3,4,5,};2）数组访问，根据下标引用数组：数组名[3];number[0];3）输出数组的元素for (int x:number) {System.out.println(x);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、数组的动态定义，定义一个长度为5的整型数组</p><pre class="line-numbers language-none"><code class="language-none">声明一个长度为5的整型数组int[] number2 = new int[5];给数组元素赋值number2[0] = 10;number2[1] = 20;number2[2] = 30;number2[3] = 40;number2[4] = 50;引用数组number2[0];输出数组的元素for (int x:number2){    System.out.println(x);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、其他类型的数组的定义</p><pre class="line-numbers language-none"><code class="language-none">String[] number3 = new String[5];float[] number4 = new float[5];double[] number5 = new double[5];char[] number6 = new char[5];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、查看数组的长度 length</p><pre class="line-numbers language-none"><code class="language-none"> 查看数组长度：number2.lengthSystem.out.println("number2数组的长度是：" + number2.length);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、二维数组"><a href="#二、二维数组" class="headerlink" title="二、二维数组"></a>二、二维数组</h3><p>1、静态二维数组的定义和初始化</p><pre class="line-numbers language-none"><code class="language-none">int[][] number = {{1,2,3}, {4,5,6}, {7,8,9}};访问数组number[0][0];输出二维数组for (int i=0;i&lt;3;i++){    for (int j=0; j&lt;3; j++){        System.out.println(number[i][j]);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、动态二维数组的定义</p><pre class="line-numbers language-none"><code class="language-none">int[][] number1 = new int[3][3];动态二维数组的赋值number1[0][0] = 10;number1[0][1] = 20;number1[0][2] = 30;number1[1][0] = 40;number1[1][1] = 50;number1[1][2] = 60;number1[2][0] = 70;number1[2][1] = 80;number1[2][2] = 90;访问数组number1[0][0];输出二维数组for (int i=0;i&lt;3;i++){    for (int j=0; j&lt;3; j++){        System.out.println(number1[i][j]);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、数组排序"><a href="#三、数组排序" class="headerlink" title="三、数组排序"></a>三、数组排序</h3><p> 1、第一种排序算法：选择排序</p><pre class="line-numbers language-none"><code class="language-none">int[] number1 = {1,10,2,9,3,8,4,7,5,6};for (int j=0;j&lt;number1.length-1;j++){int min = j;    for (int i=j+1; i&lt;number1.length;i++){        if (number1[i] &lt; number1[min]){            min = i;       }    }          int temp = number1[j];       number1[j] = number1[min];       number1[min] = temp;}输出数组for(int x: number1){    System.out.println(x);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、第二种排序算法：冒泡排序</p><pre class="line-numbers language-none"><code class="language-none">int[] number2 = {1,10,2,9,3,8,4,7,5,6};int t;for(int i=0; i&lt;number2.length; i++){for (int j=i+1; j&lt;number2.length; j++){        if(number2[i] &gt; number2[j]){            t = number2[i];            number2[i] = number2[j];            number2[j] = t;        }    }}输出for(int x: number2){    System.out.println(x);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、第三种排序算法：插入排序</p><pre class="line-numbers language-none"><code class="language-none">int[] number3 = {1,10,2,9,3,8,4,7,5,6};for (int i=1; i&lt;number3.length; i++){int temp = number3[i];    for (int j=i-1; j&gt;=0; j--){        if (number3[j]&gt;temp){            number3[j+1] = number3[j];            if(j==0){number3[0]=temp;}        }else{            number3[j+1] = temp;break;       }    }}输出for(int x: number3){    System.out.println(x);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、对象数组"><a href="#四、对象数组" class="headerlink" title="四、对象数组"></a>四、对象数组</h3><p>1、创建静态对象数组，并初始化</p><pre class="line-numbers language-none"><code class="language-none">要先创建BankAccount对象// 静态初始化对象数组BankAccount对象[] accounts = {    new BankAccount("张三",21),    new BankAccount("李四",22),    new BankAccount("王五",20),    new BankAccount("马六",19),    new BankAccount("孙七",18),};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、创建动态对象数组，并初始化</p><pre class="line-numbers language-none"><code class="language-none">要先创建BankAccount对象// 动态创建数组    BankAccount[] accounts1 = new BankAccount[5];    // 初始化数组    accounts1[0] = new BankAccount("张三",21);    accounts1[1] = new BankAccount("张三",21);    accounts1[2] = new BankAccount("张三",21);    accounts1[3] = new BankAccount("张三",21);    accounts1[4] = new BankAccount("张三",21);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第三章、字符串"><a href="#第三章、字符串" class="headerlink" title="第三章、字符串"></a>第三章、字符串</h1><p>String：字符串是由双引号包裹的一连串字符</p><h3 id="一、String类"><a href="#一、String类" class="headerlink" title="一、String类"></a>一、String类</h3><p>1、字符串变量的定义和初始化</p><pre class="line-numbers language-none"><code class="language-none">String a = new String("hello");String a = "hello";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、创建字符串对象</p><p>第1种、直接创建</p><pre class="line-numbers language-none"><code class="language-none">String 字符串名 = "字符串";String str = "Hello world!";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第2种、使用new创建</p><p>(1)、String(String original)<br>用一个字符串创建一个String对象</p><pre class="line-numbers language-none"><code class="language-none">实例：String s = new String("Hello world!");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(2)、String(char a[], int offset, int length)<br>提取字符数组a中的一部分创建一个字符串对象。参数offset表示开始截取字符串的位置。lengh表示截取字符串的长度。</p><pre class="line-numbers language-none"><code class="language-none">实例：char a[] = {'h', 'e' ,'l','l', 'o' };String s = new String(a, 1, 5);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(3)、String(char[] value)<br>该构造方法可分配一个新的String对象，使其表示的字符串数组参数中所有元素连接的结果。</p><pre class="line-numbers language-none"><code class="language-none">char a[] = {'h', 'e', 'l', 'l','o'};String s = new String(a);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二、字符串操作方法"><a href="#二、字符串操作方法" class="headerlink" title="二、字符串操作方法"></a>二、字符串操作方法</h3><p>1、获取字符串的长度：length()</p><pre class="line-numbers language-none"><code class="language-none">str.length();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、字符串查找：indexOf(String s)、lastIndexOf(String s)</p><pre class="line-numbers language-none"><code class="language-none">:返回搜索的字符或字符串首次出现的下标，如果没有该字符串则返回-1，str:字符串对象、s是指定的搜索字符串str.indexOf(String s);:返回搜索的字符或字符串最后出现的下标，如果没有该字符串则返回-1，str:字符串对象、s:要搜索的字符串str.lastIndexOf(String s);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、获取指定下标位置的字符：charAt(int a)</p><pre class="line-numbers language-none"><code class="language-none">:返回下标处的字符，str:任意字符串对象，a:字符下标str.charAt(int a);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4、字符串切片：substring(0,3)</p><pre class="line-numbers language-none"><code class="language-none">:截取下标3-结尾的子串，str:任意字符串对象，3:字符串下标str.substring(3);:截取下标0-3的子串，str:任意字符串对象，0,3:字符串下标str.substring(0,3);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、去除字符串里的空格：trim()</p><pre class="line-numbers language-none"><code class="language-none">:去除字符串头和尾的空格str.trim();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>6、字符串替换：replace(oldChar, newChar)</p><pre class="line-numbers language-none"><code class="language-none">替换指定字符串str.replace(oldChar, newChar)替换全部字符串str.replaceAll(oldChar, newChar)替换首个字符串str.replaceFirst(oldChar, newChar)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、判断字符串的开始和结尾</p><pre class="line-numbers language-none"><code class="language-none">1）判断当前字符串对象的前缀是否为指定的字符串，返回Boolean，str:任意字符串对象，s:指定字符串    str.startsWith(String s)2）判断当前字符串对象的后缀是否为指定的字符串，返回Boolean，str:任意字符串对象，s:指定字符串    str.endsWith(String s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8、判断字符串是否相等</p><pre class="line-numbers language-none"><code class="language-none">区分大小写，判断两个字符串的长度和字符,str:任意字符串对象，s:是指定字符串str.equals(String str);忽略区分大小写，判断两个字符串的长度和字符,str:任意字符串对象，s:是指定字符串str.equalsIgnoreCare(String str);比较运算符==：比较地址是否相同<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9、按字典顺序比较两个字符串</p><pre class="line-numbers language-none"><code class="language-none">如果字符串对象在参数之前，则返回一个负整数；如果字符串对象在参数之后，则返回一个负整数；如果字符串对象与参数相等，则返回一个0str.compareTo(String s);按字典顺序比较两个字符串，但忽略大小写。str.compareTolgnoreCase(String s);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10、字符串的大小写转换</p><pre class="line-numbers language-none"><code class="language-none">str.toLouerCase()   全部小写str.toUpperCase()   全部大写<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>11、字符串分割<br>1）以指定的分割符进行分割，分割符可以是字符串，也可以是正则表达式 （使用|定义多个分割符 a|b 分割符是a和b）</p><pre class="line-numbers language-none"><code class="language-none">str.split(Sing s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）指定的分割符和分割次数进行分割，分割符可以是字符串，也可以是正则表达式</p><pre class="line-numbers language-none"><code class="language-none">str.split(String s, int 5)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="三、字符串基本操作"><a href="#三、字符串基本操作" class="headerlink" title="三、字符串基本操作"></a>三、字符串基本操作</h3><p>1、连接字符串</p><p>运用连接“+”符号，能将其他数据类型转换成String类型，并相连。</p><pre class="line-numbers language-none"><code class="language-none">inrt a = 10;System.out.println("hello" + "java" + a);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、去除字符串的空格</p><pre class="line-numbers language-none"><code class="language-none">去除两端空格str.trim();去吃全部空格str.replace(" ", "");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、格式化字符串format()</p><pre class="line-numbers language-none"><code class="language-none">1）语法：String=字符串, format=字符串格式str.format(String, format);2）转换符：%n换行符%s字符串类型%c字符类型%d整数类型%f浮点类型%b布尔类型3）例子：String str = "world";str.format("你好，%s!", str);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、字符串生成器（String-Builder）</p><pre class="line-numbers language-none"><code class="language-none">append(content)         添加内容，insert(int a, data)     向指定a的位置插入数据delete(int a, int b)    删除下标a到下标b的字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、正则表达式</p><pre class="line-numbers language-none"><code class="language-none">import java.util.regex.*;# 字符组"[a-zA-Z0-9_]"# 元字符.匹配任意字符\s 匹配任意空白符\w 匹配字母、数字、下划线\d 匹配数字\n 匹配一个换行符\t 匹配一个制表符\b 匹配一个单词结尾^ 匹配一个字符串的开始&amp; 匹配一个字符串的结束\ 转义字符# 量词* 出现零次或任意多次+ 出现一次或任意多次? 出现零次或一次{n} 出现n次{n,} 出现n或任意多次(n,m) 出现n到m次# 反义词\W 匹配非字母、非数字、非下滑线\D 匹配非数字\S 匹配非空白符a|b 匹配字符a或字符b() 匹配括号内的表达式[...] 匹配字符组中的字符[^zzn] 匹配除了zzn以外的任意字符例子1：匹配手机号(13|14|15|17|18|[0-9]{9}例子2：匹配身份证号\d{17}[\d|x]|\d{15}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、StringBuilder类"><a href="#四、StringBuilder类" class="headerlink" title="四、StringBuilder类"></a>四、StringBuilder类</h3><p>StringBuilder是一个可变的字符序列，StringBuilder类的值除字符序列外，还有预留空间，可以直接在字符序列上进行追加、插入、删除操作，因此被称为缓冲型字符串类。方法与StringBuffer一样，速度比StringBuffer快，当单线程操作字符串缓存区时，使用StringBuilder。</p><p>1、创建StringBuilder类</p><pre class="line-numbers language-none"><code class="language-none">（1）StringBuilder()创建一个空的字符串缓存区，初始容量为16StringBuilder a = new StringBuilder();（2）StringBuilder(int a)创建一个空的字符串缓存区，指定初始长度StringBuilder a = new StringBuilder(100);（3）StringBuilder(String str)创建一个字符串缓存区，并初始化内容，初始化长度是字符串长度+16StringBuilder a = new StringBuilder();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、StringBulider的方法</p><pre class="line-numbers language-none"><code class="language-none">length()、charAt()、indexOf()、lastindexOf()、subtring()、<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>1）追加字符串：append()</p><pre class="line-numbers language-none"><code class="language-none">该方法可以将数据转换成字符串，并添加到字符串缓存区。StringBuilder str = new StringBuilder("Hello,");str.append("world");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）插入字符串：insert()</p><pre class="line-numbers language-none"><code class="language-none">该方法可以将数据转换成字符串，并插入到指定的字符串缓存区。StringBuilder str = new StringBuilder("Hello,");str.insert(6, "world");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）删除字符串：delete()、deleteCharAt()</p><pre class="line-numbers language-none"><code class="language-none">delete()删除指定开始和结束位置上的字符串deleteCharAt()删除指定位置上的字符串StringBuilder str = new StringBuilder("Hello,world!");str.delete(6, 11);str3.deleteCharAt(1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4）反转字符串：reverse()</p><pre class="line-numbers language-none"><code class="language-none">将字符串的内容倒序输出StringBuilder str4 = new StringBuilder("Hello,world!");str4.reverse();System.out.println(str4);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5）替换字符串：replace()、setCharAt </p><pre class="line-numbers language-none"><code class="language-none">replace()径指定位置字符串替换成新字符串setCharAt()将字符串中指定位置的字符替换成新字符StringBuilder str5 = new StringBuilder("Hello,world!");str5.replace(6,11, "Java");str5.setCharAt(0, 'h');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、StringBuffer类"><a href="#五、StringBuffer类" class="headerlink" title="五、StringBuffer类"></a>五、StringBuffer类</h3><p>StringBuffer是一个可变的字符序列，StringBuilder类的值除字符序列外，还有预留空间，可以直接在字符序列上进行追加、插入、删除操作，因此被称为缓冲型字符串类。功能和方法与StringBuilder一样。当多线程操作字符串缓存区时，使用StringBuffer。</p><h1 id="第四章、面向对象"><a href="#第四章、面向对象" class="headerlink" title="第四章、面向对象"></a>第四章、面向对象</h1><h2 id="第一节、类和对象"><a href="#第一节、类和对象" class="headerlink" title="第一节、类和对象"></a>第一节、类和对象</h2><h3 id="一、面向对象"><a href="#一、面向对象" class="headerlink" title="一、面向对象"></a>一、面向对象</h3><p>类是对象的集合，对象是现实事物的映射，用对象之间的关系来描述事物之间的联系。</p><p>面向对象就是将解决的问题划分成多个独立的对象，通过调用对象的方法来解决问题。</p><p>面向对象的特性：封装性、继承性、多态性。</p><h3 id="二、类和对象"><a href="#二、类和对象" class="headerlink" title="二、类和对象"></a>二、类和对象</h3><p>在面向对象中具有相同属性和相同方法的一组对象就是类，对象是类的实例化。类具有属性和方法，类是一种抽象的数据类型。</p><p>1、使用关键字class定义类</p><pre class="line-numbers language-none"><code class="language-none">public class DefineClass {1）定义类的属性（类的变量）String name;int age;2）类的构造方法DefineClass(){}DefineClass(String name, int age){this.name=name;this.age=age;}    3）定义类的方法（类的函数）void print(){System.out.print("名字"+name + "年龄"+age);}// main方法：程序的开始点    public static void main(String[] args) {        4）实例化一个类        DefineClass persoan = new DefineClass();        5）使用类，调用属性        persoan.name = "唐三";        6）使用类，调用方法        persoan.print("张三", 21);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、属性和方法</p><p>1）属性：</p><pre class="line-numbers language-none"><code class="language-none">定义属性class car{    String name;    String sex;    int age;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）方法：</p><pre class="line-numbers language-none"><code class="language-none">语法格式：修饰符 返回类型 方法名(参数列表){方法体;返回值;}修识符：定义方法的访问权限返回类型方法返回的数据类型，没有返回值，则是void方法名：标识符参数列表：方法体：定义方法class car{方法1void sleep(){        System.out.println("睡觉");    }    方法2void info(){        System.out.println("姓名："+name+"，性别："+sex+"年龄"+age);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、构造方法"><a href="#三、构造方法" class="headerlink" title="三、构造方法"></a>三、构造方法</h3><p>1、构造方法（就是对象的初始化），使用new调用构造方法创建对象。</p><p>1）构造方法是一种特殊的方法，在实例化类时，完成类的属性初始化，并且可以设置默认值，限定实例化。<br>2）构造方法没有返回值，不能写void，<br>3）构造方法的名字必须和类名一样。每个类至少有一个构造方法。<br>4）构造方法只能由new运算符调用，用户不能直接调用构造方法，<br>5）没有写构造方法，系统会自动定义默认构造</p><p>2、默认构造方法</p><pre class="line-numbers language-none"><code class="language-none">类名(){}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、构造方法的语法</p><pre class="line-numbers language-none"><code class="language-none">语法格式：[权限修饰符] 类名(参数){    构造体;}例如：public cat(String name, int age) {    this.name = name;    this.age = age;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、调用构造方法（就是类的实例化，就是创建对象）</p><pre class="line-numbers language-none"><code class="language-none">cat c1 = new cat("黑猫警长", 17);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="四、对象"><a href="#四、对象" class="headerlink" title="四、对象"></a>四、对象</h3><p>1、声明对象</p><pre class="line-numbers language-none"><code class="language-none">类名 对象名;person p1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、实例化对象</p><pre class="line-numbers language-none"><code class="language-none">对象名 = new 类名();p1 = new person();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、创建对象</p><pre class="line-numbers language-none"><code class="language-none">类名 对象名 = new 类名(参数列表);person p1 = new person();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4、使用对象</p><pre class="line-numbers language-none"><code class="language-none">1）引用对象属性对象名.成员变量名p1.name;2）调用对象方法对象名.方法名([参数列表]);p1.print();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、对象值的传递"><a href="#五、对象值的传递" class="headerlink" title="五、对象值的传递"></a>五、对象值的传递</h3><p>1、值传递</p><pre class="line-numbers language-none"><code class="language-none">prblic class Test{定义普通方法：设置两个参数，无返回值。public sattic void haha(int a, int b){int sum = a + b;System.out.println(sum);}main方法：将值传递到haha方法中。public static void main(String[] args){haha(3, 5);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、引用传递</p><p>引用传递也叫值传递，方法调用传递是参数的地址。</p><pre class="line-numbers language-none"><code class="language-none">传递对象创建类，定义属性calss A {int i = 0;}创建测试类public class Test{对象.属性，将A类的i属性进行++。public static void add(A a){// a = new A();a.i++;}main方法：将a对象传递到add方法public static void main(String[] args){A a = new A();add(a);System.out.print(a.i);}}当a = new A();行注释掉，输出的是1，没有注释掉是0。原因是当a = new A();行存在时创建了新的a对象，将原本的传递进来的a对象覆盖掉了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、访问权限修饰符"><a href="#六、访问权限修饰符" class="headerlink" title="六、访问权限修饰符"></a>六、访问权限修饰符</h3><pre class="line-numbers language-none"><code class="language-none">1、private：私用模式（当前类）只能被所属的类访问，外界访问私有的需要使用get()和set方法，get()获取值，set()赋予值。2、默认访问修饰符：（当前类、当前的包）只能是同一个包中进行访问，3、protected：保护模式（当前类、子孙类、当前包）能被包中的子类访问，不能修饰类、接口，只能修饰属性和方法。4、public：共用模式（当前类、子孙类、当前包、其他包）能被所有的类访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、非访问权限修饰符"><a href="#七、非访问权限修饰符" class="headerlink" title="七、非访问权限修饰符"></a>七、非访问权限修饰符</h3><p>1、static修饰符</p><p>static修饰符用来修饰成员变量和成员方法，static修饰的成员变量和成员方法，叫静态变量和静态方法，可直接通过类名访问。</p><p>1）静态变量，静态变量全部大写，静态变量可以通过类名.属性名调用，所有的类共享静态变量。静态变量一般保存公共的变量。</p><pre class="line-numbers language-none"><code class="language-none">定义静态变量：private static String name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）静态方法，构造函数不能定义为静态变量，静态方法一般用于提供公共的方法。</p><pre class="line-numbers language-none"><code class="language-none">定义静态方法：static void print(){  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3）静态代码块，</p><pre class="line-numbers language-none"><code class="language-none">定义静态代码块：static{ }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、final修饰符</p><p> 1）修饰类 </p><p> 当用final修饰一个类时，表明这个类不能被继承。</p><p> 2）修饰方法 </p><p> 使用final修饰方法，是把方法锁定，以防任何继承类修改它的含义 </p><p>3）修饰变量</p><p>用final修饰的成员变量叫常量，基本数据类型的常量，赋值后无法改变；如果是引用类型的常量，则在对其初始化之后便不能再让其指向另一个对象。 </p><p>4）</p><p> final变量一旦被初始化赋值之后，就不能再被赋值了 </p><p> 被final修饰的引用变量一旦初始化赋值之后就不能再指向其他的对象， 但引用变量指向的对象内容是可变。 </p><p> static和final关键字混淆，static作用于成员变量用来表示只保存一份副本，而final的作用是用来保证变量不可变。 </p><p>3、abstract修饰符</p><p>abstract用来修饰类，这个类叫抽象类。</p><p>4、synchronized修饰符</p><p>synchronized修饰的方法，在同一时间只能被一个线程访问。</p><p>5、transient修饰符</p><p>transient用来预处理类和变量。当对象中包含transient修饰的成员变量时，ＪＶＭ会跳过该特定的变量。</p><p>６、volatile修饰符</p><p>当一个变量被volatile修饰时，那么对它的修改会立刻刷新到主存，当其它线程需要使用该变量时，会去内存中读取新值。当线程在释放锁之前，会把共享变量值都刷回主存。</p><h3 id="八、类的加载内存图"><a href="#八、类的加载内存图" class="headerlink" title="八、类的加载内存图"></a>八、类的加载内存图</h3><pre class="line-numbers language-none"><code class="language-none">类的加载过程hello.java &gt;　javac编译&gt;&gt; hello.class &gt;　加载内存（load、Link、Init：加载，链接，初始化）&gt;&gt; 内存运行class类的描述，也叫元数据（描述数据的数据）反编译cmd: javap加了static就存储在元数据区（方法区）基础类型：存储在栈里引用类型：存储在堆里方法：   元数据（方法区）    1）基础数据类型：字节类型、短整数类型、整数类型、长整数类型、单精度浮点类型、双精度浮点类型、字符类型、布尔类型、    2）引用数据类型：数组类型、字符串类型，类类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、包的定义和导入"><a href="#九、包的定义和导入" class="headerlink" title="九、包的定义和导入"></a>九、包的定义和导入</h3><pre class="line-numbers language-none"><code class="language-none">包：就是一个文件夹: package１、包的声明：顶级域名.jd.项目名.模块名.类名 ：com.jd.pro1.m1.class２、包的导入import 包名.类名import 包.*３、常见的包名：   java.String  ：字符串的包   java.lang    ：语言包，包含基本的类和接口   java.util    ：包含实用工具类和接口   java.awt     ：抽象窗口工具包，包含创建和维护图形窗口的所有的类和接口   java.swing   ：在awt基础上提供的界面工具包   java.applet  ：包含输入和输出的类   java.sql     ：包含数据库的sql语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二节、封装性"><a href="#第二节、封装性" class="headerlink" title="第二节、封装性"></a>第二节、封装性</h2><h3 id="一、类的封装"><a href="#一、类的封装" class="headerlink" title="一、类的封装"></a>一、类的封装</h3><p>1、将属性和方法设置成私有，在使用getter()和setter()方法区访问</p><h3 id="二、setter和getter方法"><a href="#二、setter和getter方法" class="headerlink" title="二、setter和getter方法"></a>二、setter和getter方法</h3><p>1、当一个类的成员变被定义成了private其他的类就不能访问，为private成员变量提供一个公共的访问方法、外界就可以通过共有的方法来间接访问它。</p><p>2、在setter方法和getter方法里对变量进行验证，对不符合要求的禁止修改。</p><p>3、getter()方法：</p><pre class="line-numbers language-none"><code class="language-none">getter方法：读取对象的属性值，并返回。语法：public AttributeType getAttributeName(){}参数AttributeType：方法的返回类型，类型与读取成员变量的类型一致。getAttributeName，读取成员变量的名字，首字母大写，方法没有参数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、setter方法：</p><pre class="line-numbers language-none"><code class="language-none">setter方法：设置对象的属性值，可以增加一些检查措施语法：public void setAttributeName(AttributeType parameterName){}参数parameterName设置成员变量的名字，首字母大写 方法参数类型与要设置的成员变量的类型一致，方法没有返回值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三节、继承性"><a href="#第三节、继承性" class="headerlink" title="第三节、继承性"></a>第三节、继承性</h2><h3 id="一、继承"><a href="#一、继承" class="headerlink" title="一、继承"></a>一、继承</h3><p>继承在已有的类上派生出新类，子类继承父类的属性和方法，子类自己也有属性和方法。</p><pre class="line-numbers language-none"><code class="language-none">语法格式:class 子类名 extends 父类名 {语句体;}实例：定义父类class Animal{定义属性public String name;private int id;定义方法public void eat(){System.out.println(name+"正在吃");}public void sleep(){System.out.println(name+"正在睡");}}定义子类，并继承父类class Cat extends Animal {public void shout(){System.out.println(name+"正在叫");}}父类有一个共有属性，一个私有属性和两个共有方法，子类虽然只有一个方法，但子类继承了父类，具有父类的一个共有属性和两个私有方法，父类的私有属性不能被子类继承。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、子类继承父类的成员变量</p><p>子类继承父类只能的public和protected成员变量，不能继承父类的private成员变量。</p><p>当子类和父类在同包下才能继承protected成员变量。</p><p>子类继承父类的成员变量，但子类有父类中的同名变量，父类中的同名变量会隐藏。子类需要使用super关键字来进行引用。</p><p>2、子类继承父类的方法</p><p>子类继承父类只能的public和protected成员方法，不能继承父类的private成员方法。</p><p>当子类和父类在同包下才能继承protected成员方法。</p><p>子类继承父类的成员方法，但子类有父类中的同名方法，父类中的同名方法会覆盖。子类需要使用super关键字来进行引用。</p><p>3、构造方法</p><p>子类不能继承父类的构造方法。如果父类的构造方法有参数，子类需要使用super关键字进行调用。若父类的构造方法没有参数，则不需要使用super关键字。如果没有使用super关键字，则系统会自动调用父类的默认构造方法。</p><h3 id="二、super关键字"><a href="#二、super关键字" class="headerlink" title="二、super关键字"></a>二、super关键字</h3><p>super关键字能访问隐藏的父类的成员变量和成员方法。</p><p>1、访问被隐藏的同名成员变量</p><pre class="line-numbers language-none"><code class="language-none">super.成员变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、访问被覆盖的同名成员方法</p><pre class="line-numbers language-none"><code class="language-none">super.成员方法([参数列表])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、访问父类的构造方法</p><pre class="line-numbers language-none"><code class="language-none">要在子类构造方法中继承父类构造方法public Son(){super([参数列表]);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、抽象类和抽象方法"><a href="#三、抽象类和抽象方法" class="headerlink" title="三、抽象类和抽象方法"></a>三、抽象类和抽象方法</h3><p>1、一个抽象类至少有一个抽象方法，抽象方法是只声明未实现的方法。使用abstract关键字定义抽象类和抽象方法。</p><pre class="line-numbers language-none"><code class="language-none">语法格式：抽象类abstract class 类名 {抽象类体;}抽象方法abstrace 返回类型 方法名(参数列表);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、实例：</p><pre class="line-numbers language-none"><code class="language-none">1、定义抽象类abstract class Employee {    定义抽象方法    public abstract void work();}2、定义普通类继承抽象类class Programmer extends Employee{    @Override    实现继承来的抽象方法    public void work(){        System.out.println("我是程序员，写了一整天的代码！");    }}3、主方法：实例化Programmer类，并调用抽象方法public class Test {    public static void main(String[] args) {        Programmer p = new Programmer();        p.work();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、接口"><a href="#四、接口" class="headerlink" title="四、接口"></a>四、接口</h3><p>接口是方法定义和常量值的集合，接口中定义的方法都是抽象方法，实现接口的类要实现接口中定义的所有方法。</p><p>1、接口的定义：</p><pre class="line-numbers language-none"><code class="language-none">语法格式：[public] interface 接口名 [extends 父接口列表]{// 接口体// 常量域声明[public] [static] [final]域类型 域名=常量值;// 抽象方法声明[public] [abstract] 返回值类型 方法名([参数列表]);}其中：使用extends继承父接口，可继承多个父接口。接口中可以有静态的公开常量，用public static final修饰的。接口中的所有方法都是抽象的和公开的，用public abstract修饰的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、接口的实现：</p><p>定义了接口，需要有普通类来实现，在类定义中使用inplements关键字来实现接口，一个类可以继承多个接口。</p><pre class="line-numbers language-none"><code class="language-none">语法格式：class 类名 implements 接口 {类体;}其中：若实现接口的类不是抽象类，则需要实现接口中所有方法。接口中抽象方法的访问修饰符默认是public，所以实现中必须明确的写出public修饰符。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、接口的应用</p><p>实现接口：通过类对接口的实现，实现接口中的方法。</p><p>接口作为参数：接口可作为方法定义时的参数，在实际调用方法时传入接口实现类</p><p>4、实例：</p><pre class="line-numbers language-none"><code class="language-none">1、创建接口类public interface weChat {    void wepay();}2、创建接口类public interface BaiduMap {    void map();}3、实现接口类public class Test implements weChat,BaiduMap{    // 实现接口方法    @Override    public void map() {        System.out.println("微信支付");    }    @Override    public void wepay() {        System.out.println("百度地图");    }    // 主方法：创建测试对象    public static void main(String[] args) {        Test t = new Test();        t.map();        t.wepay();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四节、多态"><a href="#第四节、多态" class="headerlink" title="第四节、多态"></a>第四节、多态</h2><p>多态是指一个方法只有一个名字，但有多种行为，即一个类中存在多个同名方法，使对象具有不同的行为，实现了对象的多态性。</p><p>多态可以利用重载实现，也可以通过子类对父类方法的覆盖实现。重载是一种静态的多态，覆盖是一种动态的多态。</p><h3 id="一、重载"><a href="#一、重载" class="headerlink" title="一、重载"></a>一、重载</h3><p>1、同一个类中有多个名字相同的方法，且每个方法的参数不一样，这被称为方法的重载。</p><pre class="line-numbers language-none"><code class="language-none">1）方法相同2）方法的参数类型、个数不相同、返回类型不相同、方法的修饰符不相同3）main方法也可以重载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、实例：</p><pre class="line-numbers language-none"><code class="language-none">public class 方法的重载 {    public static void add(int a, int b){        System.out.println(a+b);    }    public static void add(int a, int b, int c){        System.out.println(a+b+c);    }    public static void add(int a, double b){        System.out.println(a+b);    }        public static void main(String[] rags){        add(1,2);        add(1,2,3);        add(1,1.2);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、覆盖"><a href="#二、覆盖" class="headerlink" title="二、覆盖"></a>二、覆盖</h3><p>多态存在的前提：要有继承关系、子类重写父类的方法、父类引用指向子类</p><p>覆盖是子类对父类方法的重写，当子类和父类的名字、参数列表、返回类型相同时才能实现覆盖。</p><p>1、方法的覆盖</p><pre class="line-numbers language-none"><code class="language-none">父类public class Father {    public void sayHello(String name){        System.out.println(name+"在说中文：你好");    }}子类public class Son extends Father{    public void sayHello(String name){        System.out.println(name+"speak English: Hello!");    }}主方法public class Test {    public static void main(String[] args) {        Father f = new Father();        Son s = new Son();        f.sayHello("张三");        s.sayHello("jk");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、引用数据类型转换</p><p>引用变量的数据类型转换只是继承层次的</p><p>子类可以自动转换成父类对象</p><p>父类需要强制类型转换才能转换成子类</p><p>1）向上转型：子类对象转换成父类对象</p><pre class="line-numbers language-none"><code class="language-none">把子类对象赋值给父类引用变量父类 a = new 子类();实例：父类public class Father {    public void sayHello(String name){        System.out.println(name+"在说中文：你好");    }}子类public class Son extends Father{    public void sayHello(String name){        System.out.println(name+"speak English: Hello!");    }}主方法public class Test {    public static void main(String[] args) {    将子类对象赋值给父类引用变量Father a = new Son();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）向下转型：父类对象可以强制转换成子类对象</p><pre class="line-numbers language-none"><code class="language-none">把子类对象赋值给父类引用变量父类 a = new 子类();实例：父类public class Father {    public void sayHello(String name){        System.out.println(name+"在说中文：你好");    }}子类public class Son extends Father{    public void sayHello(String name){        System.out.println(name+"speak English: Hello!");    }}主方法public class Test {    public static void main(String[] args) {    创建父类对象Father a = new Father();将父类对象强制转换成子类对象，并调用子类对象的方法。((Son)a).SayHello();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五节、泛型"><a href="#第五节、泛型" class="headerlink" title="第五节、泛型"></a>第五节、泛型</h2><p>泛型：声明类型参数在使用时用具体类型来替换。泛型类、泛型接口、泛型方法。</p><p>一、使用Object当做泛型</p><p>使用Object类型数据创建对象，但在调用对象，要向下转型会抛出异常。</p><p>实例：</p><pre class="line-numbers language-none"><code class="language-none">定义Salary类：public class Salary {    // Object类型的数据    private Object x;    private Object y;    public void setX(Object x) {        this.x = x;    }    public void setY(Object y) {        this.y = y;    }    public Object getX() {        return x;    }    public Object getY() {        return y;    }}定义测试类：public class Test {    public static void main(String[] args) {        Salary s = new Salary();        s.setX(6000);        s.setY("四千");        System.out.println("本月工资是："+s.getX());        System.out.println("本月工资是："+s.getY());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二、泛型应用</p><p>1、泛型的规则</p><p>1）泛型的类型参数只能是类(包括自定义类)，不能是基本数据类型。</p><p>2）泛型的类型参数可以有多个，同一个泛型可以对应多个版本，不同版本的泛型类实例时不兼容的。</p><p>3）泛型的参数类型可以使用extends语句，被叫作有界类型</p><pre class="line-numbers language-none"><code class="language-none">例如：&lt;T extends superclass&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4）泛型的参数类型可以是通配符类型</p><pre class="line-numbers language-none"><code class="language-none">例如：Class&lt;? &gt; classType=Class.forName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、泛型类</p><pre class="line-numbers language-none"><code class="language-none">定义泛型类public class Salary &lt;T1, T2, T3&gt;{    private T1 x;    private T2 y;    private T3 z;    public void setX(T1 x) {        this.x = x;    }    public void setY(T2 y) {        this.y = y;    }    public void setZ(T3 z) {        this.z = z;    }    public T1 getX() {        return x;    }    public T2 getY() {        return y;    }    public T3 getZ() {        return z;    }}定义测试类public class Test {    public static void main(String[] args) {        Salary&lt;Integer, Double,String&gt; s1 = new Salary&lt;Integer,Double, String&gt;();        s1.setX(6000);        s1.setY(6000.00);        s1.setZ("六千");        System.out.println("本月工资是："+s1.getX());        System.out.println("本月工资是："+s1.getY());        System.out.println("本月工资是："+s1.getZ());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、泛型方法</p><pre class="line-numbers language-none"><code class="language-none">定义泛型类，定义泛型方法public class Salary&lt;T1, T2&gt;{    private T1 x;    private T2 y;    public T1 getX() {        return x;    }    public void setX(T1 x) {        this.x = x;    }    public T2 getY() {        return y;    }    public void setY(T2 y) {        this.y = y;    }    /* 定义泛型方法*/    public &lt;T1,T2&gt; void printSalary(T1 x, T2 y){        T1 m = x;        T2 n = y;        System.out.println("基本工资："+m+"，项目提成："+n);    }}定义测试类public class Test {    public static void main(String[] args) {        Salary&lt;Integer,String&gt; s1 = new Salary&lt;Integer, String&gt;();        s1.setX(6000);        s1.setY("六万");        s1.printSalary(s1.getX(), s1.getY());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、泛型接口</p><pre class="line-numbers language-none"><code class="language-none">定义泛型接口：public interface OtherSalary &lt;T1&gt;{    T1 getSalary();}实现泛型接口public class Salary&lt;T1&gt; implements OtherSalary&lt;T1&gt;{    private T1 money;    // 定义泛型构造方法    public Salary(T1 money){        this.money=money;    }        @Override    public T1 getSalary() {        return this.money;    }}定义测试类：public class Test {    public static void main(String[] args) {        Salary&lt;Integer&gt; s = new Salary&lt;Integer&gt;(3000);        System.out.println("兼职收入："+ s.getSalary());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第五章、Java常用类"><a href="#第五章、Java常用类" class="headerlink" title="第五章、Java常用类"></a>第五章、Java常用类</h1><h3 id="一、包装类"><a href="#一、包装类" class="headerlink" title="一、包装类"></a>一、包装类</h3><p>包装类可以将基本数据类型的变量包装成对象</p><p>1、包装类的继承关系</p><pre class="line-numbers language-none"><code class="language-none">Object的子类是：Class、Void、Number、Boolean、CharacterNumber的子类是：Byte、Short、Integer、Long、Float、Double<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、（装箱）</p><p>1）将基本数据类型包装成类对象</p><pre class="line-numbers language-none"><code class="language-none">整型包装类对象int a = 1;Integer Obj_a = new Ineger(a);浮点型包装类对象float b = 1.2f;Float obj_b = new Float(b);double c = 1.2dDouble obj_c = new Double(c);布尔型包装类对象boolean b = true;Boolean obj_b = new Boolean(b);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）字符串转换成包装类对象（更方便）</p><pre class="line-numbers language-none"><code class="language-none">整型包装类对象Integer Obj_a = new Ineger("1");浮点型包装类对象Float obj_a = new Float("1.2f");Double obj_c = new Double("1.2d");布尔型包装类对象Boolean obj_b = new Boolean("t");使用字符串转换成包装类对象时，如果传入的字符串不能成功转换成对应的基本数据类型，则会引发异常。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、将包装类对象转换成基本数据类型（拆箱）</p><p>使用xxxValue()方法取出包装类里的对应基本数据类型</p><pre class="line-numbers language-none"><code class="language-none">取出Integer对象obj_i里的int变量int a = obj_i.intValue();取出Float对象obj_f里的float变量int b = obj_f.floatValue();取出Boolean对象obj_b里的boolean变量int c = obj_b.booleanValue();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、自动装箱和自动拆箱</p><pre class="line-numbers language-none"><code class="language-none">// 装箱，将整型包装成包装类对象Integer obj_i = 1;// 拆箱，将包装类对象转换成整型int i = obj_i;浮点型包装类，要先进行强制类型转换，在拆箱，不然分不清是float还是double<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、枚举类"><a href="#二、枚举类" class="headerlink" title="二、枚举类"></a>二、枚举类</h3><p>一个类的对象是有限且固定的，被叫作枚举类。定义枚举类，必须显示的列出所有的枚举值。</p><pre class="line-numbers language-none"><code class="language-none">定义枚举类：public enum Season {    /* 春天、夏天、秋天、冬天 */    SPRING,SUMMER, AUTUMN, WINTER}定义测试类：public class Test {    public static void main(String[] args) {    // 取出枚举类的值，并赋值给枚举数组        Season[] ss = Season.values().clone();        // 输出每一个季节        for (int i=0; i&lt;Season.values().length; i++){            System.out.println(ss[i]);        }        // 输入某个季节        Season a = Season.SPRING;        System.out.println(a);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、集合"><a href="#三、集合" class="headerlink" title="三、集合"></a>三、集合</h3><p>集合是由一组对象组成，集合可以动态改变大小，可以在序列中存储不同的元素。</p><p>集合类型</p><pre class="line-numbers language-none"><code class="language-none">List(列表)列表区分元素的顺序，允许相同的元素Set(集) 集不区分元素顺序，不允许相同的元素Map(映射)映射是键值对，键不能重复，且一个键对应一个值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1、ArrayList类"><a href="#1、ArrayList类" class="headerlink" title="1、ArrayList类"></a>1、ArrayList类</h5><p>列表的长度可变，列表允许取值为null。</p><p>1）ArrayList类定义：</p><pre class="line-numbers language-none"><code class="language-none">ArrayList&lt;String&gt; al = new ArrayList&lt;String&gt;();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）ArrayList类的常用方法</p><pre class="line-numbers language-none"><code class="language-none">创建ArrayList对象ArrayList&lt;String&gt; al = new ArrayList&lt;String&gt;();获取列表元素个数al.size();将元素添加到末尾al.add("哈哈");将元素添加到指定的位置al.add(1, "嘻嘻");查找元素，有则返回trueal.contains("哈哈");获取元素下标al.indexOf("哈哈");获取下标上的元素al.get(0);将下标上的替换al.set(0,"嘿嘿");如果列表为空，返回trueal.isEmpty();删除列表元素al.remove("嘻嘻");删除下标上的元素al.remove(0);删除列表的全部元素al.clear();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）列表的基本操作</p><pre class="line-numbers language-none"><code class="language-none">列表索引列表对象.get(1)遍历列表for (String i: 列表对象) {System.out.println(i);}列表排序Collections.sort(列表对象); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2、HashMap类"><a href="#2、HashMap类" class="headerlink" title="2、HashMap类"></a>2、HashMap类</h5><p>1）HashMap类定义：</p><pre class="line-numbers language-none"><code class="language-none">HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2）HashMap类的常用方法</p><pre class="line-numbers language-none"><code class="language-none">// 构造方法HashMap&lt;String, String&gt; hm = new HashMap&lt;String, String&gt;();// 成员方法获取映射大小hm.size();添加键值对hm.put("001", "张三");获取键对应的值hm.get("001");查找指定的键，返回truehm.containsKey("001");查找指定的值，返回truehm.containsValue("张三");如果映射为空，返回truehm.isEmpty();删除和键关联的值hm.remove("001");删除所有的映射元素hm.clear();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）映射的基本操作</p><pre class="line-numbers language-none"><code class="language-none">// 遍历HashMapIterator iter = hm.entrySet().iterator();while (iter.hasNext()){Map.Entry entry = (Map.Entry) iter.next();System.out.println("键："+entry.getKey()+"，值："+entry.getValue());}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript</title>
      <link href="posts/cc1b9611.html"/>
      <url>posts/cc1b9611.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h1 id="第一章、JavaScript基础语法"><a href="#第一章、JavaScript基础语法" class="headerlink" title="第一章、JavaScript基础语法"></a>第一章、JavaScript基础语法</h1><h3 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h3><p>1、标识符：由字母、数字、下划线、美元符组成，数字不能使首位，不能是关键字。</p><p>2、严格区分大小写。</p><p>3、代码以空格和括号分隔，以分号结尾。</p><p>4、注释：//、/* */</p><h3 id="二、基本数据类型"><a href="#二、基本数据类型" class="headerlink" title="二、基本数据类型"></a>二、基本数据类型</h3><p>1、number(数值)类型</p><p>2、string(字符)类型</p><p>3、boolean(布尔)类型</p><p>4、object(对象)类型</p><h3 id="三、常量与变量"><a href="#三、常量与变量" class="headerlink" title="三、常量与变量"></a>三、常量与变量</h3><p>1、常量</p><pre class="line-numbers language-none"><code class="language-none">字符串常量："你好，世界！"数值型常量：0; 1; 1.5;布尔型常量：true; false;特殊常量：空值; 控制字符;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、变量</p><p>定义变量：var 变量名=值;</p><pre class="line-numbers language-none"><code class="language-none">var x,y,z = 10;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、全局变量与局部变量</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;var x=10; y=20; // 全局变量function dome(){var z=30; // 局部变量i = 40; //全局变量}dome();&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、输出语句和输入语句"><a href="#四、输出语句和输入语句" class="headerlink" title="四、输出语句和输入语句"></a>四、输出语句和输入语句</h3><p>1、输出语句</p><pre class="line-numbers language-none"><code class="language-none">（1）用document对象的write()方法document.write();（2）用window对象的alert()方法alert();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、输入语句</p><pre class="line-numbers language-none"><code class="language-none">（1）用window对象的prompt()方法prompt();（2）用文本框输入，使用onBlur事件处理程序得到文本框中的内容&lt;form name="chform" method="POST"&gt;请输入：&lt;input type="text" name="textname" onblur="test(this.value)" value="" size="10"&gt;&lt;/form&gt;&lt;script language="JavaScript"&gt;function test(str){alert(str);}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、关键字"><a href="#五、关键字" class="headerlink" title="五、关键字"></a>五、关键字</h3><p>1、控制流：if-else、for、for-in、while、break、continue、return</p><p>2、常数/文字：NaN、null、turn、false、Infinity、NEGATIVE_INFINITY、POSITIVE_INFINTY</p><p>3、赋值：=、OP=</p><p>4、对象：Array、Boolean、Date、Function、Global、Math、Number、Object、String</p><p>5、函数：funtion、Function</p><p>6、对象创建：new</p><p>7、其他：this、var、with</p><h3 id="六、运算符"><a href="#六、运算符" class="headerlink" title="六、运算符"></a>六、运算符</h3><p>1、算数运算符</p><p>+、-、*、%、/、++、–</p><p>2、赋值运算符</p><p>=、+=、-=、*=、/=、%=</p><p>3、字符操作</p><p>连接+</p><p>4、比较运算符</p><p>==、!=、&gt;、&lt;、&gt;=、&lt;=</p><p>5、逻辑运算符</p><p>&amp;&amp;、||、！</p><p>6、三目运算符</p><p>1 &lt; 2 ? “正确” : “错误”</p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;&lt;h2&gt;算数运算符&lt;/h2&gt;&lt;/p&gt;&lt;p&gt;i = 10, j = 10; i + j = ?&lt;/p&gt;&lt;p id="sumid"&gt;&lt;/p&gt;&lt;button onclick="mysum()"&gt;结果&lt;/button&gt;&lt;script&gt;function mysum() {var i = 10;var j = 10;var m = i + j;          document.getElementById("sumid").innerHTML=m;    }&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、条件语句"><a href="#七、条件语句" class="headerlink" title="七、条件语句"></a>七、条件语句</h3><p>1、条件语句：if - else if - else</p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;&lt;h2&gt;条件语句&lt;/h2&gt;&lt;/p&gt;&lt;script&gt;var i = 10;if (i &gt; 0){document.write("i大于0");}else if (1==0){document.write("i等于0");}else{document.write("i小于0");}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、条件分支语句：switch</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;var i = 1;switch (i){case 1: document.write("哈哈哈哈");break;case 2: document.write("嘻嘻嘻嘻");break;case 3: document.write("嘿嘿嘿嘿");break;case 4: document.write("呵呵呵呵");break;case 5: document.write("呜呜呜呜");break;default: document.write("条件不满足");break;}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="八、循环语句"><a href="#八、循环语句" class="headerlink" title="八、循环语句"></a>八、循环语句</h3><p>1、循环语句：for</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;var i = [1,2,3,4,5];for (var j=0; j&lt;6; j++){document.write(i[j]+"、");}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、循环语句：while</p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;while&lt;/p&gt;&lt;script&gt;var i = 1;while (i&lt;10){document.write("i="+i+"&lt;br/&gt;");i++;}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、循环语句：do-while</p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;do-while&lt;/p&gt;&lt;script&gt;var i = 1;do {document.write("i="+i+"&lt;br/&gt;");i++;}while (i&lt;10)&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、跳转语句"><a href="#九、跳转语句" class="headerlink" title="九、跳转语句"></a>九、跳转语句</h3><p>1、跳转语句：break</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;for (var i=0;i&lt;10;i++){if (i==5){break;}document.write("i="+i+"&lt;br/&gt;");}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、跳转语句：continue</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;for (var i=0;i&lt;10;i++){if (i==5){continue;}document.write("i="+i+"&lt;br/&gt;");}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第二章、函数"><a href="#第二章、函数" class="headerlink" title="第二章、函数"></a>第二章、函数</h1><h3 id="一、函数简介"><a href="#一、函数简介" class="headerlink" title="一、函数简介"></a>一、函数简介</h3><p>函数是由事件驱动的，是可重复使用的代码块。</p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;简单函数&lt;/p&gt;&lt;script&gt;// 创建函数function sum(){、var a = 10;var b = 10;var c=a+b;alert(s1);}// 调用函数sum();&lt;/script&gt;alert()：弹出对话框<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、定义函数"><a href="#二、定义函数" class="headerlink" title="二、定义函数"></a>二、定义函数</h3><pre class="line-numbers language-none"><code class="language-none">// 格式functio 函数名（）{函数体；}// 例子&lt;p&gt;定义函数&lt;/p&gt;&lt;script&gt;function tell(){var n = 10;var m = 10;var vl = n*m;alert(vl)}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、函数调用"><a href="#三、函数调用" class="headerlink" title="三、函数调用"></a>三、函数调用</h3><pre class="line-numbers language-none"><code class="language-none">第一种方法：直接调用&lt;script&gt;// 创建函数function sum(a,b){var c=a+b;alert(c)}// 调用函数sum(10,20);&lt;/script&gt;第二种方法：&lt;script&gt;// 创建函数function sum(a,b){var c=a+b;alert(c)}&lt;/script&gt;&lt;button onclick="sum(10,20)"&gt;按钮&lt;/button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、带参数的函数"><a href="#四、带参数的函数" class="headerlink" title="四、带参数的函数"></a>四、带参数的函数</h3><p>函数参数：在函数调用时传递的值，叫参数。</p><pre class="line-numbers language-none"><code class="language-none">sum(arg1,arg2)// 例子&lt;p&gt;带参数的函数&lt;/p&gt;&lt;script&gt;function print(name){alert("Hello，我是"+name);}&lt;/script&gt;&lt;button onclick="print('jk')"&gt;按钮&lt;/button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、带返回值的函数"><a href="#五、带返回值的函数" class="headerlink" title="五、带返回值的函数"></a>五、带返回值的函数</h3><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;带返回值的函数&lt;/p&gt;&lt;p id="pid"&gt;&lt;/p&gt;&lt;script&gt;function hello(){return "Hello";}document.getElementById("pid").innerHTML=hello();&lt;/script&gt;return：将值返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、内置函数"><a href="#六、内置函数" class="headerlink" title="六、内置函数"></a>六、内置函数</h3><p>1、数学函数</p><pre class="line-numbers language-none"><code class="language-none">random：回返0-1区间的随机数parseInt：将字符转串转换成整数parseFloat：将字符串转换成浮点数pow：返回一个幂次方<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、字符串函数</p><pre class="line-numbers language-none"><code class="language-none">indexOF：返回String对象子字符串第一次出现的位置lastindexOf：返回String对象子字符串最后一次出现的位置split：将字符串以指定的字符分割，返回一个数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3、时间函数</p><pre class="line-numbers language-none"><code class="language-none">getFullYear 返回年getDate返回月getDay返回星期getHours返回小时<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4、常用函数</p><pre class="line-numbers language-none"><code class="language-none">join  将数组中的元素连接成字符串对象max返回两数中较大的数min返回两数中较小的数reverse 反序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第三章、异常处理与事件处理"><a href="#第三章、异常处理与事件处理" class="headerlink" title="第三章、异常处理与事件处理"></a>第三章、异常处理与事件处理</h1><h3 id="一、异常处理"><a href="#一、异常处理" class="headerlink" title="一、异常处理"></a>一、异常处理</h3><p>1、异常：当JavaScript引擎执行程序时，发生错误，导致程序停止运行。</p><p>2、异常抛出：当异常产生，并将这个异常生成错误信息。</p><p>3、异常捕获 try-catch()</p><pre class="line-numbers language-none"><code class="language-none">try{发生异常的代码块；}catch(err){错误信息处理；}// 例子&lt;p&gt;异常捕获&lt;/p&gt;&lt;script&gt;function doem(){try{alert(str);}catch(err){alert(err);}}dome();&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、自定义异常 throw</p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;自定义异常&lt;/p&gt;&lt;!-- 创建文本框和提交按钮 --&gt;&lt;form action=""&gt;&lt;input type="text" id="tid"&gt;&lt;input type="button" onclick="dome()" value="按钮" id="bid"&gt;&lt;/form&gt;&lt;script&gt;function doem(){        try{            var e = document.getElementById("tid").value;            if (e = ""){                throw "请输入";            }        }catch(err){            alert(err);        }}dome()&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、事件处理"><a href="#二、事件处理" class="headerlink" title="二、事件处理"></a>二、事件处理</h3><p>1、事件：事件是可以被JavaScript侦测到的行为。</p><pre class="line-numbers language-none"><code class="language-none">onClick单击事件onMouseOver鼠标经过事件onMouseOut鼠标移出事件onChange文本内容改变事件onSelect文本框选中事件onFocus光标聚集事件onBlur移开事件onLoad网页加载事件onUnload关闭网页事件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、单击事件 onClick</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;// 创建函数function sum(a,b){var c=a+b;alert(c)}// 调用函数// sum(10,20);&lt;/script&gt;&lt;button onclick="sum(10,20)"&gt;按钮&lt;/button&gt;onclick=""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、鼠标经过事件 onMouseOver与鼠标移出事件 onMouseOut</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="div" onmouseout="onOut(this)" onmouseover="onOver(this)"&gt;&lt;/div&gt;&lt;script&gt;function onOver(ooj){ooj.innerHTML = "Hello";}function onOut(ooj){ooj.innerHTML = "World";}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、文本内容改变事件 onChange</p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;文本内容改变事件 onChange&lt;/p&gt;&lt;form action=""&gt;&lt;input type="text" onchange="changeDemo(this)"&gt;&lt;/form&gt;&lt;script&gt;function changeDemo(bg){alert("Hello，内荣改变了")}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、文本框选中事件 onSelect</p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;文本框选中事件 onSelect&lt;/p&gt;&lt;form action=""&gt;&lt;input type="text" onselect="changeDemo(this)"&gt;&lt;/form&gt;&lt;script&gt;function changeDemo(bg){bg.style.background="red";}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、光标聚集事件 onFocus</p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;光标&lt;/p&gt;&lt;form action=""&gt;&lt;input type="text" onfocus="changeDemo1(this)"&gt;&lt;/form&gt;&lt;script&gt;function changeDemo1(bg){bg.style.background="blue";}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第四章、文档对象模型-DOM对象"><a href="#第四章、文档对象模型-DOM对象" class="headerlink" title="第四章、文档对象模型-DOM对象"></a>第四章、文档对象模型-DOM对象</h1><h3 id="一、DOM简介"><a href="#一、DOM简介" class="headerlink" title="一、DOM简介"></a>一、DOM简介</h3><p>1、HTML DOM：当网页被加载时，浏览器会创建页面的文档对象模型（Documet Object Model）</p><p>2、DOM操作HTML：</p><p>（1）JavaScript能改变页面中的所有HTML元素</p><p>（2）JavaScript能改变页面中的所有HTML属性</p><p>（3）JavaScript能改变页面中的所有CSS样式</p><p>（4）JavaScript能对页面中的所有事件做出反应</p><h3 id="二、DOM操作HTML"><a href="#二、DOM操作HTML" class="headerlink" title="二、DOM操作HTML"></a>二、DOM操作HTML</h3><p>1、改变HTML的输出流：</p><pre class="line-numbers language-none"><code class="language-none">document.write("hello");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、寻找元素：</p><p>（1）通过id寻找元素 getElementById(“id名”);</p><pre class="line-numbers language-none"><code class="language-none">document.getElementById("pid");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）通过标签寻找元素 getElementsByTagName(“标签名”);</p><pre class="line-numbers language-none"><code class="language-none">document.getElementsByTagName("p");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、改变HTML的内容：innerHTML=”内容”</p><pre class="line-numbers language-none"><code class="language-none">document.getElementById("pid").innerHTML="ws";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、改变HTML的属性 </p><pre class="line-numbers language-none"><code class="language-none">&lt;a id="aid" href="http://www.baidu.com"&gt;搜索&lt;/a&gt;&lt;button onclick="demo()"&gt;切换搜索引擎&lt;/button&gt;&lt;script&gt;function demo(){document.getElementById("aid").href="https://cn.bing.com/";}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、DOM对象操作HTML元素详解</p><pre class="line-numbers language-none"><code class="language-none">getElementsByName()获取namegetElementsByTagName()获取元素getAttribute()获取元素属性setAttribute()设置元素属性childNodes()访问子节点parentNode()访问父节点createElement()创建元素节点createTextNode创建文本节点insertBefore()插入节点removeChild()删除节点offsetHeight网页尺寸scrollHeight网页尺寸<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、DOM操作CSS"><a href="#三、DOM操作CSS" class="headerlink" title="三、DOM操作CSS"></a>三、DOM操作CSS</h3><p>1、改变CSS样式</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        .div {            background-color: red;            width: 101px;            height: 100px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id="div" class="div"&gt; 你好，世界！&lt;/div&gt;    &lt;button onclick="demo()"&gt;切换&lt;/button&gt;    &lt;script&gt;        function demo(){            document.getElementById("div").style.background="blue";        }    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、DOM-EventListener"><a href="#四、DOM-EventListener" class="headerlink" title="四、DOM EventListener"></a>四、DOM EventListener</h3><p>1、向指定元素添加事件句柄：addEventListener();</p><p>2、移除添加的事件句柄：removeEventListener();</p><pre class="line-numbers language-none"><code class="language-none">&lt;button id="btn"&gt;按钮&lt;/button&gt;&lt;script&gt;var x = document.getElementById("btn");// 添加句柄x.addEventListener("click", hello);x.addEventListener("click", world);// 移出句柄x.removeEventListener("click", hello);function hello(){alert("hello")}function world(){alert("world")}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第五章、事件详解"><a href="#第五章、事件详解" class="headerlink" title="第五章、事件详解"></a>第五章、事件详解</h1><h3 id="一、事件流"><a href="#一、事件流" class="headerlink" title="一、事件流"></a>一、事件流</h3><p>1、事件流:<br>描述的是在页面中接受事件的顺序</p><p>2、事件冒泡:<br>由最具体的元素接收，然后逐级向上传播至最不具体的元素的节点(文档)</p><p>3、事件捕获:<br>最不具体的节点先接收事件，而最具体的节点应该是最后接收事件</p><h3 id="二、事件处理-1"><a href="#二、事件处理-1" class="headerlink" title="二、事件处理"></a>二、事件处理</h3><p>1、HTML事件处理:<br>直接添加到HTML结构中。</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="div"&gt;&lt;button id="btn"&gt;按钮&lt;/button&gt;&lt;/div&gt;&lt;script&gt;function demo(){alert("html事件处理");}&lt;/script&gt;缺点修改一处，需要修改两处。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、DOMO级事件处理<br>把一个函数赋值给一-个事件处理程序属性。</p><pre class="line-numbers language-none"><code class="language-none">&lt;div id="div"&gt;&lt;button id="btn"&gt;按钮&lt;/button&gt;&lt;/div&gt;&lt;script&gt;var btn = document.getElementById("btn");btn.onclick = function(){alert("DOM 0级事件处理程序")};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、DOM2级事件处理</p><pre class="line-numbers language-none"><code class="language-none">addEventListener("事件名", "事件处理函数", "布尔值");true:事件捕获false:事件冒泡removeEventListener();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;div id="div"&gt;&lt;button id="btn"&gt;按钮&lt;/button&gt;&lt;/div&gt;&lt;script&gt;var btn = document.getElementById("btn").addEventListener("click", demo)function demo(){alert("DOM 2级事件处理程序")}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、IE事件处理程序</p><pre class="line-numbers language-none"><code class="language-none">添加事件：attachEvent移出事件：detachEvent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="三、事件对象"><a href="#三、事件对象" class="headerlink" title="三、事件对象"></a>三、事件对象</h3><p>1、事件对象:<br>在触发DOM事件的时候都会产生一一个对象</p><p>2、事件对象event：</p><p>1)、type：获取事件类型</p><p>2)、target：获取事件目标</p><p>3)、stopPropagation()： 阻止事件冒泡</p><p>4)、preventDefault()： 阻止事件默认行为</p><h1 id="第六章、7、JavaScript内置对象"><a href="#第六章、7、JavaScript内置对象" class="headerlink" title="第六章、7、JavaScript内置对象"></a>第六章、7、JavaScript内置对象</h1><h3 id="一、对象"><a href="#一、对象" class="headerlink" title="一、对象"></a>一、对象</h3><p>1、对象简介：</p><p>对象是一种数据类型，对象由属性和方法构成。</p><p>JavaScript中的所有事物都是对象：字符串、数值、数组、函数… </p><p>每个对象带有属性和方法，JavaScript允许自定义对象</p><p>2、自定义对象：</p><p>1)、 定义并创建对象实例</p><p>2)、使用函数来定义对象，然后创建新的对象实例</p><h3 id="二、Object对象"><a href="#二、Object对象" class="headerlink" title="二、Object对象"></a>二、Object对象</h3><h3 id="三、String字符串对象"><a href="#三、String字符串对象" class="headerlink" title="三、String字符串对象"></a>三、String字符串对象</h3><p>1、String对象：<br>String对象用于处理已有的字符串，字符串可以使用单引号或单引号。</p><p>2、常用方法：</p><pre class="line-numbers language-none"><code class="language-none">在字符串中查找字符串: indexOf()内容匹配: match()替换内容: replace()字符串大小写转换: toUpperCase() / tol owerCase()字符串转为数组: strong&gt;split()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、Date对象"><a href="#四、Date对象" class="headerlink" title="四、Date对象"></a>四、Date对象</h3><p>1、Date对象:<br>日期对象用于处理日期和时间</p><p>2、获得当日的日期</p><pre class="line-numbers language-none"><code class="language-none">var date = new Date();document.write(date);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3、常用方法:</p><pre class="line-numbers language-none"><code class="language-none">getFullYear():获取年份getTime():获取毫秒setFullYear():设置具体的日期getDay():获取星期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、Array数组对象"><a href="#五、Array数组对象" class="headerlink" title="五、Array数组对象"></a>五、Array数组对象</h3><p>1、Array对象:<br>使用单独的变量名来存储一系列的值</p><p>2、数组的创建:<br>例: var myArray=[“Hello” ,”iwen”,”ime”];</p><p>3、数组的访问:<br>通过指定数组名以及索引号码，你可以访问某个特定的元素<br>注意: [0] 是数组的第一个元素。[1] 是数组的第二个元素。</p><p>4、数组常用方法:</p><pre class="line-numbers language-none"><code class="language-none">concat():合并数组!sort():排序push():末尾追加元素reverse():数组元素翻转<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、Math对象"><a href="#六、Math对象" class="headerlink" title="六、Math对象"></a>六、Math对象</h3><p>1、Math对象:<br>执行常见的算数任务</p><p>2、常用方法:</p><pre class="line-numbers language-none"><code class="language-none">round():四舍五入random():返回0~ 1之间的随机数max():返回最高值。min():返回中的最低值。abs():返回绝对值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第七章、Browser浏览器对象"><a href="#第七章、Browser浏览器对象" class="headerlink" title="第七章、Browser浏览器对象"></a>第七章、Browser浏览器对象</h1><p>Browser对象是由window、navigator、screen、history、location这五个对象组成，其中window是JavaScript层级中的顶层对象。window是浏览器现象、navigator是客户端浏览器对象、screen客户端显示屏对象、history是浏览器窗口访问历史对象、location是当前URL对象。</p><h3 id="一、window对象"><a href="#一、window对象" class="headerlink" title="一、window对象"></a>一、window对象</h3><p>1、window对象:<br>window对象是BOM的核心，window对 象指当前的浏览器窗口<br>所有JavaScript全局对象、函数以及变量均自动成为window对象的成员<br>全局变量是window对象的属性<br>全局函数是window对象的方法<br>甚至HTML DOM的document也是window对象的属性之一</p><p>2、window尺寸:</p><p>window.innerHeight    浏览器窗口的内部高度</p><p>window.innerWidth    浏览器窗口的内部宽度</p><p>3、window方法:</p><pre class="line-numbers language-none"><code class="language-none">1）打开新窗口，参数：页面，名字，打开页面的宽度和高度，打开页面的位置，工具条，菜单window.open("test.html", "window_name", "width=400", "height=200", "top=100", "left=100","toolbar=no", "menubar=no")2）关闭当前窗口window.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、计时器"><a href="#二、计时器" class="headerlink" title="二、计时器"></a>二、计时器</h3><p>1、计时事件:<br>通过使用JavaScript，我们有能力作到在一个设定的时间间隔之后来执行代码，而<br>不是在函数被调用后立即执行，我们称之为计时事件。</p><p>2、计时方法:<br>1）setInterval()     -间隔指定的毫秒数不停地执行指定的代码<br>clearInterval()    方法用于停止setInterval()方法执行的函数代码</p><p>2）setTimeout()     -暂停指定的毫秒数后执行指定的代码<br>clearTimeout()    方法用于停止执行setTimeout()方法的函数代码</p><h3 id="三、history对象"><a href="#三、history对象" class="headerlink" title="三、history对象"></a>三、history对象</h3><p>1、History对象:<br>window.history对象包含浏览器的历史(url)的集合</p><p>2、History方法:<br>history.back() -与在浏览器点击后退按钮相同<br>history.forward() -与在浏览器中点击按钮向前相同<br>history.go() -进入历史中的某个页面</p><h3 id="四、Location对象"><a href="#四、Location对象" class="headerlink" title="四、Location对象"></a>四、Location对象</h3><p>1、Location对象：<br>window.location对象用于获得当前页面的地址(URL),并把浏览器重定向到新的页<br>面。</p><p>2、L ocation对象的属性:</p><pre class="line-numbers language-none"><code class="language-none">location.hostname返回web主机的域名location.pathname返回当前页面的路径和文件名location.port返回web主机的端口location.protocol返回所使用的web协议(http:// 或https://)location.href属性返回当前页面的URLlocation.assign()方法加载新的文档<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、Screen对象"><a href="#五、Screen对象" class="headerlink" title="五、Screen对象"></a>五、Screen对象</h3><p>1、Screen对象：<br>window.screen对象包含有关用户屏幕的信息</p><p>2、属性:</p><pre class="line-numbers language-none"><code class="language-none">screen.availWidth-可用的屏幕宽度screen.availHeight-可用的屏幕高度screen.Height-屏幕高度screen.Width-屏幕宽度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第八章、HTML5的新特性"><a href="#第八章、HTML5的新特性" class="headerlink" title="第八章、HTML5的新特性"></a>第八章、HTML5的新特性</h1><h3 id="一、HTML5的文档结构标签"><a href="#一、HTML5的文档结构标签" class="headerlink" title="一、HTML5的文档结构标签"></a>一、HTML5的文档结构标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;section&gt;段落&lt;nav&gt;构建导航栏&lt;header&gt;页面的页眉&lt;footer&gt;页面的页脚&lt;article&gt;主体内容&lt;aside&gt;边界内容&lt;hgroup&gt;段落&lt;time&gt;日期/时间&lt;mark&gt;重点文字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、音频和视频标签"><a href="#二、音频和视频标签" class="headerlink" title="二、音频和视频标签"></a>二、音频和视频标签</h3><p>1、音频标签 <audio></audio></p><pre class="line-numbers language-none"><code class="language-none">&lt;audio src="song.mp3" controls="controls" autoplay="autoplay"&gt;属性：src 音频URLcontrols 显示播放按钮autoplay 自动播放loop 循环播放preload 显示加载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、视频标签 <video></video></p><pre class="line-numbers language-none"><code class="language-none">&lt;video src="movie.mp4" width="200" height="100" controls="controls" autoplay="autoplay"&gt;属性：src视频URLwidth视频播放器宽度height视频播放器高度controls显示播放器控件autoplay自动播放loop循环播放Spreload显示加载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、绘图标签"><a href="#三、绘图标签" class="headerlink" title="三、绘图标签 "></a>三、绘图标签 <canvas></canvas></h3><h3 id="四、其他标签"><a href="#四、其他标签" class="headerlink" title="四、其他标签"></a>四、其他标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;datalist&gt;描述细节&lt;summary&gt;细节显示&lt;figcaption&gt;定义&lt;figure&gt;标签的标题&lt;figure&gt;段落&lt;ruby&gt;解释&lt;rt&gt;分隔&lt;meter&gt;定义度量衡&lt;command&gt;定义命令按钮&lt;menu&gt;定义菜单列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5</title>
      <link href="posts/98f3a6d9.html"/>
      <url>posts/98f3a6d9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.HTML5基础知识<br>开发工具：Visual Studio Code</p><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h2 id="第一章、html5简介"><a href="#第一章、html5简介" class="headerlink" title="第一章、html5简介"></a>第一章、html5简介</h2><p>1、网页<br>网页的基本组成：<br>    –网页是HTML格式的文件，网站是使用HTML,CSS等制作的网页集合。<br>    –基本元素：图片，文字，声音，视频，链接等，以htm或html后缀结尾的文件<br>2、 HTML的认知：<br>    –HTML是超文本标记语言，由一套标记标签组成。是一种描述前端的语言。<br>    –所谓超文本：1.超出文本限制，可以加入图片，声音，动画，多媒体等内容（超出文本限制）<br>        2.超级连接文本，可以从一个文化跳到另一个文本上面</p><p>3、 Web标准的组成部分：<br>结构html：对网页元素的整理和分类<br>表现css：用于设置网页元素的版式，颜色，大小等外观样式<br>行为Javascript：网页模型的定义和交互的编写</p><p>4、html标签之间的关系：包含关系(父子关系)和并列关系(兄弟关系)</p><p>5、html的元素：开始标签与结束标签之间的内容，叫元素。</p><p>6、html的属性：写在开始标签中的内容，叫属性。</p><pre class="line-numbers language-none"><code class="language-none">常用标签属性：&lt;body&gt;：bgcolor背景颜色&lt;body&gt;：background背景图片&lt;h1&gt;：align对齐方式&lt;a&gt;：targe规定打开链接的方法通用标签属性：class：规定元素的类名id：规定元素的唯一IDtitle：规定元素的额外信息style：规定元素的样式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、Emmet语法</p><pre class="line-numbers language-none"><code class="language-none">生成标签：标签名+Tab生成多个标签：标签名*数量生成父子级标签：ul&gt;li生成兄弟级标签：div+span生成带类名或id名的标签：.类名、#id名生成顺序div标签：div$5生成带内容的标签：div{哈哈哈}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二章、标签"><a href="#第二章、标签" class="headerlink" title="第二章、标签"></a>第二章、标签</h2><h4 id="一、结构标签："><a href="#一、结构标签：" class="headerlink" title="一、结构标签："></a>一、结构标签：</h4><pre class="line-numbers language-none"><code class="language-none">根标签，头部标签，标题标签，主体标签&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;title/&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;body标签属性：设置颜色：bgcolor="red"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、文档类型的声明标签"><a href="#二、文档类型的声明标签" class="headerlink" title="二、文档类型的声明标签"></a>二、文档类型的声明标签</h4><pre class="line-numbers language-none"><code class="language-none">1、HTML的版本号&lt;!DOCTYPE html&gt;作用：告诉浏览器使用哪种HTML版本来显示网页，写在第一行。2.lang语言种类&lt;html lang="zh-CN"&gt;作用：用来定义当前文档显示的语言en:英语、zh-CN:中文。3.字符集：编码类型(UTF-8、GBK...)&lt;meta charset="UTF-8" /&gt;4.html常用标签：1.标题2.文本3.图片4.连接5.列表6.表格7.表单8.框架<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三、标题标签："><a href="#三、标题标签：" class="headerlink" title="三、标题标签："></a>三、标题标签：</h4><p>1、标题栏标签</p><pre class="line-numbers language-none"><code class="language-none">&lt;title&gt;&lt;/title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、标题标签</p><pre class="line-numbers language-none"><code class="language-none">标题标签，文字加粗，一行显示&lt;h1&gt;标题&lt;/h1&gt;&lt;h1&gt;&lt;/h1&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h3&gt;&lt;/h3&gt;&lt;h4&gt;&lt;/h4&gt;&lt;h5&gt;&lt;/h5&gt;&lt;h6&gt;&lt;/h6&gt;标签属性：align:设置对齐方式，值：center、left、right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="四、文本标签："><a href="#四、文本标签：" class="headerlink" title="四、文本标签："></a>四、文本标签：</h4><p>1、段落标签：</p><pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;&lt;/p&gt;作用：分段，段落与段落之间会有间隙&lt;p&gt;分段&lt;/p&gt;标签属性：align：值：居中对齐：center、左对齐：left、右对齐：right、两端对齐：justify<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、 换行标签：</p><pre class="line-numbers language-none"><code class="language-none">&lt;/br&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、水平线标签</p><pre class="line-numbers language-none"><code class="language-none">&lt;hr&gt;&lt;hr size="10" width="50%" align="right" color="red" noshade&gt;属性：size: 设置水平线粗细width:设置水平长度align:设置水平线对齐方式color:设置水平线颜色noshade:取消水平线阴影<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、文本格式化标签：</p><pre class="line-numbers language-none"><code class="language-none">加粗：&lt;b&gt;加粗&lt;/b&gt;斜体：&lt;i&gt;斜体&lt;/i&gt;下划线：&lt;u&gt;下划线&lt;/u&gt;删除线：&lt;s&gt;删除线&lt;/s&gt;上标： &lt;sub&gt;上标&lt;/sub&gt;下标： &lt;sup&gt;下标&lt;/sup&gt;删除线：&lt;del&gt;删除线&lt;/del&gt;强调字，粗体： &lt;strong&gt;加粗&lt;/strong&gt;强调字，粗体：&lt;em&gt;加粗&lt;/em&gt;引用字，斜体：&lt;cite&gt;&lt;/cite&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">字体标签：&lt;font&gt;&lt;font size=10 color="red" face="黑体"&gt;你好，世界&lt;/font&gt;标签的属性：大小:size颜色:color字体:face<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、文字样式：</p><blockquote><pre><code>   注释：&lt;!--注释--&gt;                   特殊字符：                   空格  &amp;#160; &amp;nbsp;空格                   &lt;    &amp;#60; &amp;lt;小于号                   =    &amp;#61;    等于符号                   &gt;    &amp;#62; &amp;gt;大于号                   !    &amp;#33;    惊叹号                   ”    &amp;#34; &amp;quot; 双引号                   #    &amp;#35;    数字标志                   $    &amp;#36;    美元标志                   %    &amp;#37;    百分号                   &amp;    &amp;#38; &amp;amp;                   ‘    &amp;#39;    单引号                   (    &amp;#40;    小括号左边部分                   )    &amp;#41;    小括号右边部分                   *    &amp;#42;    星号                   +    &amp;#43;    加号                       ,    &amp;#44;    逗号                       –    &amp;#45;    连字号                       .    &amp;#46;    句号                       /    &amp;#47;    斜杠                       :    &amp;#58;    冒号                       ;    &amp;#59;    分号                       ?    &amp;#63;    问号                       @    &amp;#64;                       [    &amp;#91;    中括号左边部分                       \    &amp;#92;    反斜杠                       ]    &amp;#93;    中括号右边部分                       ^    &amp;#94;    Caret                       _    &amp;#95;    下划线                       `    &amp;#96;                       {    &amp;#123;    大括号左边部分                       |    &amp;#124;    竖线                       }    &amp;#125;    大括号右边部分                       ~    &amp;#126;    Tilde                       —    &amp;#127;    未使用</code></pre></blockquote><h4 id="五、块元素标签与行元素标签："><a href="#五、块元素标签与行元素标签：" class="headerlink" title="五、块元素标签与行元素标签："></a>五、块元素标签与行元素标签：</h4><p>1、块元素显示时，会以新行开始的</p><pre class="line-numbers language-none"><code class="language-none">&lt;div&gt;、&lt;h1&gt;、&lt;p&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt;、&lt;form&gt;（1）&lt;div&gt;标签&lt;div&gt;&lt;/div&gt;作用：&lt;div&gt;标签时块元素，主要是组合HTML元素的容器。&lt;div&gt;标签用来布局，独占一行，块级元素，类似于一个超大盒子。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、行元素标签</p><pre class="line-numbers language-none"><code class="language-none">&lt;span&gt; &lt;b&gt; &lt;a&gt; &lt;img&gt; &lt;strong&gt;&lt;sub&gt;&lt;sup&gt;&lt;em&gt;&lt;i&gt;&lt;big&gt;&lt;small&gt;&lt;br&gt;&lt;span&gt;组合文档中的行内元素&lt;input&gt;输入框&lt;samp&gt;定义样本文本&lt;var&gt;定义变量&lt;abbr&gt;表示一个缩写形式&lt;acronym&gt;定义只取首字母缩写&lt;bdo&gt;可覆盖默认的文本方向&lt;cite&gt;引用进行定义&lt;code&gt;定义计算机代码文本&lt;dfn&gt;定义一个定义项目&lt;kbd&gt;定义键盘文本&lt;label&gt;标签为&lt;q&gt;定义短的引用&lt;select&gt;创建单选或多选菜单&lt;textarea&gt;多行的文本输入控件&lt;tt&gt;打字机或者等宽的文本效果（2）&lt;span&gt;标签&lt;span&gt;&lt;/span&gt;作用：&lt;span&gt;标签是内联元素，可作为文本容器。&lt;span&gt;标签用来布局，一行可多个&lt;span&gt;标签，行级标签，类似于一个小盒子。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="六、图片标签："><a href="#六、图片标签：" class="headerlink" title="六、图片标签："></a>六、图片标签：</h4><p>1、图片标签 <img></p><pre class="line-numbers language-none"><code class="language-none">&lt;img src="图片url" width="500" height="600" border="10" alt="秘密" title="图片" /&gt;(1). img标签的属性：src：图片路径width：图片宽度height：图片高度border：图片边框的粗细align：对齐方式alt：替换文本，当图片不能显示，就会显示文字。title：提示文本，当鼠标放在图片上，就会显示的文本。hapace：图片周围水平空白，10pxvspace：图片周围垂直空白，10px(2). src后面接图片路径，有绝对路径和相对路径绝对路径：C:\Users\曾钟宁\Desktop\Web/a.jpg网络的绝对路径：https://pics7.baidu.com/feed/fcfaaf51f3deb48f9a5543a351563e212df57864.png?token=cfe6bb0a155ba37ac7ffd7935563c4a5&amp;s=09A062975C5074C61418E06003007077相对目录：/表示下一级，../表示上一级，../../a.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="七、链接标签"><a href="#七、链接标签" class="headerlink" title="七、链接标签"></a>七、链接标签</h4><p>1、<a>标签</a></p><a><pre class="line-numbers language-none"><code class="language-none">超链接:&lt;a href="https://baidu.com" target="目标窗口的弹出方式"&gt;文本，图片，音频，视频，表格&lt;/a&gt;(1)、a标签的属性：href：指定链接目标的urltarget属性：&lt;a href="www.xxx.com" target="_blank/_self/_parent/_top/framename"&gt;a&lt;/a&gt;指定链接页面的打开方式，_self为默认值,当前窗口打开，_blank为新窗口打开。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、超链接的分类:</p><pre class="line-numbers language-none"><code class="language-none">外部链接：&lt;a href="https://baidu.com"&gt;百度&lt;/a&gt;内部链接：网站内部的网页之间的相互连接，&lt;a href="文件名.后缀"&gt;文件&lt;/a&gt;空连接：&lt;a href="#"&gt;文件&lt;/a&gt;下载连接：&lt;a href="img.zip"&gt;下载文件.zip/.exe&lt;/a&gt;网页元素链接：文本，图片，音频，视频，表格锚点链接：可以快速定位页面中的某个位置在链接文本的href属性中，设置"#id"，&lt;a href="#id"&gt;a&lt;/a&gt;在目标位置标签里添加一个id属性值，&lt;h3 id="id"&gt;跳转位置&lt;/h3&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></a><h4 id="八、列表标签："><a></a><a href="#八、列表标签：" class="headerlink" title="八、列表标签："></a>八、列表标签：</h4><p>1、 无序列表</p><ul><li><p></p><pre class="line-numbers language-none"><code class="language-none">&lt;lu&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;列表项&lt;/li&gt;&lt;li&gt;列表项&lt;/li&gt;......&lt;/ul&gt;&lt;ul&gt;标签属性：设置符号样式：type = disc:实心圆、circle:空心圆、square:方块、无序列表是并列关系，&lt;ul&gt;里面只能放&lt;li&gt;标签，&lt;li&gt;标签里面可以容纳所有元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、有序列表</p><ol><li><p></p><pre class="line-numbers language-none"><code class="language-none">&lt;ol&gt;&lt;li&gt;列表项1&lt;/li&gt;&lt;li&gt;列表项2&lt;/li&gt;......&lt;/ol&gt;&lt;ol&gt;标签属性设置序号样式：type = 1、A、a、I设置起始值：start =<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、 自定义列表</p><dl><dt></dt><dd><p></p><pre class="line-numbers language-none"><code class="language-none">&lt;dl&gt;&lt;dt&gt;列表小标题&lt;/dt&gt;&lt;dd&gt;内容&lt;/dd&gt;&lt;dd&gt;内容&lt;/dd&gt;......&lt;/dl&gt;（2）、&lt;dl&gt;标签的属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="九、表格标签"><a href="#九、表格标签" class="headerlink" title="九、表格标签"></a>九、表格标签</h4><p>作用：展示数据<br>1、表格标签：<br>表头单元格里的文字会加粗的居中</p><pre class="line-numbers language-none"><code class="language-none">&lt;table&gt;定义表格&lt;caption&gt;定义表格标题&lt;tr&gt;定义表格的行&lt;th&gt;定义表格的表头&lt;td&gt;定义表格的单元&lt;thead&gt;定义表格的页眉&lt;tbody&gt;定义表格的主体&lt;tfoot&gt;定义表格的页脚&lt;col&gt;定义表格的列属性2、 表格的相关属性：tatle标签属性：width：规定表格的宽度height：规定表格的高度align：规定表格元素的对齐方式，left、center、right。border：规定表格单元是否有边框，1、""cellpadding：规定单元边沿与内容之间的空白，默认为1像素cellspacing：规定单元格之间的空白，默认为2像素caption标签属性：设置表格标题位置 align：默认:top、底部:bottom、右边:righttr标签属性：width：规定表格行的宽度height：规定表格行的高度align：规定表格行的水平对齐方式，left、center、right。valign：规定表格行的垂直对齐方式，默认:middle、top、bottombgcolor：设置表格行的背景颜色background：设置表格行的背景图3、td标签属性：合并行单元格：colspan； 合并行单元格colspan写在最左行合并列单元格：rowspan；合并列单元格rowspan写在最上列width：规定表格行的宽度height：规定表格行的高度align：规定表格行的水平对齐方式，left、center、right。valign：规定表格行的垂直对齐方式，默认:middle、top、bottombgcolor：设置表格行的背景颜色background：设置表格行的背景图&lt;table&gt;&lt;tr&gt;&lt;th&gt;表头单元格&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;单元格&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;表格&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;table border=1 cellpadding="0" cellspacing="0" align="center" width=400px height=200px&gt;        &lt;caption&gt;&lt;h2&gt;热门歌曲&lt;/h2&gt;&lt;/caption&gt;        &lt;tr&gt;            &lt;th align="center"&gt;序号&lt;/th&gt;            &lt;th align="center"&gt;名称&lt;/th&gt;            &lt;th align="center"&gt;歌手&lt;/th&gt;            &lt;th align="center"&gt;时长&lt;/th&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td align="center"&gt;01&lt;/td&gt;            &lt;td align="center"&gt;明年今日&lt;/td&gt;            &lt;td align="center"&gt;陈奕迅&lt;/td&gt;            &lt;td align="center"&gt;02:34&lt;/td&gt;        &lt;/tr&gt;        &lt;tr&gt;            &lt;td align="center"&gt;02&lt;/td&gt;            &lt;td align="center"&gt;青花瓷&lt;/td&gt;            &lt;td align="center"&gt;周杰伦&lt;/td&gt;            &lt;td align="center"&gt;02:56&lt;/td&gt;        &lt;/tr&gt;    &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="十、框架标签（已过时）"><a href="#十、框架标签（已过时）" class="headerlink" title="十、框架标签（已过时）"></a>十、框架标签（已过时）</h4><p>1、框架标签 frame:</p><p>2、框架集标签 frameset:</p><p>3、常用标签：</p><pre class="line-numbers language-none"><code class="language-none">noresize: 固定框架大小cols: 列rows: 行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4、内联框架 iframe:  </p><h4 id="十一、表单标签："><a href="#十一、表单标签：" class="headerlink" title="十一、表单标签："></a>十一、表单标签：</h4><p>表单的组成：表单域，表单元素，提示信息<br>1、表单域</p><form></form><p></p><pre class="line-numbers language-none"><code class="language-none">用于定义表单域，以实现用户信息的搜集和传递&lt;form&gt;&lt;/form&gt; &lt;form&gt;标签的属性：属性action：属性值url地址作用：用于接收并处理表单数据的服务器的url地址属性method：属性值get/post作用：用于设置表单数据的提交方式属性name：属性值名称作用：用于指定表单域的名称，以区分同一个页面中的多个表单域<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、 表单元素</p><p>1）input输入表单元素</p><pre class="line-numbers language-none"><code class="language-none">&lt;input type="属性值" name="元素名" value="请求输入" checked="" maxlength="30" /&gt;input标签的属性：type、name、value、checked、maxlength属性type的属性值：text定义单行的输入字段(文本框)，用户可在其中输入文字password定义密码字段，会进行掩码radio定义单选按钮，可以实现多选一，必须写上相同的name属性checkbox定义复选框，可以实现多选，必须写上相同的name属性submit定义提交按钮，可以把表单元素里的值提交给后台服务器reset定义重置按钮，可以重置表单中的所有数据button定义可点击按钮，(onclick=""，一般通过JavaScript启动脚本)file定义字段和“浏览”按钮，文件上传用(能上传头像之类的)hidden定义隐藏的输入字段image定义图像形式的提交按钮属性name=用户自定义作用：定义input元素的名称属性value=用户自定义作用：用于规定input元素的值属性checked=checked作用：规定input元素首次加载时应当被选中属性maxlength=正整数作用：规定输入字段中字符的最大长度&lt;label&gt;标签：是input元素定义的标注标签作用：增加input元素的点击范围例如：&lt;label for="sex"&gt;男&lt;/label&gt;&lt;input type="radio" name="sex" id="sex" /&gt;点击按钮后触发的事件onclick=""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）select下拉表单元素</p><pre class="line-numbers language-none"><code class="language-none">&lt;select&gt;&lt;option&gt;选项1&lt;/option&gt;&lt;option&gt;选项2&lt;/option&gt;&lt;option&gt;选项3&lt;/option&gt;......&lt;/select&gt;在&lt;option&gt;中定义select="selected"时，当前项即为默认选中项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）textarea文本域元素</p><pre class="line-numbers language-none"><code class="language-none">textarea用于定义多行文本输入的控件(留言板之类的)&lt;textarea rows="3" cols="20"&gt;文本&lt;/textarea&gt;属性rows="显示的行数"属性cols="每行的字符数"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、CSS样式引入</p><pre class="line-numbers language-none"><code class="language-none">1、标签：&lt;style&gt;：样式定义&lt;link&gt;：样式引用2、属性：rel="stylasheet"外部样式表type="text/cass"引入样式的类型margin-left边距3、三种样式表插入方法：外部样式表：&lt;link rel="stylesheet" type="text/css" href="mystyle.css"&gt;内部样式：&lt;style type="text/css"&gt;body {background-color.red}p{margin-left:20px}&lt;/style&gt;内联样式表：&lt;p style="color:red"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></dd></dl></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="posts/ee69e452.html"/>
      <url>posts/ee69e452.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一章、"><a href="#第一章、" class="headerlink" title="第一章、"></a>第一章、</h1><h3 id="一、CSS规范"><a href="#一、CSS规范" class="headerlink" title="一、CSS规范"></a>一、CSS规范</h3><p>CSS主要有两个部分构成：选择器和声明。选择器是用于指定HTML标签，花括号是设置该对象的具体样式。</p><p>1、CSS三大特性：</p><pre class="line-numbers language-none"><code class="language-none">（1）层叠性一个标签由多个选择器。当相同选择器设置了相同样式，那么后一个样式会覆盖前一个样式。（2）继承性子标签会继承父标签的样式。（3）优先级当一个标签多个选择器，当选择器相同，后面的样式会覆盖掉前面的样式。当选择器不相同则会比较权重。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、元素显示模式</p><pre class="line-numbers language-none"><code class="language-none">块级标签：一行只能放一个，可以设置宽高，标签内可以包含任何标签。行内标签：一行可以放多个，不可以设置宽高，标签内只能包含文本或其他行内标签。行内块级标签：一行放多个行内元素，可以设置宽高。将行元素转化成块元素：display: block;将块元素转化成行元素：display: inline;将元素转换成行内块元素：display: inline-block;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、CSS的引入方式"><a href="#二、CSS的引入方式" class="headerlink" title="二、CSS的引入方式"></a>二、CSS的引入方式</h3><pre class="line-numbers language-none"><code class="language-none">1、标签：&lt;style&gt;：样式定义&lt;link&gt;：样式引用2、属性：rel="stylesheet"外部样式表type="text/cass"引入样式的类型margin-left边距3、三种样式表插入方法：外部样式表：&lt;link rel="stylesheet" type="text/css" href="mystyle.css"&gt;内部样式：&lt;style type="text/css"&gt;body {background-color.red}p{margin-left:20px}&lt;/style&gt;内联样式表：&lt;p style="color:red"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、CSS选择器"><a href="#二、CSS选择器" class="headerlink" title="二、CSS选择器"></a>二、CSS选择器</h3><p>1、标签选择器：写上标签名</p><pre class="line-numbers language-none"><code class="language-none">1）、定义，指定样式的标签名，统一的为标签设置样式。p {color: red;}2）分组h1 h2 h3 h4 h5 h6 {color: red;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、类选择器：样式 . 定义，结构class调用。</p><pre class="line-numbers language-none"><code class="language-none">1）、定义.red {color: red;}.size {width: 10pxheight: 10px;}2）、调用&lt;h1 class="red"&gt;啊哈哈哈哈哈&lt;/h1&gt;3）多类多类名：一个标签中放多个类样式，每个样式用空格隔开，当类样式有内容重复，后面的会覆盖掉前面的样式。&lt;h1 class="red size"&gt;啊哈哈哈哈哈&lt;/h1&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、id选择器：样式#定义，结构id调用。</p><pre class="line-numbers language-none"><code class="language-none">1）、定义#blue {color: blue;}2）、调用&lt;div id=blue&gt;蓝色&lt;/div&gt;只能调用一次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、通配符选择器：样式*定义，自动调用</p><pre class="line-numbers language-none"><code class="language-none">* {margin: 0;padding: 0;}自动给所有的标签附上样式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、属性选择器</p><pre class="line-numbers language-none"><code class="language-none">定义属性选择器[title]{color: blue;}定义属性和值选择器[title="t1"]{color: blue;}调用&lt;p title=""&gt;属性选择器&lt;/p&gt;&lt;p title="t1"&gt;属性和值选择器&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、后代选择器</p><pre class="line-numbers language-none"><code class="language-none">HTML结构：&lt;p&gt;从明天起，做一个&lt;string&gt;幸福的人&lt;/string&gt;，喂马，劈柴，周游世界&lt;/p&gt;CSS样式：p string{color: red;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、子元素选择器</p><pre class="line-numbers language-none"><code class="language-none">HTML结构：&lt;ul&gt;&lt;li&gt;&lt;li&gt;&lt;/ul&gt;CSS样式：ul &gt; li {color: red;}使用&gt;分隔，只能选择子元素。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8、伪类选择器</p><pre class="line-numbers language-none"><code class="language-none">链接样式：a:link普通的、未被访问的链接a:visited用户以访问的链接a:hover鼠标指针位于链接上方a:active链接被点击的时刻光标样式 focusinput:focus {background-color: yellow;color: red;}使用:分隔，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第二章、CSS样式"><a href="#第二章、CSS样式" class="headerlink" title="第二章、CSS样式"></a>第二章、CSS样式</h1><h3 id="一、背景样式"><a href="#一、背景样式" class="headerlink" title="一、背景样式"></a>一、背景样式</h3><p>1、 设置元素的背景颜色<br>background-color</p><pre class="line-numbers language-none"><code class="language-none">定义背景颜色body {    background-color: aqua;}设置标签背景的背景颜色.back-color {    background-color: blueviolet;    width: 30px;    padding: 30px;}设置背景颜色半透明：background: grba(0,0,0,0.5);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、将图片设置为背景<br>background-image</p><pre class="line-numbers language-none"><code class="language-none">body {    background-image: url(../img/bg1.jpg);}# 给标签添加图片.div-bg {    background-image: url(../img/bg1.jpg);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、背景图像是否固定或随着页面内容滚动而滚动<br>background-attachment</p><pre class="line-numbers language-none"><code class="language-none">body {    background-attachment: fixed;}默认滚动，滚动:scroll、固定:fixed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、设置背景图片的起始位置<br>background-position</p><pre class="line-numbers language-none"><code class="language-none">body {    background-position: 40px,40px;}#设置百分比0%、25%、50%、100%，设置像素X、Y，设置方位：center、top、left、<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、设置背景图片是否重复以及如何重复<br>background-repeat</p><pre class="line-numbers language-none"><code class="language-none">body {    background-repeat: repeat;}repeat:重复、no-repeat:不重复、repeat-x:x轴重复、:repeat-y:y轴重复<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、设置背景图片的大小：background-size</p><pre class="line-numbers language-none"><code class="language-none">body {    background-size: 400px,200px;}适应:autu、<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、设置图片的定位区域：background-origin</p><pre class="line-numbers language-none"><code class="language-none">body {    background-origin:border-box;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8、设置图片的绘制区域：background-clip</p><pre class="line-numbers language-none"><code class="language-none">body {    background-clip:content-box;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、字体样式"><a href="#二、字体样式" class="headerlink" title="二、字体样式"></a>二、字体样式</h3><p>1、字体样式</p><pre class="line-numbers language-none"><code class="language-none">.font {// 字体    font-family: "仿宋";    // 字号大小    font-size: 30px;    // 字体粗细    font-weight: 100;    // 字体样式：无样式:normal、加粗、italic斜体、下划线    font-style: italic;    // 定义字母大小写 无样式:normal、小体大写:small-caps    font-variant: normal}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、字体复合属性写法</p><pre class="line-numbers language-none"><code class="language-none">.font {// font: font-style font-weight font-size font-familyfont: italic 700 16px "仿宋"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、文本样式"><a href="#三、文本样式" class="headerlink" title="三、文本样式"></a>三、文本样式</h3><pre class="line-numbers language-none"><code class="language-none">.text-1 {// 文本颜色color: darkred;// 对齐方式text-align: center;// 装饰文本text-decoration: underline;// 首行缩进text-indent: 2em;// 文本行间距line-height: 20px;// 字母处理text-transform: capitalize;// 阴影效果：水平距离、垂直距离、清晰度、颜色text-shadow: 20px 20px 1px F00;}对齐方式：center:居中对齐、left:左对齐、right:右对齐、justify:两端对齐。装饰文本：none:无、line-through删除线、underline:下划线、overline上划线em：相对于当前像素的一个文字大小。字母处理：capitalize:首字母大写、lowercase:全部小写、uppercase:全部大写阴影效果：10px:距右距离，10px:距下距离、清晰度2px、颜色#00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、列表样式"><a href="#四、列表样式" class="headerlink" title="四、列表样式"></a>四、列表样式</h3><p>1、列表类型：list-style-type</p><pre class="line-numbers language-none"><code class="language-none">li {    list-style-type: georgian;}空心圆circle、方块square、数字decima、鬼画符georgian<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、列表项图像：list-style-image</p><pre class="line-numbers language-none"><code class="language-none">li {    list-style-image: url("../img/花瓣.png");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、列表标志位置：list-style-position</p><pre class="line-numbers language-none"><code class="language-none">li {    list-style-position: inside;}li {    list-style-position: outside;}将列表横放:display: inline;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、表格样式"><a href="#五、表格样式" class="headerlink" title="五、表格样式"></a>五、表格样式</h3><p>1、设置表格外边框 border</p><pre class="line-numbers language-none"><code class="language-none">#ta tr th td  {    border: 5px solid blue violets;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、合并边框 border-collapse</p><pre class="line-numbers language-none"><code class="language-none">#ta {    border-collapse: collapse;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、设置表格内边距 padding</p><pre class="line-numbers language-none"><code class="language-none">td {padding: 10px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4、设置宽和高</p><pre class="line-numbers language-none"><code class="language-none">#ta {    width: 400px;    height: 400px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、设置对齐方式text-align</p><pre class="line-numbers language-none"><code class="language-none">#ta {text-align: center;vertical-align: middle;}设置水平对齐 text-align: left、right、center设置垂直对齐 vertical-align: top、bottom、middle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、设置表格颜色</p><pre class="line-numbers language-none"><code class="language-none">#ta {background-color: aqua}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、超链接样式"><a href="#六、超链接样式" class="headerlink" title="六、超链接样式"></a>六、超链接样式</h3><p>1、超链接的状态</p><pre class="line-numbers language-none"><code class="language-none">a:link普通的、未被访问的链接a:visited用户以访问的链接a:hover鼠标指针位于链接上方a:active链接被点击的时刻<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、超链接的样式</p><pre class="line-numbers language-none"><code class="language-none">// 除去链接中的下划线text-decorationa:link {// 除去链接中的下划线text-decoration: none;// 设置背景颜色background-color: red;// 设置前景色color:#F000}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、"><a href="#七、" class="headerlink" title="七、"></a>七、</h3><p>1、鼠标样式 cursor</p><pre class="line-numbers language-none"><code class="language-none">.div {cursor: wait;}cursor属性：自动默认选择：auto正常选择：default移动：move忙：wait水平调整：w-resize垂直调整：s-resize连接选择：pointer精准定位：crosshair连接选择：hand帮助选择：help文本选择：text水平调整：e-resize垂直调整：n-resize外部连接鼠标样式：url沿对角线调整：ne-resize、sw-resize、se-resize、nw-resize<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、光标样式 focus</p><pre class="line-numbers language-none"><code class="language-none">input:focus {background-color: yellow;color: red;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、滚动条 overflow</p><pre class="line-numbers language-none"><code class="language-none">（1）overflow属性自动显示滚动条overflow: auto;没用滚动条overflow: hidden;没有水平滚动条overflow-x: hidden;没有垂直滚动条overflow-y: hidden;.div {    overflow-x:hidden;    overflow-y: hidden;    overflow: hidden;    overflow: auto;}（2）设置滚动条颜色顶部/底部图标颜色scrollbar-arrow-color: black; 滚动条颜色scrollbar-face-color: black; 滚动条阴影颜色scrollbar-shadow-color: black;滚动条背景颜色scrollbar-track-color: black;滚动条基本颜色scrollbar-base-color: black;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、滤镜 filter</p><pre class="line-numbers language-none"><code class="language-none">1、设置透明度 alphafilter: alpha(10)2、设置模糊滤镜 blur(Npx)filter: blur(4px);3、设置亮度 brightness(%)filter: brightness(2%);4、设置对比度 contrast(%)filter: contrast(30%);5、饱和度saturate(%)filter: saturate(20%);6、投影dropShadow(color=颜色, offX=x偏移, offY=y偏移, positive模糊范围)filter: dropShadow(2px 10px 0 rgba(255,0,0,0.5));7、设置水平反转 flipHfilter: flipH;8、设置垂直反转 flipVfilter: flipV;9、设置外发光 glow(color=颜色,strength=强度)filter:  glow(color=red, strength=10)10、灰度 gray(%)filter:gray(0.5);11、设置波纹效果 wave(add=1, )filter:wave(1);12、色相旋转hue-rotate(deg)filter:hue-rotate(125deg);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第三章、盒子模型布局"><a href="#第三章、盒子模型布局" class="headerlink" title="第三章、盒子模型布局"></a>第三章、盒子模型布局</h1><p>1、组成：内容、内边距、边框、轮廓、外边距</p><h3 id="一、内边距-padding"><a href="#一、内边距-padding" class="headerlink" title="一、内边距 padding"></a>一、内边距 padding</h3><pre class="line-numbers language-none"><code class="language-none">// 设置所有边距 padding.tdbj {padding: 100px;}.tdbj {    // 设置上边距 padding-toppadding-top: 100px;    // 设置底边距 padding-bottonpadding-botton: 100px;    // 设置左边距 padding-leftpadding-left: 100px    // 设置右边距 padding-rightpadding-right: 100px}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、边框样式-border"><a href="#二、边框样式-border" class="headerlink" title="二、边框样式 border"></a>二、边框样式 border</h3><p>1、边框的样式 border-style</p><pre class="line-numbers language-none"><code class="language-none">.div1 {border-style: dotted; }2、边框的单边样式border-top-style: ;border-left-style: ;border-right-style: ;border-bottom-style: ;none:无样式、double:双线样式、solid:实线样式、dotted虚线样式、inset:3D凹边、outset:3D凸边<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、边框的粗细 border-width</p><pre class="line-numbers language-none"><code class="language-none">.div1 {border-width: 10px; } 单边框粗细border-top-widthborder-left-widthborder-right-widthborder-bottom-width<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、边框颜色 border-color</p><pre class="line-numbers language-none"><code class="language-none">.div1 {border-color: red;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>5、圆角边框 border-radius</p><pre class="line-numbers language-none"><code class="language-none">.div1{border-radius: 10px;}# 设置单边圆角.div1{border-radius: 10px 20px 30px 40px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、边框阴影 box-shadow</p><pre class="line-numbers language-none"><code class="language-none">.classid {// 设置边框阴影：距右距离、距下距离、阴影尺寸、清晰度、颜色、内部颜色box-shadow: 10px 10px 5px 5px #FF00 inset}默认外阴影、inset内阴影<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、合并边框 -border-collapse</p><pre class="line-numbers language-none"><code class="language-none">#ta {    border-collapse: collapse;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、轮廓样式-outline"><a href="#三、轮廓样式-outline" class="headerlink" title="三、轮廓样式 outline"></a>三、轮廓样式 outline</h3><p>1、设置轮廓属性 outline: </p><pre class="line-numbers language-none"><code class="language-none">p {// 1、设置轮廓属性outline: // 2、设置轮廓的颜色outline-color: red;// 3、设置轮廓的样式outline-style: groove;// 4、设置轮廓的宽度outline-width: 10px;}outline-style属性：无样式:none、dotted:定义点状的轮廓、dashed:定义虚线轮廓、solid:定义实线轮廓、double:定义双线轮廓。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、外边距-margin"><a href="#四、外边距-margin" class="headerlink" title="四、外边距 margin"></a>四、外边距 margin</h3><pre class="line-numbers language-none"><code class="language-none">.div {// 外边距margin: 10px;// 顶部外边距    margin-top: 10px;// 底部外边距    margin-bottom1```: 10px;    // 左边外边距    margin-left: 10px;    // 右边外边距    margin-right: 10px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>清除内外边距：</p><pre class="line-numbers language-none"><code class="language-none">* {padding: 0;margin: 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第四章、浮动布局"><a href="#第四章、浮动布局" class="headerlink" title="第四章、浮动布局"></a>第四章、浮动布局</h1><h3 id="一、CSS定位"><a href="#一、CSS定位" class="headerlink" title="一、CSS定位"></a>一、CSS定位</h3><p>1、定位机制：</p><p>绝对定位：position: absolute;</p><p>相对定位：position: relative;</p><p>普通流：元素按照HTML的默认位置顺序决定排布的过程。<br>浮动流：脱离普通流的控制，浮动流的盒子不会保留原先的位置。<br>绝对布局：</p><h3 id="一、普通流-position"><a href="#一、普通流-position" class="headerlink" title="一、普通流 position"></a>一、普通流 position</h3><pre class="line-numbers language-none"><code class="language-none">1、普通流：元素按照HTML的位置顺序决定排布的过程。2、属性// 设置元素放置的位置上 positiondiv {position: static;}（1）、position的值：静态:static、相对:relative、绝对:absolute、固定:fixed（2）、相对位置可以设置偏移量：// 元素向上的偏移量：top// 元素下的偏移量：bottom// 元素向左的偏移量：left// 元素向右的偏移量：right（3）、设置元素溢出区域发生的事：overflow（4）设置元素显示的形状：clip（5）设置元素垂直对齐的方式：vertical-align（6）设置元素的堆叠顺序：z-indexdiv {position: static;z-index: 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、浮动流-float"><a href="#二、浮动流-float" class="headerlink" title="二、浮动流 float"></a>二、浮动流 float</h3><pre class="line-numbers language-none"><code class="language-none">1）float的值：// 元素不浮动none// 元素向左浮动left// 元素向右浮动right// 从父级继承浮动属性inheritdiv{float: none;}2）clear属性去掉浮动属性div{clear: both;}clear属性值:both去掉左右两侧浮动、laft去掉向左浮动、right去掉向右浮动、inherit去掉父级继承浮动3）设置元素的堆叠顺序：z-indexdiv {z-index: 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">浮动样式应用HTML结构&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;瀑布流布局&lt;/title&gt;    &lt;link href="浮动应用样式.css" type="text/css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;        &lt;ul&gt;            &lt;li&gt;&lt;img src="../img/花瓣.png"&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="../img/花瓣.png"&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="../img/花瓣.png"&gt;&lt;/li&gt;        &lt;/ul&gt;        &lt;ul&gt;            &lt;li&gt;&lt;img src="../img/花瓣.png"&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="../img/花瓣.png"&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="../img/花瓣.png"&gt;&lt;/li&gt;        &lt;/ul&gt;        &lt;ul&gt;            &lt;li&gt;&lt;img src="../img/花瓣.png"&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="../img/花瓣.png"&gt;&lt;/li&gt;            &lt;li&gt;&lt;img src="../img/花瓣.png"&gt;&lt;/li&gt;        &lt;/ul&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;CSS样式*{    margin: 0px;    padding: 0px;}li {    list-style: none;}#div1 {    width: 1000px;    height: auto;    margin: 20px auto;}ul{     width: 250px;    float: left;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第五章、CSS常见操作"><a href="#第五章、CSS常见操作" class="headerlink" title="第五章、CSS常见操作"></a>第五章、CSS常见操作</h1><h3 id="一、对齐操作"><a href="#一、对齐操作" class="headerlink" title="一、对齐操作"></a>一、对齐操作</h3><p>1、使用margin属性进行水平对齐</p><pre class="line-numbers language-none"><code class="language-none">.div {margin-left: auto;margin-right: auto;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、使用position属性进行左右对齐</p><pre class="line-numbers language-none"><code class="language-none">.div {position: absolute;// 向左对齐left: 0px;// 向右对齐right: 0px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、使用float属性进行左右对齐</p><pre class="line-numbers language-none"><code class="language-none">div{float: left;float: right;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h3><p>1、尺寸</p><p>设置元素高度</p><pre class="line-numbers language-none"><code class="language-none">.p{    // 设置元素高度    height: 10px;    // 设置元素宽度    widht: 10px;    // 设置行高    lie-height: 10px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、分类</p><p>设置鼠标样式 cursor</p><pre class="line-numbers language-none"><code class="language-none">.p{cursor: alias;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>设置元素是否可见 visibility</p><pre class="line-numbers language-none"><code class="language-none">li { visibility:  visible;}visible:可见、hidden不可见<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、导航栏"><a href="#三、导航栏" class="headerlink" title="三、导航栏"></a>三、导航栏</h3><p>1、垂直导航栏</p><pre class="line-numbers language-none"><code class="language-none">HTML结构&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;导航栏&lt;/title&gt;    &lt;link href="导航栏样式.css" type="text/css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul&gt;        &lt;li&gt;&lt;a href="https://www.baidu.com/"&gt;百度&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href="https://www.sogou.com/"&gt;搜狗&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href="https://www.bilibili.com/"&gt;bilibili&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href="https://www.zhihu.com/"&gt;知乎&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;CSS样式ul{    list-style: none;    margin: 0px;    padding: 0px;}a:link,a:visited{    text-decoration: none;    display: block;    background-color: aqua;    width: 50px;    text-align: center;}a:active,a:hover{    background-color: bisque;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、水平导航栏</p><pre class="line-numbers language-none"><code class="language-none">HTML结构&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;导航栏&lt;/title&gt;    &lt;link href="导航栏样式.css" type="text/css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body&gt;    &lt;ul&gt;        &lt;li&gt;&lt;a href="https://www.baidu.com/"&gt;百度&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href="https://www.sogou.com/"&gt;搜狗&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href="https://www.bilibili.com/"&gt;bilibili&lt;/a&gt;&lt;/li&gt;        &lt;li&gt;&lt;a href="https://www.zhihu.com/"&gt;知乎&lt;/a&gt;&lt;/li&gt;    &lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;CSS样式ul{    list-style: none;    margin: 0px;    padding: 0px;    background-color: darkgray;    width: 250px;    text-align: center;}a:link,a:visited{    font-weight: initial;    text-decoration: none;    background-color: aqua;    width: 50px;    text-align: center;}a:active,a:hover{    background-color: bisque;}li {    display: inline;    padding: 3px;    padding-left: 5px;    padding-right: 5px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、图片样式"><a href="#四、图片样式" class="headerlink" title="四、图片样式"></a>四、图片样式</h3><pre class="line-numbers language-none"><code class="language-none">HTML结构&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;图片样式&lt;/title&gt;    &lt;link href="图片样式1.css" type="text/css" rel="stylesheet"&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;        &lt;div class="image"&gt;            &lt;a href="#" target="_self"&gt;                &lt;img src="../img/时崎狂三.jpg" alt="风景" width="400px" height="200"&gt;            &lt;/a&gt;            &lt;div class="text"&gt;时崎狂三&lt;/div&gt;        &lt;/div&gt;        &lt;div class="image"&gt;            &lt;a href="#" target="_self"&gt;                &lt;img src="../img/时崎狂三.jpg" alt="风景" width="400px" height="200"&gt;            &lt;/a&gt;            &lt;div class="text"&gt;时崎狂三&lt;/div&gt;        &lt;/div&gt;        &lt;div class="image"&gt;            &lt;a href="#" target="_self"&gt;                &lt;img src="../img/时崎狂三.jpg" alt="风景" width="400px" height="200"&gt;            &lt;/a&gt;            &lt;div class="text"&gt;时崎狂三&lt;/div&gt;        &lt;/div&gt;        &lt;div class="image"&gt;            &lt;a href="#" target="_self"&gt;                &lt;img src="../img/时崎狂三.jpg" alt="风景" width="400px" height="200"&gt;            &lt;/a&gt;            &lt;div class="text"&gt;时崎狂三&lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;CSS样式body {    margin: 10px auto;    width: 70%;    height: auto;}.image {    border: 1px solid darkgray;    width: auto;    height: auto;    float: left;    text-align: center;    margin: 5px;}img {    margin: 5px;}.text {    font-size: 12px;    margin-bottom: 5px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第六章、CSS动画"><a href="#第六章、CSS动画" class="headerlink" title="第六章、CSS动画"></a>第六章、CSS动画</h1><h3 id="一、3D与2D的转换"><a href="#一、3D与2D的转换" class="headerlink" title="一、3D与2D的转换"></a>一、3D与2D的转换</h3><p>实现一些效果，例如移动、旋转、缩放、倾斜、拉伸</p><p>1、2D转换的方法：</p><pre class="line-numbers language-none"><code class="language-none">translate()移动rotate()旋转scale()缩放skew()倾斜matrix()拉伸/* 移动 */.div1 {    transform: translate(200px,100px);    /* 指定浏览器 */    -ms-transform: translate(100px,100px); /*IE*/}/* 旋转 */.div1 {    transform: rotate(200deg);    /* 指定浏览器 */    -ms-transform: translate(100px,100px); /*IE*/}/* 缩放 */.div1 {    transform: scale(1,2);    /* 指定浏览器 */    -ms-transform: translate(100px,100px); /*IE*/}/* 倾斜 */.div1 {    transform: skew(30deg, 20deg);    /* 指定浏览器 */    -ms-transform: translate(100px,100px); /*IE*/}/*  */.div1 {    transform: matrix(1,2,3,4,5,6);    /* 指定浏览器 */    -ms-transform: translate(100px,100px); /*IE*/}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、3D转换的方法：</p><pre class="line-numbers language-none"><code class="language-none">rotateX()rotateY()/*  */.div1 {    transform: rotateX(500deg);    /* 指定浏览器 */    -ms-transform: translate(100deg); /*IE*/}/*  */.div1 {    transform: rotateY(500deg);    /* 指定浏览器 */    -ms-transform: translate(100deg); /*IE*/}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、过度"><a href="#二、过度" class="headerlink" title="二、过度"></a>二、过度</h3><p>是元素从一种样式转换成另一种样式。</p><pre class="line-numbers language-none"><code class="language-none">// 设置过度transition// 过度名称 transition-property// 过度效果的时间transition-duration// 过度效果的时间曲线transition-timing-functio// 过度效果的延时时间transition-delay// 实战-div {    width: 100px;    height: 100px;    background-color: darkturquoise;    -webkit-transition: width 2s, height 2s, -ms-transform 2s;    transition: width 2s, height 2s, transform 2s;    -webkit-transition-delay: 2s;    transition-delay: 2s;}div:hover {    width: 200px;    height: 200px;    transform: rotate(360deg);    -ms-transform: rotate(360deg)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、动画"><a href="#三、动画" class="headerlink" title="三、动画"></a>三、动画</h3><p>遵循@keyframes规则：规定动画时长、规定动画名称</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、多列"><a href="#四、多列" class="headerlink" title="四、多列"></a>四、多列</h3><p>对文本或区域进行布局</p><pre class="line-numbers language-none"><code class="language-none">column-count分列的数量column-gap列间距column-rule间距线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;多列&lt;/title&gt;    &lt;link rel="stylesheet" href="多列样式.css" type="text/css"&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class="div1"&gt;        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈        哈啊哈哈哈哈哈哈哈    &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;.div1 {    column-count: 4;    -webkit-column-count: 4;    -webkit-column-gap: 30px;    column-gap: 30px;    column-rule: 5px outset red;    -webkit-column-rule: 5px outset red;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础</title>
      <link href="posts/a4a81253.html"/>
      <url>posts/a4a81253.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一章、Linux系统管理"><a href="#第一章、Linux系统管理" class="headerlink" title="第一章、Linux系统管理"></a>第一章、Linux系统管理</h1><h4 id="一、Linux命令基础"><a href="#一、Linux命令基础" class="headerlink" title="一、Linux命令基础"></a><strong>一、Linux命令基础</strong></h4><p>1． 打开命令行 ：centos桌面左键，选择poenterminal,</p><p>2、命令行的组成：命令 【选项/参数】【操作对象】</p><p>[root@master <del>]# root:当前用户名、@:分隔符、master:Linux系统名、</del>:当前目录、# root权限（$普通权限）</p><p>3、命令、参数、操作对象之间有空格分隔；使用分号结尾，可在一行输入多个命令；可以用反斜杠“\”断开命令。</p><p>4、【Tab】键可以“命令补齐”和“文件补齐”</p><p>5、 | 管道符</p><p>6、 / 搜索符</p><p>​        /string      查找string这个字符串</p><p>7、 Ctrl+C   终止当前程序</p><p>8、 Ctrl+G   进入系统输入</p><p>9、 Ctrl+Alt  返回计算机</p><p>10、 Ctrl+z </p><p>11、 Ctrl+L   清屏</p><h4 id="二、Linux系统管理命令"><a href="#二、Linux系统管理命令" class="headerlink" title="二、Linux系统管理命令"></a><strong>二、Linux系统管理命令</strong></h4><h5 id="1、Linux系统管理命令"><a href="#1、Linux系统管理命令" class="headerlink" title="1、Linux系统管理命令"></a>1、Linux系统管理命令</h5><p>（1)    uname  -a         查看系统全部命令，包括内核、版本号、操作系统类型</p><p>（2)    halt命令            关机</p><p>（3)    init      0          关机</p><p>（4)    init     6          重启</p><p>（5)    init     3          命令界面</p><p>（6)    init     5          图形界面</p><p>（7)    reboot命令          重启系统</p><p>（8)    poweroff命令        停止系统并关闭电源</p><p>（9）shutdown命令</p><p>​            shutdown    选项/时间          作用</p><p>参数：</p><p>​            -r      now / +5 / 8:00  重启系统</p><p>​            -h      now / +5 / 8:00  关闭系统 </p><ol start="10"><li> date               查看系统时间</li></ol><p>​            date    “%Y-%m-%d %H:%M:%S  获取当前时间</p><p>​            date    %s         获取时间戳”</p><p>​            date    -s 2021.5.0520   设置系统日期</p><p>​            -s 12:00        设置系统时间</p><p>（11)  free     -h         查看系统内存使用情况</p><p>（12)  pidof    操作对象    查看某个服务进程的PID值</p><p>（13)  kill         PID     向进程发送一个信号</p><p>参数：</p><p>​            -1  PID     关掉电话线</p><p>​            -2  PID     结束进程</p><p>​            -9  PID     强制结束进程</p><p>​            -15 PID     正常结束进程</p><p>​            -19 PID     暂停结束进程</p><p>（14)  kill all       [选项] [进程名]   结束某个指定的服务对应的进程</p><p>（15)  alias    命令别名=命令  用于查询和设置命令的别名</p><p>​        列：alias tm=date</p><p>（16)  ps                 查看系统进程状态（五种常见的进程状态：运行R、中断S、不可中断D、僵死Z、停止T）</p><p>​    参数：</p><p>​            -a         显示所有进程</p><p>​            -u         查看系统进程用户名和启动时间</p><p>​            -x </p><p>（17)  wget    [选项]   [资源url地址]   下载资源</p><p>（18)  top                动态查看进程活动和系统负载</p><p>（19)  who               查看当前登录主机的用户</p><p>（20)  last                查看所有登录系统的记录</p><p>（21)  wget    [选项]   [资源url地址]   下载资源</p><p> （22）clear            清屏</p><p>（23)  IP addr                                    查看IP</p><p>（24)  Ifconig   [网络设置] [参数]    获取网卡配置和网络状态</p><p>（25)  ping                                        查看网络状态</p><p>（26）网卡信息</p><p>​         网卡配置文件：/etc/sysconfig/network-scripts/ifcfg-ens33  </p><p>​        地址分配模式：BOOTPROTO=static | dhcp | none:表示无须启动协议 | bootp:表示使用BOOTP协议</p><p>​        是否开机自启：ONBOOT=yes | no</p><p>​        IP地址：IPADDR=192.168.10.10</p><p>​        子网掩码：NETMASK=255.255.255.0  或 PREFIX=24</p><p>​        网关地址：GATEWAY=192.168.10.1</p><p>​        DNS地址：DNS1=192.168.10.1</p><p>（26)  source   文件名                    使配置文件生效</p><p>（27)  hostname                                           查询当前系统主机名</p><p>​        hostname [名字]                                  临时修改主机名</p><p>​        hostnamectl set-hostname [名字]   永久修改主机名</p><p>（28） jps                    查看当前用户启动的Java信息</p><p>（29）export [选项] [变量名]    功能：用于将 Shell 变量输出为环境变量，或者将 Shell 函数输出为环境变量。 </p><p>（30）echo 命令<br>功能：用于在终端设备上输出字符串或变量提取后的值。一般使用在变量前 加上$符号的方式提取出变量的值，<br>格式：echo [字符串] </p><h5 id="2、Linux的帮助命令（help、man、info）"><a href="#2、Linux的帮助命令（help、man、info）" class="headerlink" title="2、Linux的帮助命令（help、man、info）"></a><strong>2</strong>、Linux的帮助命令（help、man、info）</h5><p>（1）help命令： help 命令（用于内部命令） –help命令（用于外部命令）</p><p>（2）man命令   按键      功能 </p><p>​            空格键     向下翻页</p><p>​            page down   向下翻页</p><p>​            page up     向上翻页</p><p>​            home      到第一页</p><p>​            end       到最后一页</p><p>（3）info 命令 显示内容更完整</p><h5 id="3、历史命令：history"><a href="#3、历史命令：history" class="headerlink" title="3、历史命令：history"></a>3、历史命令：history</h5><p>命令    选项/参数   操作对象    作用</p><p>history   -ps                   显示或操纵历史列表</p><p>​                -anrw      文件名     显示或操纵历史列表</p><p>​                -c                    清空历史列表</p><p>​                -d         偏移量     从指定位置删除历史列表</p><p>​                -a                   将当前历史行添加到历史文件</p><p>​                -n</p><p>​                -r</p><p>​                -w</p><p>​                -p</p><p>​                -s</p><h1 id="第二章、Linux目录管理"><a href="#第二章、Linux目录管理" class="headerlink" title="第二章、Linux目录管理"></a>第二章、Linux目录管理</h1><h4 id="一、目录的四种类型"><a href="#一、目录的四种类型" class="headerlink" title="一、目录的四种类型"></a>一、目录的四种类型</h4><p>1、可分享目录：    分享给其他系统挂载使用的目录</p><p>2、不可分享目录：   系统运行的配置文件或程序有关的socket文件</p><p>3、可变目录：      经常改变数据的目录，如：登录文件</p><p>4、不可变目录：    不经常改变的数据，如：函数库，系统主机服务配置文件</p><h4 id="二、目录结构"><a href="#二、目录结构" class="headerlink" title="二、目录结构"></a>二、目录结构</h4><p>树形结构：/ </p><h4 id="三、目录路径"><a href="#三、目录路径" class="headerlink" title="三、目录路径"></a>三、目录路径</h4><p>1、概念：系统中存放文件或目录的位置</p><p>2、相对路径：相对于当前所在路径的位置</p><p>3、绝对路径：从根目录开始，依次将各级子目录的名字组合的路径</p><p>4、路径中的特殊符号</p><p>​    <strong>.</strong>   :表示用户所处的当前目录</p><p>​    <strong>..</strong>   :表示上级目录</p><p>-      :表示前一个目录</p><p>​    <strong>~</strong>  :表示家目录</p><p>​    <strong>/</strong>   :表示根目录</p><h4 id="四、显示路径（pwd）"><a href="#四、显示路径（pwd）" class="headerlink" title="四、显示路径（pwd）"></a>四、显示路径（pwd）</h4><p>​    pwd               显示当前目录的路径</p><h4 id="五、切换目录（cd）"><a href="#五、切换目录（cd）" class="headerlink" title="五、切换目录（cd）"></a>五、切换目录（cd）</h4><p><strong>cd</strong>  [目录名/特殊符号]    将当前目录切换到指定目录</p><p>​    目录名            切换到指定目录</p><p>​    空白              切换到家目录</p><p>​    <strong>~</strong>                    切换到家目录</p><p>​    —                切换到上一次操作目录</p><p>​    <strong>..</strong>                 切换到上一级目录</p><p>   路径              切换到路径对应的目录</p><h4 id="六、查看目录-文件（ls、ll）"><a href="#六、查看目录-文件（ls、ll）" class="headerlink" title="六、查看目录/文件（ls、ll）"></a>六、查看目录/文件（ls、ll）</h4><p>​        ls  参数   目录名     查看指定目录下的子目录和文件</p><p>参数</p><p>​     -a                查看所有文件和目录，包括隐藏文件（隐藏文件前面带**.**）</p><p>​    -d                查看目录，但不显示文件</p><p>​    -l                将权限、拥有者、文件大小全部列出（ll=ls -l）</p><p>​    -r                将文件以英文反次序显示</p><p>​    -t                将文件以建立的先后顺序列出</p><p>​    -A                同-a，但不列出当前目录以及上一级目录</p><p>​    -R                诺目录下有文件，则以文件次序列出</p><h4 id="七、创建目录（mkdir）"><a href="#七、创建目录（mkdir）" class="headerlink" title="七、创建目录（mkdir）"></a>七、创建目录（mkdir）</h4><p>​        mkidr   参数   目录名</p><p>参数：</p><p>​       -m               为目录指定访问权限，与chmod类似</p><p>​       -p         如果父目录存在，不会报错，不存在就会创建父目录（创建多级目录）</p><p>​       -v                显示指令执行的过程</p><p>​       {目录1，目录2}     同时创建多个目录</p><h4 id="八、删除目录-文件（rm）"><a href="#八、删除目录-文件（rm）" class="headerlink" title="八、删除目录/文件（rm）"></a>八、删除目录/文件（rm）</h4><p>1、作用：删除目录，但只能删除空目录或多级空目录</p><p>rmdir   [选项]   目录名</p><p>​       -p                递归删除目录，删除多级目录</p><p>​       -v                显示执行细节</p><p>​       {目录1，目录2}     删除多级目录</p><p>rm     -r      目录名     删除目录</p><p>rm     -rf     目录/文件   强制删除目录或文件</p><h1 id="第三章、Linux文件管理"><a href="#第三章、Linux文件管理" class="headerlink" title="第三章、Linux文件管理"></a>第三章、Linux文件管理</h1><h4 id="一、创建文件（touch、vi）"><a href="#一、创建文件（touch、vi）" class="headerlink" title="一、创建文件（touch、vi）"></a>一、创建文件（touch、vi）</h4><p>​        touch   参数   文件</p><p>参数：</p><p>​        touch                  创建文件</p><p>​        touch -c                更改文件访问时间</p><p>​        touch {文件1,…文件5}.text  同时创建多个时间</p><h4 id="二、编辑文件（vi）"><a href="#二、编辑文件（vi）" class="headerlink" title="二、编辑文件（vi）"></a>二、编辑文件（vi）</h4><pre class="line-numbers language-none"><code class="language-none">vi创建文件，文件不存在，则打开文件命令模式：常用命令/搜索(区分大小写)n查找下一个:nu显示当前文件行号:wq保存退出（q保存、w退出、!强制）Esc退到命令行i进入编辑模式o跳转到下一行编辑yy复制p粘贴到下一行dd删除当前行999dd删除光标以后的全部内容gg跳转到文件首行G跳转到文件尾行u撤销操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改文件  echo ‘要修改的字符串‘ &gt;&gt; filename </p><h4 id="二、查看文件内容（cat、head、tail、more、less）"><a href="#二、查看文件内容（cat、head、tail、more、less）" class="headerlink" title="二、查看文件内容（cat、head、tail、more、less）"></a>二、查看文件内容（cat、head、tail、more、less）</h4><p>1、cat命令（查看文件全部内容）</p><p>​        Cat     参数   文件</p><p>参数：</p><p>​         -n                由1开始，对所有的行号进行编号</p><p>​        -b                与1类似，但对空白行不进行编号</p><p>​         -s                当遇到连续两行以上的空白行，则只输出一行。</p><p>​         -n /test/目录1 &gt; /test/目录2         将目录1的文件添加到目录2</p><p>​         /test/目录1 /test/目录2 &gt; /test/目录3 将目录1和目录2的文件合拼到目录3</p><p>2、head命令（显示文件前十行）</p><p>3、tail命令（显示最后十行）</p><p>4、 more（ 以一页一页的形式显示文件：空格键：下一页、b：上一页 ）</p><p>5、less命令（ less 与 more 类似，less 可以随意浏览文件，支持翻页和搜索，支持向上翻页和向下翻页。 ）</p><h4 id="三、移动文件-目录（mv）"><a href="#三、移动文件-目录（mv）" class="headerlink" title="三、移动文件/目录（mv）"></a>三、移动文件/目录（mv）</h4><p>mv    文件    目标目录</p><p>mv    修改文件夹名/目录名</p><p>修改文件名/目录名：mv    文件名/目录名    新文件名/新目录名</p><h4 id="四、复制文件-目录（cp）"><a href="#四、复制文件-目录（cp）" class="headerlink" title="四、复制文件/目录（cp）"></a>四、复制文件/目录（cp）</h4><p>​        cp    参数    源文件    目标文件</p><p>参数：</p><p>​        —r        递归复制目录下所有目录/文件</p><p>​        —f        强制复制文件，若重名直接覆盖</p><h4 id="五、删除目录-文件（rm）"><a href="#五、删除目录-文件（rm）" class="headerlink" title="五、删除目录/文件（rm）"></a>五、删除目录/文件（rm）</h4><p>1、作用：删除目录，但只能删除空目录或多级空目录</p><p>rmdir   [选项]   目录名</p><p>​       -p                递归删除目录，删除多级目录</p><p>​       -v                显示指令执行的过程</p><p>​       {目录1，目录2}     删除多级目录</p><p>rm     -r      目录/文件     删除目录</p><p>rm     -rf     目录/文件   强制删除目录或文件</p><h4 id="六、查找文件（find）"><a href="#六、查找文件（find）" class="headerlink" title="六、查找文件（find）"></a>六、查找文件（find）</h4><p>find    路径    参数    文件名</p><p>参数：</p><p>name :                        name按名字查找、iname 会忽略大小写</p><p>size n :                        按文件大小查找</p><h4 id="七、修改文件的权限（chmod）"><a href="#七、修改文件的权限（chmod）" class="headerlink" title="七、修改文件的权限（chmod）"></a>七、修改文件的权限（chmod）</h4><p>chmod    777    文件名/目录名    （读：4、写：2、执行：1）</p><p>chmod    u=rwx,g=rw,o=r    文件名/目录名    （读：r、写：w、执行：x）</p><p>u所有者，g 表示与所有者同组用户，o 表示其他用户。</p><h4 id="八、tar-命令（打包-解压）"><a href="#八、tar-命令（打包-解压）" class="headerlink" title="八、tar 命令（打包/解压）"></a>八、tar 命令（打包/解压）</h4><p>格式：tar [选项] [档案名] [文件或目录] </p><p>打包： tar -cvf      目标包.tar    源包.log </p><p>解压：tar    -zxvf    包名</p><p>参数：</p><p>-c    创建压缩文件</p><p>-x    解开压缩文件</p><p>-z    用gzip压缩或解压文件，文件名为*.tar.gz。</p><p>-f    &lt;备份文件&gt; 指定备份文件。 </p><p>-v    显示压缩或解压的过程。</p><p>-C    指定解压到的目录</p><p> -t ：查看打包文件的内容含有哪些文件 </p><p>stat—查看文件详细信息，包括存储信息和时间等</p><p>stat    a.text</p><p>cut—按列提取文本字符，而head是按行取文本</p><p>diff—比较两个文本文件是否相同</p><p>语法：diff [选项] 文本文件</p><p>diff    -c    a2    a2</p><h1 id="第四章、用户操作"><a href="#第四章、用户操作" class="headerlink" title="第四章、用户操作"></a>第四章、用户操作</h1><h2 id="一、基本简介"><a href="#一、基本简介" class="headerlink" title="一、基本简介"></a>一、基本简介</h2><p>管理员UID为0：系统的管理员用户。<br>系统用户UID为1～999： 默认服务程序会有独立的系统用户负责运行。<br>普通用户UID从1000开始：是由管理员创建的用于日常工作的用户。</p><h4 id="二、添加新用户（useradd）"><a href="#二、添加新用户（useradd）" class="headerlink" title="二、添加新用户（useradd）"></a>二、添加新用户（useradd）</h4><p>功能：创建新用户，该命令只能由 root 用户使用。 </p><p>创建 teacher 用户 </p><p>[root@master ~]# adduser teacher </p><p>参数：</p><p>-d    指定用户的家目录（默认为/home/username）<br>-e    账户的到期时间，格式为YYYY-MM-DD.<br>-u    指定该用户的默认UID<br>-g    指定一个初始的用户基本组（必须已存在）<br>-G    指定一个或多个扩展用户组</p><h4 id="三、用户管理"><a href="#三、用户管理" class="headerlink" title="三、用户管理"></a>三、用户管理</h4><p>1、groupadd命令    创建用户组<br>[root@master ~]# groupadd jxjd</p><p>2、修改用户或组（chown）</p><p>功能：将文件或目录的拥有者改为指定的用户或组，<br>[root@master ~]# chown bin:bin a.txt</p><p>3、usermod命令    修改用户属性<br>语法：usermod [选项] 用户名</p><p>参数：</p><p>-d    -m与参数-d连用，可重新指定用户的家目录并自动把旧的数据转移过去<br>-e    账户的到期时间，格式为YYYY-MM-DD<br>-g    变更所属用户组<br>-G    变更扩展用户组<br>-L    锁定用户禁止其登录系统<br>-U    解锁用户，允许其登录系统<br>-u    修改用户的UID</p><p>4、修改密码（passwd）</p><p>功能：设置或修改指定用户的密码。 </p><p> 更改用户 teacher 的密码 。 </p><p>[root@master ~]#  passwd teacher 更改用户 teacher 的密码 。 </p><p>5、userdel命令    删除用户</p><p>[root@ local ~]# userdel    -r    zzn</p><p>参数：</p><p>-f    强制删除用户</p><p>-r    同时删除用户及用户家目录</p><h4 id="四、切换用户（su）"><a href="#四、切换用户（su）" class="headerlink" title="四、切换用户（su）"></a>四、切换用户（su）</h4><p>su 命令</p><p>[root@master ~]# su teacher </p><p>[root@master ~]# su teacher </p><h4 id="五、提升用户权限（Sudo）"><a href="#五、提升用户权限（Sudo）" class="headerlink" title="五、提升用户权限（Sudo）"></a>五、提升用户权限（Sudo）</h4><p>[root@master ~]# sudo teacher </p><h1 id="第五章、文件操作"><a href="#第五章、文件操作" class="headerlink" title="第五章、文件操作"></a>第五章、文件操作</h1><h3 id="1、统计字符数（wc）"><a href="#1、统计字符数（wc）" class="headerlink" title="1、统计字符数（wc）"></a>1、统计字符数（wc）</h3><pre class="line-numbers language-none"><code class="language-none">wc-[选项]文件参数：-c显示字节数-m    显示单词数-l显示行数-L   最长字符行的字符数-m   单词个数  -c and -m （包含换行符和空格）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、排序（sort）</p><pre class="line-numbers language-none"><code class="language-none">sort-[选项]文件参数：-n按字典序排序-r-k<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、检查重复行列（uniq）</p><pre class="line-numbers language-none"><code class="language-none">uniq-[选项]文件参数：-c重复次数-n返回不重复的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、查找：grep</p><p>常用于查找文件里符合条件的字符串</p><pre class="line-numbers language-none"><code class="language-none">grep -[选项] 文件参数：grep  -i忽略大小写grep  -v忽略包含指定字符串的数据grep  -n显示对应字符串的行号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、编辑：sed</p><p>用来自动编辑一个或多个文件、简化对文件的反复操作</p><pre class="line-numbers language-none"><code class="language-none">sed [选项] 文件参数：sed  -a/i增加：a行后增加、l行前增加、$最后一行增加sed  -d删除sed  -s替换sed  -l修改原文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、分析：awk</p><p>是一种处理文本的语言，是一个强大的文本分析工具</p><h1 id="第六章、shell编程"><a href="#第六章、shell编程" class="headerlink" title="第六章、shell编程"></a>第六章、shell编程</h1><pre class="line-numbers language-none"><code class="language-none">#!/bin/bash  开头文件echo hello world 脚本内容# 执行脚本1. bash/sh 脚本文件   可选项: -x 输出要执行的脚本内容，再输出脚本结果 2. ./脚本文件  -需要添加执行用户权限(chmod u+x 脚本文件)3. 脚本文件    -需要添加环境变量  .:$PATH# shell变量1. 本地变量 格式: VAR_NAME=VALUE应用场景: 在shell脚本中定义一些临时变量时使用，对当前shell进程的子shell进程及其它shell进程无效2. 环境变量格式: export VAR_NAME=VALUE应用场景: 用于设置临时环境变量, 对子shell进程有效，对其它shell进程无效3. 位置变量$1、$2、$3  -shell脚本内容格式: xxx.sh abc xyz  位置变量相当于java中main函数的args参数，可以在shell脚本中动态获取外部参数4. 特殊变量$?  -上一条命令的返回状态码，状态码在0~255之间(0表示成功，其它为失败)$#  -shell脚本所有参数的个数变量和引号单引号不解析变量   注意单引号不解析变量，以下反引号中的`$name`不是单引号双引号解析变量反引号: `$name`解析变量，并以获取到的值转为命令执行, 另一种写法$($name)拼接单引号, 例 echo "'name'"# shell循环for((i=0;i&lt;10;i++))   -如果do写在for后面需要先加;do循环体donefor i in 1 2 3do 循环体done while 测试条件do循环体done测试条件:1. text 表达式  2. [ 表达式 ]表达式:-gt(大于)、-lt(小于)、-ge(大于等于)、-le(小于等于)、-eq(等于)、-ne(不等于)、=(等于)、!=(不等于)e.g: while [ 2 -gt 1 ] do echo yes sleep 1   # 休眠1秒 done# 单分支if 测试条件then选择分支fi# 双分支if 测试条件then选择分支1else选择分支2fi# 多分支if 测试条件1then 选择分支1elif 测试条件2then 选择分支2... else选择分支nfie.g #!/bin/bashif [ $# -lt 1 ]   # 判断外部参数个数是否为1then        echo not found param        exit 100   # 退出脚本执行，不会执行下面的代码，100是自定义状态码，echo$?命令fiflag=$1       if [ $flag -eq 1 ]   then        echo yesfi脚本运行命令:nuhup xxx.sh &amp;     -nohup表示即使关掉此回话也不会停止shell脚本运行， &amp;表示后台运行      #重定向   &gt; 覆盖， &gt;&gt; 追加   例如   ll &gt; a.txt  # 将ll显示的信息添加到a.txt中# 定时器 crontabsystemctl status crond   # 查看服务状态/etc/crontab # 配置文件路径tail -f /var/log/cron # 检测日志文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第七章、linux中systemctl详细理解及常用命令：<br>Linux 服务管理两种方式service和systemctl<br>systemd是Linux系统最新的初始化系统(init),作用是提高系统的启动速度。<br>systemd对应的进程管理命令是systemctl<br>systemctl命令管理systemd的资源Unit<br>systemctl<br>systemctl  –-version       查看版本号</p><p>systemctl  start：立刻启动后面接的 unit。</p><p>systemctl  stop：立刻关闭后面接的 unit。</p><p>systemctl  restart：立刻关闭后启动后面接的 unit，亦即执行 stop 再 start 的意思。</p><p>systemctl  reload：不关闭 unit 的情况下，重新载入配置文件，让设置生效。</p><p>systemctl  enable：设置下次开机时，后面接的 unit 会被启动。</p><p>systemctl  disable：设置下次开机时，后面接的 unit 不会被启动。</p><p>systemctl  status：目前后面接的这个 unit 的状态，会列出有没有正在执行、开机时是否启动等信息。</p><p>systemctl  is-active：目前有没有正在运行中。</p><p>systemctl  is-enable：开机时有没有默认要启用这个 unit。</p><p>systemctl  kill ：不要被 kill 这个名字吓着了，它其实是向运行 unit 的进程发送信号。</p><p>systemctl  show：列出 unit 的配置。</p><p>systemctl  mask：注销 unit，注销后你就无法启动这个 unit 了。</p><p>systemctl  unmask：取消对 unit 的注销</p><p><strong>序：</strong></p><p>dhcp：自动分配<br>DNS：域名与IP的对照表</p>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
